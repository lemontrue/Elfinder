//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElFinder.CryptxService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contact", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
    [System.SerializableAttribute()]
    public partial class Contact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ElFinder.CryptxService.ContactCertificateRelationship> CertificatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ElFinder.CryptxService.ContactCertificateRelationship> Certificates {
            get {
                return this.CertificatesField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificatesField, value) != true)) {
                    this.CertificatesField = value;
                    this.RaisePropertyChanged("Certificates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContactCertificateRelationship", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
    [System.SerializableAttribute()]
    public partial class ContactCertificateRelationship : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] CertificateBytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CertificateIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.CertificateInfo CertificateInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FriendlyNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] CertificateBytes {
            get {
                return this.CertificateBytesField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateBytesField, value) != true)) {
                    this.CertificateBytesField = value;
                    this.RaisePropertyChanged("CertificateBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CertificateID {
            get {
                return this.CertificateIDField;
            }
            set {
                if ((this.CertificateIDField.Equals(value) != true)) {
                    this.CertificateIDField = value;
                    this.RaisePropertyChanged("CertificateID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.CertificateInfo CertificateInfo {
            get {
                return this.CertificateInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateInfoField, value) != true)) {
                    this.CertificateInfoField = value;
                    this.RaisePropertyChanged("CertificateInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FriendlyName {
            get {
                return this.FriendlyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FriendlyNameField, value) != true)) {
                    this.FriendlyNameField = value;
                    this.RaisePropertyChanged("FriendlyName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertificateInfo", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
    [System.SerializableAttribute()]
    public partial class CertificateInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CertificateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.CertificateInfo.DecryptInfo DecryptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullSubjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string INNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IssureNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.CertificateInfo.MyCertificateInfo MyCertificateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime NotAfterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime NotBeforeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrganizationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.CertificateInfo.RecipientCertificateInfo RecipientCertificateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ThumbprintField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CertificateId {
            get {
                return this.CertificateIdField;
            }
            set {
                if ((this.CertificateIdField.Equals(value) != true)) {
                    this.CertificateIdField = value;
                    this.RaisePropertyChanged("CertificateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.CertificateInfo.DecryptInfo Decrypt {
            get {
                return this.DecryptField;
            }
            set {
                if ((object.ReferenceEquals(this.DecryptField, value) != true)) {
                    this.DecryptField = value;
                    this.RaisePropertyChanged("Decrypt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullSubjectName {
            get {
                return this.FullSubjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullSubjectNameField, value) != true)) {
                    this.FullSubjectNameField = value;
                    this.RaisePropertyChanged("FullSubjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string INN {
            get {
                return this.INNField;
            }
            set {
                if ((object.ReferenceEquals(this.INNField, value) != true)) {
                    this.INNField = value;
                    this.RaisePropertyChanged("INN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTest {
            get {
                return this.IsTestField;
            }
            set {
                if ((this.IsTestField.Equals(value) != true)) {
                    this.IsTestField = value;
                    this.RaisePropertyChanged("IsTest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IssureName {
            get {
                return this.IssureNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IssureNameField, value) != true)) {
                    this.IssureNameField = value;
                    this.RaisePropertyChanged("IssureName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.CertificateInfo.MyCertificateInfo MyCertificate {
            get {
                return this.MyCertificateField;
            }
            set {
                if ((object.ReferenceEquals(this.MyCertificateField, value) != true)) {
                    this.MyCertificateField = value;
                    this.RaisePropertyChanged("MyCertificate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime NotAfter {
            get {
                return this.NotAfterField;
            }
            set {
                if ((this.NotAfterField.Equals(value) != true)) {
                    this.NotAfterField = value;
                    this.RaisePropertyChanged("NotAfter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime NotBefore {
            get {
                return this.NotBeforeField;
            }
            set {
                if ((this.NotBeforeField.Equals(value) != true)) {
                    this.NotBeforeField = value;
                    this.RaisePropertyChanged("NotBefore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Organization {
            get {
                return this.OrganizationField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizationField, value) != true)) {
                    this.OrganizationField = value;
                    this.RaisePropertyChanged("Organization");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.CertificateInfo.RecipientCertificateInfo RecipientCertificate {
            get {
                return this.RecipientCertificateField;
            }
            set {
                if ((object.ReferenceEquals(this.RecipientCertificateField, value) != true)) {
                    this.RecipientCertificateField = value;
                    this.RaisePropertyChanged("RecipientCertificate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubjectName {
            get {
                return this.SubjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectNameField, value) != true)) {
                    this.SubjectNameField = value;
                    this.RaisePropertyChanged("SubjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Thumbprint {
            get {
                return this.ThumbprintField;
            }
            set {
                if ((object.ReferenceEquals(this.ThumbprintField, value) != true)) {
                    this.ThumbprintField = value;
                    this.RaisePropertyChanged("Thumbprint");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="CertificateInfo.DecryptInfo", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
        [System.SerializableAttribute()]
        public partial class DecryptInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string IssuerField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string PublicKeyAlgorithmField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string SerialNumberField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string Issuer {
                get {
                    return this.IssuerField;
                }
                set {
                    if ((object.ReferenceEquals(this.IssuerField, value) != true)) {
                        this.IssuerField = value;
                        this.RaisePropertyChanged("Issuer");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string PublicKeyAlgorithm {
                get {
                    return this.PublicKeyAlgorithmField;
                }
                set {
                    if ((object.ReferenceEquals(this.PublicKeyAlgorithmField, value) != true)) {
                        this.PublicKeyAlgorithmField = value;
                        this.RaisePropertyChanged("PublicKeyAlgorithm");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string SerialNumber {
                get {
                    return this.SerialNumberField;
                }
                set {
                    if ((object.ReferenceEquals(this.SerialNumberField, value) != true)) {
                        this.SerialNumberField = value;
                        this.RaisePropertyChanged("SerialNumber");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="CertificateInfo.MyCertificateInfo", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
        [System.SerializableAttribute()]
        public partial class MyCertificateInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string FriendlyNameField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private bool HasPINField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.Guid IdField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string FriendlyName {
                get {
                    return this.FriendlyNameField;
                }
                set {
                    if ((object.ReferenceEquals(this.FriendlyNameField, value) != true)) {
                        this.FriendlyNameField = value;
                        this.RaisePropertyChanged("FriendlyName");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public bool HasPIN {
                get {
                    return this.HasPINField;
                }
                set {
                    if ((this.HasPINField.Equals(value) != true)) {
                        this.HasPINField = value;
                        this.RaisePropertyChanged("HasPIN");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.Guid Id {
                get {
                    return this.IdField;
                }
                set {
                    if ((this.IdField.Equals(value) != true)) {
                        this.IdField = value;
                        this.RaisePropertyChanged("Id");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="CertificateInfo.RecipientCertificateInfo", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
        [System.SerializableAttribute()]
        public partial class RecipientCertificateInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string FriendlyNameField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string FriendlyName {
                get {
                    return this.FriendlyNameField;
                }
                set {
                    if ((object.ReferenceEquals(this.FriendlyNameField, value) != true)) {
                        this.FriendlyNameField = value;
                        this.RaisePropertyChanged("FriendlyName");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OldServiceResponse", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElFinder.CryptxService.CertificatesResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElFinder.CryptxService.ProfileResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElFinder.CryptxService.UserProfilesResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElFinder.CryptxService.ProfileTooltipResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElFinder.CryptxService.NeedToPINResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElFinder.CryptxService.AdminInfoResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElFinder.CryptxService.SearchResultResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElFinder.CryptxService.AddRecipientResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElFinder.CryptxService.SignAttachmentResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElFinder.CryptxService.CertificateResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElFinder.CryptxService.CryptoOperationResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElFinder.CryptxService.DAVListCryptoOperationResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElFinder.CryptxService.SignVerifyResponse))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.SystemException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.NullReferenceException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Runtime.InteropServices.ExternalException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Runtime.InteropServices.COMException))]
    public partial class OldServiceResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Exception ExceptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception Exception {
            get {
                return this.ExceptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionField, value) != true)) {
                    this.ExceptionField = value;
                    this.RaisePropertyChanged("Exception");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertificatesResponse", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class CertificatesResponse : ElFinder.CryptxService.OldServiceResponse {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ElFinder.CryptxService.CertificateInfo> CertificatesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ElFinder.CryptxService.CertificateInfo> Certificates {
            get {
                return this.CertificatesField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificatesField, value) != true)) {
                    this.CertificatesField = value;
                    this.RaisePropertyChanged("Certificates");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProfileResponse", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class ProfileResponse : ElFinder.CryptxService.OldServiceResponse {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.Settings SettingsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.Settings Settings {
            get {
                return this.SettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.SettingsField, value) != true)) {
                    this.SettingsField = value;
                    this.RaisePropertyChanged("Settings");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserProfilesResponse", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class UserProfilesResponse : ElFinder.CryptxService.OldServiceResponse {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ElFinder.CryptxService.UserProfileListElement> UserProfileListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ElFinder.CryptxService.UserProfileListElement> UserProfileList {
            get {
                return this.UserProfileListField;
            }
            set {
                if ((object.ReferenceEquals(this.UserProfileListField, value) != true)) {
                    this.UserProfileListField = value;
                    this.RaisePropertyChanged("UserProfileList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProfileTooltipResponse", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class ProfileTooltipResponse : ElFinder.CryptxService.OldServiceResponse {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ElFinder.CryptxService.CertificateInfo> EncryptCertificateInfosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.CertificateInfo SignCertificateInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ElFinder.CryptxService.CertificateInfo> EncryptCertificateInfos {
            get {
                return this.EncryptCertificateInfosField;
            }
            set {
                if ((object.ReferenceEquals(this.EncryptCertificateInfosField, value) != true)) {
                    this.EncryptCertificateInfosField = value;
                    this.RaisePropertyChanged("EncryptCertificateInfos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.CertificateInfo SignCertificateInfo {
            get {
                return this.SignCertificateInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.SignCertificateInfoField, value) != true)) {
                    this.SignCertificateInfoField = value;
                    this.RaisePropertyChanged("SignCertificateInfo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NeedToPINResponse", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class NeedToPINResponse : ElFinder.CryptxService.OldServiceResponse {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NeedToPINField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NeedToPIN {
            get {
                return this.NeedToPINField;
            }
            set {
                if ((this.NeedToPINField.Equals(value) != true)) {
                    this.NeedToPINField = value;
                    this.RaisePropertyChanged("NeedToPIN");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdminInfoResponse", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class AdminInfoResponse : ElFinder.CryptxService.OldServiceResponse {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ElFinder.CryptxService.GroupUserInfo> GroupUserInfosField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ElFinder.CryptxService.GroupUserInfo> GroupUserInfos {
            get {
                return this.GroupUserInfosField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupUserInfosField, value) != true)) {
                    this.GroupUserInfosField = value;
                    this.RaisePropertyChanged("GroupUserInfos");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchResultResponse", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class SearchResultResponse : ElFinder.CryptxService.OldServiceResponse {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ElFinder.CryptxService.CertificateInfo> CertificatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ViewCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ElFinder.CryptxService.CertificateInfo> Certificates {
            get {
                return this.CertificatesField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificatesField, value) != true)) {
                    this.CertificatesField = value;
                    this.RaisePropertyChanged("Certificates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ViewCount {
            get {
                return this.ViewCountField;
            }
            set {
                if ((this.ViewCountField.Equals(value) != true)) {
                    this.ViewCountField = value;
                    this.RaisePropertyChanged("ViewCount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddRecipientResponse", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class AddRecipientResponse : ElFinder.CryptxService.OldServiceResponse {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.CertificateInfo AddedCertificateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.AddRecipientResponse.StatusTypes StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.CertificateInfo AddedCertificate {
            get {
                return this.AddedCertificateField;
            }
            set {
                if ((object.ReferenceEquals(this.AddedCertificateField, value) != true)) {
                    this.AddedCertificateField = value;
                    this.RaisePropertyChanged("AddedCertificate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.AddRecipientResponse.StatusTypes Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="AddRecipientResponse.StatusTypes", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
        public enum StatusTypes : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            CertInDB = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            CertAdded = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            CertHasRelation = 2,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignAttachmentResponse", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class SignAttachmentResponse : ElFinder.CryptxService.OldServiceResponse {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DetachedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Detached {
            get {
                return this.DetachedField;
            }
            set {
                if ((this.DetachedField.Equals(value) != true)) {
                    this.DetachedField = value;
                    this.RaisePropertyChanged("Detached");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertificateResponse", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class CertificateResponse : ElFinder.CryptxService.OldServiceResponse {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.CertificateInfo CertificateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] CertificateFileBytesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.CertificateInfo Certificate {
            get {
                return this.CertificateField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateField, value) != true)) {
                    this.CertificateField = value;
                    this.RaisePropertyChanged("Certificate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] CertificateFileBytes {
            get {
                return this.CertificateFileBytesField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateFileBytesField, value) != true)) {
                    this.CertificateFileBytesField = value;
                    this.RaisePropertyChanged("CertificateFileBytes");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CryptoOperationResponse", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class CryptoOperationResponse : ElFinder.CryptxService.OldServiceResponse {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] OperatedFileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.DataOperationResult OperationResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] OperatedFile {
            get {
                return this.OperatedFileField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatedFileField, value) != true)) {
                    this.OperatedFileField = value;
                    this.RaisePropertyChanged("OperatedFile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.DataOperationResult OperationResult {
            get {
                return this.OperationResultField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationResultField, value) != true)) {
                    this.OperationResultField = value;
                    this.RaisePropertyChanged("OperationResult");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DAVListCryptoOperationResponse", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class DAVListCryptoOperationResponse : ElFinder.CryptxService.OldServiceResponse {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ElFinder.CryptxService.DataOperationResult> OperationResultsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ElFinder.CryptxService.DataOperationResult> OperationResults {
            get {
                return this.OperationResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationResultsField, value) != true)) {
                    this.OperationResultsField = value;
                    this.RaisePropertyChanged("OperationResults");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignVerifyResponse", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class SignVerifyResponse : ElFinder.CryptxService.OldServiceResponse {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ElFinder.CryptxService.CertificateStatus> CertificateStatusesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataSourceFileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DetachedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MainStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceFileField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ElFinder.CryptxService.CertificateStatus> CertificateStatuses {
            get {
                return this.CertificateStatusesField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateStatusesField, value) != true)) {
                    this.CertificateStatusesField = value;
                    this.RaisePropertyChanged("CertificateStatuses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataSourceFile {
            get {
                return this.DataSourceFileField;
            }
            set {
                if ((object.ReferenceEquals(this.DataSourceFileField, value) != true)) {
                    this.DataSourceFileField = value;
                    this.RaisePropertyChanged("DataSourceFile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Detached {
            get {
                return this.DetachedField;
            }
            set {
                if ((this.DetachedField.Equals(value) != true)) {
                    this.DetachedField = value;
                    this.RaisePropertyChanged("Detached");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MainStatus {
            get {
                return this.MainStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.MainStatusField, value) != true)) {
                    this.MainStatusField = value;
                    this.RaisePropertyChanged("MainStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceFile {
            get {
                return this.SourceFileField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceFileField, value) != true)) {
                    this.SourceFileField = value;
                    this.RaisePropertyChanged("SourceFile");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Settings", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Settings")]
    [System.SerializableAttribute()]
    public partial class Settings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SilentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.CertificateVerificationSettings _CertificateVerificationSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.DecryptionSettings _DecryptionSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.EncryptionSettings _EncryptionSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.MainSettings _MainSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.SignatureSettings _SignatureSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.SignatureVerificationSettings _SignatureVerificationSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.TimestampSettings _TimestampSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.TimestampVerificationSettings _TimestampVerificationSettingsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Silent {
            get {
                return this.SilentField;
            }
            set {
                if ((this.SilentField.Equals(value) != true)) {
                    this.SilentField = value;
                    this.RaisePropertyChanged("Silent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.CertificateVerificationSettings _CertificateVerificationSettings {
            get {
                return this._CertificateVerificationSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this._CertificateVerificationSettingsField, value) != true)) {
                    this._CertificateVerificationSettingsField = value;
                    this.RaisePropertyChanged("_CertificateVerificationSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.DecryptionSettings _DecryptionSettings {
            get {
                return this._DecryptionSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this._DecryptionSettingsField, value) != true)) {
                    this._DecryptionSettingsField = value;
                    this.RaisePropertyChanged("_DecryptionSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.EncryptionSettings _EncryptionSettings {
            get {
                return this._EncryptionSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this._EncryptionSettingsField, value) != true)) {
                    this._EncryptionSettingsField = value;
                    this.RaisePropertyChanged("_EncryptionSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.MainSettings _MainSettings {
            get {
                return this._MainSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this._MainSettingsField, value) != true)) {
                    this._MainSettingsField = value;
                    this.RaisePropertyChanged("_MainSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.SignatureSettings _SignatureSettings {
            get {
                return this._SignatureSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this._SignatureSettingsField, value) != true)) {
                    this._SignatureSettingsField = value;
                    this.RaisePropertyChanged("_SignatureSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.SignatureVerificationSettings _SignatureVerificationSettings {
            get {
                return this._SignatureVerificationSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this._SignatureVerificationSettingsField, value) != true)) {
                    this._SignatureVerificationSettingsField = value;
                    this.RaisePropertyChanged("_SignatureVerificationSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.TimestampSettings _TimestampSettings {
            get {
                return this._TimestampSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this._TimestampSettingsField, value) != true)) {
                    this._TimestampSettingsField = value;
                    this.RaisePropertyChanged("_TimestampSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.TimestampVerificationSettings _TimestampVerificationSettings {
            get {
                return this._TimestampVerificationSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this._TimestampVerificationSettingsField, value) != true)) {
                    this._TimestampVerificationSettingsField = value;
                    this.RaisePropertyChanged("_TimestampVerificationSettings");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertificateVerificationSettings", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Settings")]
    [System.SerializableAttribute()]
    public partial class CertificateVerificationSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UrlRetrievalTimeoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte VerifyFlagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.RevocationFlag _RevocationFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.RevocationMode _RevocationModeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UrlRetrievalTimeout {
            get {
                return this.UrlRetrievalTimeoutField;
            }
            set {
                if ((this.UrlRetrievalTimeoutField.Equals(value) != true)) {
                    this.UrlRetrievalTimeoutField = value;
                    this.RaisePropertyChanged("UrlRetrievalTimeout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte VerifyFlags {
            get {
                return this.VerifyFlagsField;
            }
            set {
                if ((this.VerifyFlagsField.Equals(value) != true)) {
                    this.VerifyFlagsField = value;
                    this.RaisePropertyChanged("VerifyFlags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.RevocationFlag _RevocationFlag {
            get {
                return this._RevocationFlagField;
            }
            set {
                if ((this._RevocationFlagField.Equals(value) != true)) {
                    this._RevocationFlagField = value;
                    this.RaisePropertyChanged("_RevocationFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.RevocationMode _RevocationMode {
            get {
                return this._RevocationModeField;
            }
            set {
                if ((this._RevocationModeField.Equals(value) != true)) {
                    this._RevocationModeField = value;
                    this.RaisePropertyChanged("_RevocationMode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DecryptionSettings", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Settings")]
    [System.SerializableAttribute()]
    public partial class DecryptionSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DecryptCertificateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeysetPasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DecryptCertificate {
            get {
                return this.DecryptCertificateField;
            }
            set {
                if ((object.ReferenceEquals(this.DecryptCertificateField, value) != true)) {
                    this.DecryptCertificateField = value;
                    this.RaisePropertyChanged("DecryptCertificate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KeysetPassword {
            get {
                return this.KeysetPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.KeysetPasswordField, value) != true)) {
                    this.KeysetPasswordField = value;
                    this.RaisePropertyChanged("KeysetPassword");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EncryptionSettings", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Settings")]
    [System.SerializableAttribute()]
    public partial class EncryptionSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeysetPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> RecipientCertificates1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<byte[]> RecipientCertificates2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.ZipTypeEnum ZipTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.CertificateVerificationSettings _CertificateVerificationSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.EncodingType _EncodingTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KeysetPassword {
            get {
                return this.KeysetPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.KeysetPasswordField, value) != true)) {
                    this.KeysetPasswordField = value;
                    this.RaisePropertyChanged("KeysetPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> RecipientCertificates1 {
            get {
                return this.RecipientCertificates1Field;
            }
            set {
                if ((object.ReferenceEquals(this.RecipientCertificates1Field, value) != true)) {
                    this.RecipientCertificates1Field = value;
                    this.RaisePropertyChanged("RecipientCertificates1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<byte[]> RecipientCertificates2 {
            get {
                return this.RecipientCertificates2Field;
            }
            set {
                if ((object.ReferenceEquals(this.RecipientCertificates2Field, value) != true)) {
                    this.RecipientCertificates2Field = value;
                    this.RaisePropertyChanged("RecipientCertificates2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.ZipTypeEnum ZipType {
            get {
                return this.ZipTypeField;
            }
            set {
                if ((this.ZipTypeField.Equals(value) != true)) {
                    this.ZipTypeField = value;
                    this.RaisePropertyChanged("ZipType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.CertificateVerificationSettings _CertificateVerificationSettings {
            get {
                return this._CertificateVerificationSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this._CertificateVerificationSettingsField, value) != true)) {
                    this._CertificateVerificationSettingsField = value;
                    this.RaisePropertyChanged("_CertificateVerificationSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.EncodingType _EncodingType {
            get {
                return this._EncodingTypeField;
            }
            set {
                if ((this._EncodingTypeField.Equals(value) != true)) {
                    this._EncodingTypeField = value;
                    this.RaisePropertyChanged("_EncodingType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MainSettings", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Settings")]
    [System.SerializableAttribute()]
    public partial class MainSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDefault {
            get {
                return this.IsDefaultField;
            }
            set {
                if ((this.IsDefaultField.Equals(value) != true)) {
                    this.IsDefaultField = value;
                    this.RaisePropertyChanged("IsDefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignatureSettings", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Settings")]
    [System.SerializableAttribute()]
    public partial class SignatureSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.CertificateVerificationSettings CertificateVerificationSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DetachedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeSignerCertificateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeTimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeysetPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignerCertificate1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.ZipTypeEnum ZipTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.EncodingType _EncodingTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.CertificateVerificationSettings CertificateVerificationSettings {
            get {
                return this.CertificateVerificationSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateVerificationSettingsField, value) != true)) {
                    this.CertificateVerificationSettingsField = value;
                    this.RaisePropertyChanged("CertificateVerificationSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Detached {
            get {
                return this.DetachedField;
            }
            set {
                if ((this.DetachedField.Equals(value) != true)) {
                    this.DetachedField = value;
                    this.RaisePropertyChanged("Detached");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IncludeSignerCertificate {
            get {
                return this.IncludeSignerCertificateField;
            }
            set {
                if ((this.IncludeSignerCertificateField.Equals(value) != true)) {
                    this.IncludeSignerCertificateField = value;
                    this.RaisePropertyChanged("IncludeSignerCertificate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IncludeTimestamp {
            get {
                return this.IncludeTimestampField;
            }
            set {
                if ((this.IncludeTimestampField.Equals(value) != true)) {
                    this.IncludeTimestampField = value;
                    this.RaisePropertyChanged("IncludeTimestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KeysetPassword {
            get {
                return this.KeysetPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.KeysetPasswordField, value) != true)) {
                    this.KeysetPasswordField = value;
                    this.RaisePropertyChanged("KeysetPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignerCertificate1 {
            get {
                return this.SignerCertificate1Field;
            }
            set {
                if ((object.ReferenceEquals(this.SignerCertificate1Field, value) != true)) {
                    this.SignerCertificate1Field = value;
                    this.RaisePropertyChanged("SignerCertificate1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.ZipTypeEnum ZipType {
            get {
                return this.ZipTypeField;
            }
            set {
                if ((this.ZipTypeField.Equals(value) != true)) {
                    this.ZipTypeField = value;
                    this.RaisePropertyChanged("ZipType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.EncodingType _EncodingType {
            get {
                return this._EncodingTypeField;
            }
            set {
                if ((this._EncodingTypeField.Equals(value) != true)) {
                    this._EncodingTypeField = value;
                    this.RaisePropertyChanged("_EncodingType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignatureVerificationSettings", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Settings")]
    [System.SerializableAttribute()]
    public partial class SignatureVerificationSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.VerificationDateTime CertificateVerifyDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.CertificateVerificationSettings CertificateVerifySettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TimestampRequiredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.SignatureVerificationFlags VerifyFlagField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.VerificationDateTime CertificateVerifyDateTime {
            get {
                return this.CertificateVerifyDateTimeField;
            }
            set {
                if ((this.CertificateVerifyDateTimeField.Equals(value) != true)) {
                    this.CertificateVerifyDateTimeField = value;
                    this.RaisePropertyChanged("CertificateVerifyDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.CertificateVerificationSettings CertificateVerifySettings {
            get {
                return this.CertificateVerifySettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateVerifySettingsField, value) != true)) {
                    this.CertificateVerifySettingsField = value;
                    this.RaisePropertyChanged("CertificateVerifySettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TimestampRequired {
            get {
                return this.TimestampRequiredField;
            }
            set {
                if ((this.TimestampRequiredField.Equals(value) != true)) {
                    this.TimestampRequiredField = value;
                    this.RaisePropertyChanged("TimestampRequired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.SignatureVerificationFlags VerifyFlag {
            get {
                return this.VerifyFlagField;
            }
            set {
                if ((this.VerifyFlagField.Equals(value) != true)) {
                    this.VerifyFlagField = value;
                    this.RaisePropertyChanged("VerifyFlag");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimestampSettings", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Settings")]
    [System.SerializableAttribute()]
    public partial class TimestampSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IncludeTsaCertificateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> TsaAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UseNonceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool VerifyOnReceiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.EncodingType _EncodingTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IncludeTsaCertificate {
            get {
                return this.IncludeTsaCertificateField;
            }
            set {
                if ((this.IncludeTsaCertificateField.Equals(value) != true)) {
                    this.IncludeTsaCertificateField = value;
                    this.RaisePropertyChanged("IncludeTsaCertificate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> TsaAddress {
            get {
                return this.TsaAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.TsaAddressField, value) != true)) {
                    this.TsaAddressField = value;
                    this.RaisePropertyChanged("TsaAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseNonce {
            get {
                return this.UseNonceField;
            }
            set {
                if ((this.UseNonceField.Equals(value) != true)) {
                    this.UseNonceField = value;
                    this.RaisePropertyChanged("UseNonce");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool VerifyOnReceive {
            get {
                return this.VerifyOnReceiveField;
            }
            set {
                if ((this.VerifyOnReceiveField.Equals(value) != true)) {
                    this.VerifyOnReceiveField = value;
                    this.RaisePropertyChanged("VerifyOnReceive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.EncodingType _EncodingType {
            get {
                return this._EncodingTypeField;
            }
            set {
                if ((this._EncodingTypeField.Equals(value) != true)) {
                    this._EncodingTypeField = value;
                    this.RaisePropertyChanged("_EncodingType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimestampVerificationSettings", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Settings")]
    [System.SerializableAttribute()]
    public partial class TimestampVerificationSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.SignatureVerificationFlags VerifyFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.CertificateVerificationSettings _CertificateVerificationSettingsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.SignatureVerificationFlags VerifyFlag {
            get {
                return this.VerifyFlagField;
            }
            set {
                if ((this.VerifyFlagField.Equals(value) != true)) {
                    this.VerifyFlagField = value;
                    this.RaisePropertyChanged("VerifyFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.CertificateVerificationSettings _CertificateVerificationSettings {
            get {
                return this._CertificateVerificationSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this._CertificateVerificationSettingsField, value) != true)) {
                    this._CertificateVerificationSettingsField = value;
                    this.RaisePropertyChanged("_CertificateVerificationSettings");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RevocationFlag", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Settings")]
    public enum RevocationFlag : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EndCertificateOnly = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExcludeRoot = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EntireChain = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RevocationMode", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Settings")]
    public enum RevocationMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoCheck = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Online = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Offline = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ZipTypeEnum", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Settings")]
    public enum ZipTypeEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoZip = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ZipBefore = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ZipAfter = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ZipBeforeAndAfter = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EncodingType", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Settings")]
    public enum EncodingType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DefaultEncoding = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Base64 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Base64WithHeaders = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Binary = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VerificationDateTime", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Settings")]
    public enum VerificationDateTime : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CurrentDateTime = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DateTimeFromTimestamp = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DateTimeFromSignature = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignatureVerificationFlags", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Settings")]
    public enum SignatureVerificationFlags : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SignatureOnly = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SignatureAndCertificate = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserProfileListElement", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class UserProfileListElement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DecryptionTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EncryptionTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignTextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DecryptionText {
            get {
                return this.DecryptionTextField;
            }
            set {
                if ((object.ReferenceEquals(this.DecryptionTextField, value) != true)) {
                    this.DecryptionTextField = value;
                    this.RaisePropertyChanged("DecryptionText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EncryptionText {
            get {
                return this.EncryptionTextField;
            }
            set {
                if ((object.ReferenceEquals(this.EncryptionTextField, value) != true)) {
                    this.EncryptionTextField = value;
                    this.RaisePropertyChanged("EncryptionText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDefault {
            get {
                return this.IsDefaultField;
            }
            set {
                if ((this.IsDefaultField.Equals(value) != true)) {
                    this.IsDefaultField = value;
                    this.RaisePropertyChanged("IsDefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SignText {
            get {
                return this.SignTextField;
            }
            set {
                if ((object.ReferenceEquals(this.SignTextField, value) != true)) {
                    this.SignTextField = value;
                    this.RaisePropertyChanged("SignText");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupUserInfo", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class GroupUserInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataOperationResult", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.SystemException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.NullReferenceException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Runtime.InteropServices.ExternalException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Runtime.InteropServices.COMException))]
    public partial class DataOperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Exception ExceptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatedFileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceFileField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception Exception {
            get {
                return this.ExceptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionField, value) != true)) {
                    this.ExceptionField = value;
                    this.RaisePropertyChanged("Exception");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatedFile {
            get {
                return this.OperatedFileField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatedFileField, value) != true)) {
                    this.OperatedFileField = value;
                    this.RaisePropertyChanged("OperatedFile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceFile {
            get {
                return this.SourceFileField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceFileField, value) != true)) {
                    this.SourceFileField = value;
                    this.RaisePropertyChanged("SourceFile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertificateStatus", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class CertificateStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.CertificateInfo CertificateInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.CertificateInfo CertificateInfo {
            get {
                return this.CertificateInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateInfoField, value) != true)) {
                    this.CertificateInfoField = value;
                    this.RaisePropertyChanged("CertificateInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertificateSort", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
    public enum CertificateSort : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FriendlyNameASC = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FriendlyNameDESC = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IssureDateASC = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IssureDateDESC = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExpireDateASC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExpireDateDESC = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertificateFilter", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
    public enum CertificateFilter : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressBookSort", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
    public enum AddressBookSort : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ContactNameASC = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ContactNameDESC = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EmailASC = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EmailDESC = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressBookFilter", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
    public enum AddressBookFilter : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WithoutCert = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WithCert = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserAddressBookResponse", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class UserAddressBookResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ElFinder.CryptxService.Contact> ContactsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ElFinder.CryptxService.Contact> Contacts {
            get {
                return this.ContactsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactsField, value) != true)) {
                    this.ContactsField = value;
                    this.RaisePropertyChanged("Contacts");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertificateAddRequest", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
    [System.SerializableAttribute()]
    public partial class CertificateAddRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] CertificateBytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CertificateIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] CertificateBytes {
            get {
                return this.CertificateBytesField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateBytesField, value) != true)) {
                    this.CertificateBytesField = value;
                    this.RaisePropertyChanged("CertificateBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CertificateId {
            get {
                return this.CertificateIdField;
            }
            set {
                if ((this.CertificateIdField.Equals(value) != true)) {
                    this.CertificateIdField = value;
                    this.RaisePropertyChanged("CertificateId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationFile", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service")]
    [System.SerializableAttribute()]
    public partial class OperationFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> FileGroupIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileUriField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SrcFileUriField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> FileSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ElFinder.CryptxService.CryptoOperationLog> CryptoOperationLogsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ElFinder.CryptxService.CryptoOperationLog> CryptoOperationLogs1Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public System.Nullable<System.Guid> FileGroupID {
            get {
                return this.FileGroupIDField;
            }
            set {
                if ((this.FileGroupIDField.Equals(value) != true)) {
                    this.FileGroupIDField = value;
                    this.RaisePropertyChanged("FileGroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string FileUri {
            get {
                return this.FileUriField;
            }
            set {
                if ((object.ReferenceEquals(this.FileUriField, value) != true)) {
                    this.FileUriField = value;
                    this.RaisePropertyChanged("FileUri");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string SrcFileUri {
            get {
                return this.SrcFileUriField;
            }
            set {
                if ((object.ReferenceEquals(this.SrcFileUriField, value) != true)) {
                    this.SrcFileUriField = value;
                    this.RaisePropertyChanged("SrcFileUri");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public byte Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public System.Nullable<int> FileSize {
            get {
                return this.FileSizeField;
            }
            set {
                if ((this.FileSizeField.Equals(value) != true)) {
                    this.FileSizeField = value;
                    this.RaisePropertyChanged("FileSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public System.Collections.Generic.List<ElFinder.CryptxService.CryptoOperationLog> CryptoOperationLogs {
            get {
                return this.CryptoOperationLogsField;
            }
            set {
                if ((object.ReferenceEquals(this.CryptoOperationLogsField, value) != true)) {
                    this.CryptoOperationLogsField = value;
                    this.RaisePropertyChanged("CryptoOperationLogs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=7)]
        public System.Collections.Generic.List<ElFinder.CryptxService.CryptoOperationLog> CryptoOperationLogs1 {
            get {
                return this.CryptoOperationLogs1Field;
            }
            set {
                if ((object.ReferenceEquals(this.CryptoOperationLogs1Field, value) != true)) {
                    this.CryptoOperationLogs1Field = value;
                    this.RaisePropertyChanged("CryptoOperationLogs1");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CryptoOperationLog", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service")]
    [System.SerializableAttribute()]
    public partial class CryptoOperationLog : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> InFileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> OutFileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid OperationResultIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime OperationTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public System.Nullable<System.Guid> InFile {
            get {
                return this.InFileField;
            }
            set {
                if ((this.InFileField.Equals(value) != true)) {
                    this.InFileField = value;
                    this.RaisePropertyChanged("InFile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public System.Nullable<System.Guid> OutFile {
            get {
                return this.OutFileField;
            }
            set {
                if ((this.OutFileField.Equals(value) != true)) {
                    this.OutFileField = value;
                    this.RaisePropertyChanged("OutFile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public System.Guid OperationResultID {
            get {
                return this.OperationResultIDField;
            }
            set {
                if ((this.OperationResultIDField.Equals(value) != true)) {
                    this.OperationResultIDField = value;
                    this.RaisePropertyChanged("OperationResultID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public System.DateTime OperationTime {
            get {
                return this.OperationTimeField;
            }
            set {
                if ((this.OperationTimeField.Equals(value) != true)) {
                    this.OperationTimeField = value;
                    this.RaisePropertyChanged("OperationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public System.Nullable<int> Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public byte Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationType", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
    public enum OperationType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sign = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Encrypt = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Decrypt = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SignVerify = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SignEncrypt = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DecryptSignverify = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SendFiles = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsSignAttached = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RefreshStore = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GetDecryptCertificates = 10,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdminSort", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    public enum AdminSort : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LoginASC = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LoginDESC = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NameASC = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NameDESC = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignedFileInfo", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
    [System.SerializableAttribute()]
    public partial class SignedFileInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataFileUriField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DetachedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileUriField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataFileUri {
            get {
                return this.DataFileUriField;
            }
            set {
                if ((object.ReferenceEquals(this.DataFileUriField, value) != true)) {
                    this.DataFileUriField = value;
                    this.RaisePropertyChanged("DataFileUri");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Detached {
            get {
                return this.DetachedField;
            }
            set {
                if ((this.DetachedField.Equals(value) != true)) {
                    this.DetachedField = value;
                    this.RaisePropertyChanged("Detached");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileUri {
            get {
                return this.FileUriField;
            }
            set {
                if ((object.ReferenceEquals(this.FileUriField, value) != true)) {
                    this.FileUriField = value;
                    this.RaisePropertyChanged("FileUri");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomFileInfo", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
    [System.SerializableAttribute()]
    public partial class CustomFileInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ElFinder.CryptxService.CertificateInfo> CertificatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.FileType FileTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModificationTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.VisualizationType VisualizationTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ElFinder.CryptxService.CertificateInfo> Certificates {
            get {
                return this.CertificatesField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificatesField, value) != true)) {
                    this.CertificatesField = value;
                    this.RaisePropertyChanged("Certificates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.FileType FileType {
            get {
                return this.FileTypeField;
            }
            set {
                if ((this.FileTypeField.Equals(value) != true)) {
                    this.FileTypeField = value;
                    this.RaisePropertyChanged("FileType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModificationTime {
            get {
                return this.ModificationTimeField;
            }
            set {
                if ((this.ModificationTimeField.Equals(value) != true)) {
                    this.ModificationTimeField = value;
                    this.RaisePropertyChanged("ModificationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.VisualizationType VisualizationType {
            get {
                return this.VisualizationTypeField;
            }
            set {
                if ((this.VisualizationTypeField.Equals(value) != true)) {
                    this.VisualizationTypeField = value;
                    this.RaisePropertyChanged("VisualizationType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileType", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
    public enum FileType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Signed = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Encrypted = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VisualizationType", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
    public enum VisualizationType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotAssigned = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Office = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Picture = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PINSettings", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Helper")]
    [System.SerializableAttribute()]
    public partial class PINSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NeedToPINField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PINField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SavePINField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NeedToPIN {
            get {
                return this.NeedToPINField;
            }
            set {
                if ((this.NeedToPINField.Equals(value) != true)) {
                    this.NeedToPINField = value;
                    this.RaisePropertyChanged("NeedToPIN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PIN {
            get {
                return this.PINField;
            }
            set {
                if ((object.ReferenceEquals(this.PINField, value) != true)) {
                    this.PINField = value;
                    this.RaisePropertyChanged("PIN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SavePIN {
            get {
                return this.SavePINField;
            }
            set {
                if ((this.SavePINField.Equals(value) != true)) {
                    this.SavePINField = value;
                    this.RaisePropertyChanged("SavePIN");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetVisualizationResponse", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Response")]
    [System.SerializableAttribute()]
    public partial class GetVisualizationResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Base64PictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ElFinder.CryptxService.CryptxServiceError ErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid TempTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VisualizationUrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Base64Picture {
            get {
                return this.Base64PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.Base64PictureField, value) != true)) {
                    this.Base64PictureField = value;
                    this.RaisePropertyChanged("Base64Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ElFinder.CryptxService.CryptxServiceError Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TempToken {
            get {
                return this.TempTokenField;
            }
            set {
                if ((this.TempTokenField.Equals(value) != true)) {
                    this.TempTokenField = value;
                    this.RaisePropertyChanged("TempToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VisualizationUrl {
            get {
                return this.VisualizationUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.VisualizationUrlField, value) != true)) {
                    this.VisualizationUrlField = value;
                    this.RaisePropertyChanged("VisualizationUrl");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CryptxServiceError", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Error")]
    [System.SerializableAttribute()]
    public partial class CryptxServiceError : ElFinder.CryptxService.ServiceError {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceError", Namespace="http://schemas.datacontract.org/2004/07/DSS.Service.Error")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ElFinder.CryptxService.CryptxServiceError))]
    public partial class ServiceError : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Code {
            get {
                return this.CodeField;
            }
            set {
                if ((this.CodeField.Equals(value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CryptxService.ICryptxService")]
    public interface ICryptxService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetContact", ReplyAction="http://tempuri.org/ICryptxService/GetContactResponse")]
        ElFinder.CryptxService.Contact GetContact(System.Guid contactId, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetContact", ReplyAction="http://tempuri.org/ICryptxService/GetContactResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.Contact> GetContactAsync(System.Guid contactId, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/CreateContact", ReplyAction="http://tempuri.org/ICryptxService/CreateContactResponse")]
        ElFinder.CryptxService.OldServiceResponse CreateContact(ElFinder.CryptxService.Contact contact, System.Guid userID, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/CreateContact", ReplyAction="http://tempuri.org/ICryptxService/CreateContactResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.OldServiceResponse> CreateContactAsync(ElFinder.CryptxService.Contact contact, System.Guid userID, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetUserCertificates", ReplyAction="http://tempuri.org/ICryptxService/GetUserCertificatesResponse")]
        ElFinder.CryptxService.CertificatesResponse GetUserCertificates(string searchString, ElFinder.CryptxService.CertificateSort sortType, ElFinder.CryptxService.CertificateFilter filter, System.Guid userID, System.Guid token, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetUserCertificates", ReplyAction="http://tempuri.org/ICryptxService/GetUserCertificatesResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.CertificatesResponse> GetUserCertificatesAsync(string searchString, ElFinder.CryptxService.CertificateSort sortType, ElFinder.CryptxService.CertificateFilter filter, System.Guid userID, System.Guid token, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetContactCertificates", ReplyAction="http://tempuri.org/ICryptxService/GetContactCertificatesResponse")]
        System.Collections.Generic.List<ElFinder.CryptxService.ContactCertificateRelationship> GetContactCertificates(System.Guid contactId, string searchString, ElFinder.CryptxService.CertificateSort sort, ElFinder.CryptxService.CertificateFilter filter, System.Guid userID, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetContactCertificates", ReplyAction="http://tempuri.org/ICryptxService/GetContactCertificatesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ElFinder.CryptxService.ContactCertificateRelationship>> GetContactCertificatesAsync(System.Guid contactId, string searchString, ElFinder.CryptxService.CertificateSort sort, ElFinder.CryptxService.CertificateFilter filter, System.Guid userID, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/EditContact", ReplyAction="http://tempuri.org/ICryptxService/EditContactResponse")]
        ElFinder.CryptxService.OldServiceResponse EditContact(ElFinder.CryptxService.Contact contact, System.Guid userID, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/EditContact", ReplyAction="http://tempuri.org/ICryptxService/EditContactResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.OldServiceResponse> EditContactAsync(ElFinder.CryptxService.Contact contact, System.Guid userID, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DeleteContact", ReplyAction="http://tempuri.org/ICryptxService/DeleteContactResponse")]
        ElFinder.CryptxService.OldServiceResponse DeleteContact(System.Guid contactID, System.Guid userID, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DeleteContact", ReplyAction="http://tempuri.org/ICryptxService/DeleteContactResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.OldServiceResponse> DeleteContactAsync(System.Guid contactID, System.Guid userID, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DeleteCertificateFromContact", ReplyAction="http://tempuri.org/ICryptxService/DeleteCertificateFromContactResponse")]
        void DeleteCertificateFromContact(System.Guid contactId, System.Guid certificateId, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DeleteCertificateFromContact", ReplyAction="http://tempuri.org/ICryptxService/DeleteCertificateFromContactResponse")]
        System.Threading.Tasks.Task DeleteCertificateFromContactAsync(System.Guid contactId, System.Guid certificateId, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetAddressBook", ReplyAction="http://tempuri.org/ICryptxService/GetAddressBookResponse")]
        ElFinder.CryptxService.UserAddressBookResponse GetAddressBook(string searchString, ElFinder.CryptxService.AddressBookSort sortType, ElFinder.CryptxService.AddressBookFilter filter, System.Guid userID, System.Guid token, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetAddressBook", ReplyAction="http://tempuri.org/ICryptxService/GetAddressBookResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.UserAddressBookResponse> GetAddressBookAsync(string searchString, ElFinder.CryptxService.AddressBookSort sortType, ElFinder.CryptxService.AddressBookFilter filter, System.Guid userID, System.Guid token, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/AddCertificatesToContact", ReplyAction="http://tempuri.org/ICryptxService/AddCertificatesToContactResponse")]
        void AddCertificatesToContact(System.Guid contactId, System.Collections.Generic.List<ElFinder.CryptxService.CertificateAddRequest> certRequests, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/AddCertificatesToContact", ReplyAction="http://tempuri.org/ICryptxService/AddCertificatesToContactResponse")]
        System.Threading.Tasks.Task AddCertificatesToContactAsync(System.Guid contactId, System.Collections.Generic.List<ElFinder.CryptxService.CertificateAddRequest> certRequests, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/FileGroupCreate", ReplyAction="http://tempuri.org/ICryptxService/FileGroupCreateResponse")]
        System.Guid FileGroupCreate(System.Collections.Generic.List<ElFinder.CryptxService.OperationFile> data, ElFinder.CryptxService.OperationType operationType, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/FileGroupCreate", ReplyAction="http://tempuri.org/ICryptxService/FileGroupCreateResponse")]
        System.Threading.Tasks.Task<System.Guid> FileGroupCreateAsync(System.Collections.Generic.List<ElFinder.CryptxService.OperationFile> data, ElFinder.CryptxService.OperationType operationType, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetFileGroupFiles", ReplyAction="http://tempuri.org/ICryptxService/GetFileGroupFilesResponse")]
        System.Collections.Generic.List<ElFinder.CryptxService.OperationFile> GetFileGroupFiles(System.Guid fileGroupId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetFileGroupFiles", ReplyAction="http://tempuri.org/ICryptxService/GetFileGroupFilesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ElFinder.CryptxService.OperationFile>> GetFileGroupFilesAsync(System.Guid fileGroupId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/FileGroupSend", ReplyAction="http://tempuri.org/ICryptxService/FileGroupSendResponse")]
        System.Guid FileGroupSend(System.Guid fileGroupId, string templateName, string emails, string messageText, bool confirmationOfReceipt, System.Guid token, bool publicLink);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/FileGroupSend", ReplyAction="http://tempuri.org/ICryptxService/FileGroupSendResponse")]
        System.Threading.Tasks.Task<System.Guid> FileGroupSendAsync(System.Guid fileGroupId, string templateName, string emails, string messageText, bool confirmationOfReceipt, System.Guid token, bool publicLink);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/FileGroupReceive", ReplyAction="http://tempuri.org/ICryptxService/FileGroupReceiveResponse")]
        System.Guid FileGroupReceive(System.Guid fileGroupSendId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/FileGroupReceive", ReplyAction="http://tempuri.org/ICryptxService/FileGroupReceiveResponse")]
        System.Threading.Tasks.Task<System.Guid> FileGroupReceiveAsync(System.Guid fileGroupSendId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/RejectFileGroupReceive", ReplyAction="http://tempuri.org/ICryptxService/RejectFileGroupReceiveResponse")]
        ElFinder.CryptxService.OldServiceResponse RejectFileGroupReceive(System.Guid fileGroupSendId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/RejectFileGroupReceive", ReplyAction="http://tempuri.org/ICryptxService/RejectFileGroupReceiveResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.OldServiceResponse> RejectFileGroupReceiveAsync(System.Guid fileGroupSendId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetProfile", ReplyAction="http://tempuri.org/ICryptxService/GetProfileResponse")]
        ElFinder.CryptxService.ProfileResponse GetProfile(System.Guid profileId, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetProfile", ReplyAction="http://tempuri.org/ICryptxService/GetProfileResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.ProfileResponse> GetProfileAsync(System.Guid profileId, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetUserProfiles", ReplyAction="http://tempuri.org/ICryptxService/GetUserProfilesResponse")]
        ElFinder.CryptxService.UserProfilesResponse GetUserProfiles(System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetUserProfiles", ReplyAction="http://tempuri.org/ICryptxService/GetUserProfilesResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.UserProfilesResponse> GetUserProfilesAsync(System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetProfileTooltip", ReplyAction="http://tempuri.org/ICryptxService/GetProfileTooltipResponse")]
        ElFinder.CryptxService.ProfileTooltipResponse GetProfileTooltip(System.Guid profileId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetProfileTooltip", ReplyAction="http://tempuri.org/ICryptxService/GetProfileTooltipResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.ProfileTooltipResponse> GetProfileTooltipAsync(System.Guid profileId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/SaveNewProfile", ReplyAction="http://tempuri.org/ICryptxService/SaveNewProfileResponse")]
        ElFinder.CryptxService.ProfileResponse SaveNewProfile(ElFinder.CryptxService.Settings settings, System.Guid token, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/SaveNewProfile", ReplyAction="http://tempuri.org/ICryptxService/SaveNewProfileResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.ProfileResponse> SaveNewProfileAsync(ElFinder.CryptxService.Settings settings, System.Guid token, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/SetProfileAsDefault", ReplyAction="http://tempuri.org/ICryptxService/SetProfileAsDefaultResponse")]
        ElFinder.CryptxService.ProfileResponse SetProfileAsDefault(System.Guid profileId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/SetProfileAsDefault", ReplyAction="http://tempuri.org/ICryptxService/SetProfileAsDefaultResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.ProfileResponse> SetProfileAsDefaultAsync(System.Guid profileId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/SaveProfile", ReplyAction="http://tempuri.org/ICryptxService/SaveProfileResponse")]
        ElFinder.CryptxService.ProfileResponse SaveProfile(ElFinder.CryptxService.Settings settings, System.Guid token, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/SaveProfile", ReplyAction="http://tempuri.org/ICryptxService/SaveProfileResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.ProfileResponse> SaveProfileAsync(ElFinder.CryptxService.Settings settings, System.Guid token, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetBlankProfile", ReplyAction="http://tempuri.org/ICryptxService/GetBlankProfileResponse")]
        ElFinder.CryptxService.ProfileResponse GetBlankProfile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetBlankProfile", ReplyAction="http://tempuri.org/ICryptxService/GetBlankProfileResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.ProfileResponse> GetBlankProfileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetDefaultProfile", ReplyAction="http://tempuri.org/ICryptxService/GetDefaultProfileResponse")]
        ElFinder.CryptxService.ProfileResponse GetDefaultProfile(System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetDefaultProfile", ReplyAction="http://tempuri.org/ICryptxService/GetDefaultProfileResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.ProfileResponse> GetDefaultProfileAsync(System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DeleteProfile", ReplyAction="http://tempuri.org/ICryptxService/DeleteProfileResponse")]
        ElFinder.CryptxService.ProfileResponse DeleteProfile(System.Guid profileId, System.Guid token, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DeleteProfile", ReplyAction="http://tempuri.org/ICryptxService/DeleteProfileResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.ProfileResponse> DeleteProfileAsync(System.Guid profileId, System.Guid token, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/NeedToPIN", ReplyAction="http://tempuri.org/ICryptxService/NeedToPINResponse")]
        ElFinder.CryptxService.NeedToPINResponse NeedToPIN(string thumbprint, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/NeedToPIN", ReplyAction="http://tempuri.org/ICryptxService/NeedToPINResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.NeedToPINResponse> NeedToPINAsync(string thumbprint, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetGroupUsers", ReplyAction="http://tempuri.org/ICryptxService/GetGroupUsersResponse")]
        ElFinder.CryptxService.AdminInfoResponse GetGroupUsers(string searchString, ElFinder.CryptxService.AdminSort sort, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetGroupUsers", ReplyAction="http://tempuri.org/ICryptxService/GetGroupUsersResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.AdminInfoResponse> GetGroupUsersAsync(string searchString, ElFinder.CryptxService.AdminSort sort, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/AddCertificates", ReplyAction="http://tempuri.org/ICryptxService/AddCertificatesResponse")]
        ElFinder.CryptxService.OldServiceResponse AddCertificates(System.Collections.Generic.List<byte[]> certificates, bool asRecipient, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/AddCertificates", ReplyAction="http://tempuri.org/ICryptxService/AddCertificatesResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.OldServiceResponse> AddCertificatesAsync(System.Collections.Generic.List<byte[]> certificates, bool asRecipient, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/FileBinarySend", ReplyAction="http://tempuri.org/ICryptxService/FileBinarySendResponse")]
        void FileBinarySend(string uri, string emails, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/FileBinarySend", ReplyAction="http://tempuri.org/ICryptxService/FileBinarySendResponse")]
        System.Threading.Tasks.Task FileBinarySendAsync(string uri, string emails, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetMyCertificates", ReplyAction="http://tempuri.org/ICryptxService/GetMyCertificatesResponse")]
        ElFinder.CryptxService.CertificatesResponse GetMyCertificates(System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetMyCertificates", ReplyAction="http://tempuri.org/ICryptxService/GetMyCertificatesResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.CertificatesResponse> GetMyCertificatesAsync(System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetRecipientCertificates", ReplyAction="http://tempuri.org/ICryptxService/GetRecipientCertificatesResponse")]
        ElFinder.CryptxService.CertificatesResponse GetRecipientCertificates(System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetRecipientCertificates", ReplyAction="http://tempuri.org/ICryptxService/GetRecipientCertificatesResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.CertificatesResponse> GetRecipientCertificatesAsync(System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetDecryptCertificates", ReplyAction="http://tempuri.org/ICryptxService/GetDecryptCertificatesResponse")]
        ElFinder.CryptxService.CertificatesResponse GetDecryptCertificates(byte[] file, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetDecryptCertificates", ReplyAction="http://tempuri.org/ICryptxService/GetDecryptCertificatesResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.CertificatesResponse> GetDecryptCertificatesAsync(byte[] file, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVGetDecryptCertificates", ReplyAction="http://tempuri.org/ICryptxService/DAVGetDecryptCertificatesResponse")]
        ElFinder.CryptxService.CertificatesResponse DAVGetDecryptCertificates(string fileUri, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVGetDecryptCertificates", ReplyAction="http://tempuri.org/ICryptxService/DAVGetDecryptCertificatesResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.CertificatesResponse> DAVGetDecryptCertificatesAsync(string fileUri, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetCertificatesBySearchString", ReplyAction="http://tempuri.org/ICryptxService/GetCertificatesBySearchStringResponse")]
        ElFinder.CryptxService.SearchResultResponse GetCertificatesBySearchString(string searchString, bool active, bool all, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetCertificatesBySearchString", ReplyAction="http://tempuri.org/ICryptxService/GetCertificatesBySearchStringResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.SearchResultResponse> GetCertificatesBySearchStringAsync(string searchString, bool active, bool all, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/AddRecipientCertificate", ReplyAction="http://tempuri.org/ICryptxService/AddRecipientCertificateResponse")]
        ElFinder.CryptxService.AddRecipientResponse AddRecipientCertificate(byte[] file, string friendlyname, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/AddRecipientCertificate", ReplyAction="http://tempuri.org/ICryptxService/AddRecipientCertificateResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.AddRecipientResponse> AddRecipientCertificateAsync(byte[] file, string friendlyname, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/AddRecipientCertificateByThumbprint", ReplyAction="http://tempuri.org/ICryptxService/AddRecipientCertificateByThumbprintResponse")]
        ElFinder.CryptxService.AddRecipientResponse AddRecipientCertificateByThumbprint(string thumbprint, string friendlyname, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/AddRecipientCertificateByThumbprint", ReplyAction="http://tempuri.org/ICryptxService/AddRecipientCertificateByThumbprintResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.AddRecipientResponse> AddRecipientCertificateByThumbprintAsync(string thumbprint, string friendlyname, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/ChangeFriendlyName", ReplyAction="http://tempuri.org/ICryptxService/ChangeFriendlyNameResponse")]
        bool ChangeFriendlyName(string thumbprint, string friendlyname, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/ChangeFriendlyName", ReplyAction="http://tempuri.org/ICryptxService/ChangeFriendlyNameResponse")]
        System.Threading.Tasks.Task<bool> ChangeFriendlyNameAsync(string thumbprint, string friendlyname, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/ChangeMyCertificateFriendlyName", ReplyAction="http://tempuri.org/ICryptxService/ChangeMyCertificateFriendlyNameResponse")]
        bool ChangeMyCertificateFriendlyName(System.Guid user2CertificateId, string friendlyname, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/ChangeMyCertificateFriendlyName", ReplyAction="http://tempuri.org/ICryptxService/ChangeMyCertificateFriendlyNameResponse")]
        System.Threading.Tasks.Task<bool> ChangeMyCertificateFriendlyNameAsync(System.Guid user2CertificateId, string friendlyname, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/SetMyCertPIN", ReplyAction="http://tempuri.org/ICryptxService/SetMyCertPINResponse")]
        ElFinder.CryptxService.OldServiceResponse SetMyCertPIN(System.Guid user2CertificateId, string newPWD, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/SetMyCertPIN", ReplyAction="http://tempuri.org/ICryptxService/SetMyCertPINResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.OldServiceResponse> SetMyCertPINAsync(System.Guid user2CertificateId, string newPWD, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/ChangeMyCertPIN", ReplyAction="http://tempuri.org/ICryptxService/ChangeMyCertPINResponse")]
        ElFinder.CryptxService.OldServiceResponse ChangeMyCertPIN(System.Guid user2CertificateId, string oldPWD, string newPWD, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/ChangeMyCertPIN", ReplyAction="http://tempuri.org/ICryptxService/ChangeMyCertPINResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.OldServiceResponse> ChangeMyCertPINAsync(System.Guid user2CertificateId, string oldPWD, string newPWD, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DeleteMyCertPIN", ReplyAction="http://tempuri.org/ICryptxService/DeleteMyCertPINResponse")]
        ElFinder.CryptxService.OldServiceResponse DeleteMyCertPIN(System.Guid user2CertificateId, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DeleteMyCertPIN", ReplyAction="http://tempuri.org/ICryptxService/DeleteMyCertPINResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.OldServiceResponse> DeleteMyCertPINAsync(System.Guid user2CertificateId, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DeleteRecipientRelation", ReplyAction="http://tempuri.org/ICryptxService/DeleteRecipientRelationResponse")]
        bool DeleteRecipientRelation(string thumbprint, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DeleteRecipientRelation", ReplyAction="http://tempuri.org/ICryptxService/DeleteRecipientRelationResponse")]
        System.Threading.Tasks.Task<bool> DeleteRecipientRelationAsync(string thumbprint, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/SignIsAttached", ReplyAction="http://tempuri.org/ICryptxService/SignIsAttachedResponse")]
        ElFinder.CryptxService.SignAttachmentResponse SignIsAttached(ElFinder.CryptxService.SignedFileInfo file, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/SignIsAttached", ReplyAction="http://tempuri.org/ICryptxService/SignIsAttachedResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.SignAttachmentResponse> SignIsAttachedAsync(ElFinder.CryptxService.SignedFileInfo file, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetCertificate", ReplyAction="http://tempuri.org/ICryptxService/GetCertificateResponse")]
        ElFinder.CryptxService.CertificateResponse GetCertificate(string thumbprint, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetCertificate", ReplyAction="http://tempuri.org/ICryptxService/GetCertificateResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.CertificateResponse> GetCertificateAsync(string thumbprint, System.Guid userId, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetFileInfo", ReplyAction="http://tempuri.org/ICryptxService/GetFileInfoResponse")]
        ElFinder.CryptxService.CustomFileInfo GetFileInfo(string fileUri, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetFileInfo", ReplyAction="http://tempuri.org/ICryptxService/GetFileInfoResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.CustomFileInfo> GetFileInfoAsync(string fileUri, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/RefreshStore", ReplyAction="http://tempuri.org/ICryptxService/RefreshStoreResponse")]
        void RefreshStore(System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/RefreshStore", ReplyAction="http://tempuri.org/ICryptxService/RefreshStoreResponse")]
        System.Threading.Tasks.Task RefreshStoreAsync(System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/SignOperation", ReplyAction="http://tempuri.org/ICryptxService/SignOperationResponse")]
        ElFinder.CryptxService.CryptoOperationResponse SignOperation(byte[] file, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/SignOperation", ReplyAction="http://tempuri.org/ICryptxService/SignOperationResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.CryptoOperationResponse> SignOperationAsync(byte[] file, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVSignOperation", ReplyAction="http://tempuri.org/ICryptxService/DAVSignOperationResponse")]
        ElFinder.CryptxService.CryptoOperationResponse DAVSignOperation(string fileUri, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVSignOperation", ReplyAction="http://tempuri.org/ICryptxService/DAVSignOperationResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.CryptoOperationResponse> DAVSignOperationAsync(string fileUri, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVListSignOperation", ReplyAction="http://tempuri.org/ICryptxService/DAVListSignOperationResponse")]
        ElFinder.CryptxService.DAVListCryptoOperationResponse DAVListSignOperation(System.Collections.Generic.List<string> fileUri, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVListSignOperation", ReplyAction="http://tempuri.org/ICryptxService/DAVListSignOperationResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.DAVListCryptoOperationResponse> DAVListSignOperationAsync(System.Collections.Generic.List<string> fileUri, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/SignVerify", ReplyAction="http://tempuri.org/ICryptxService/SignVerifyResponse")]
        ElFinder.CryptxService.SignVerifyResponse SignVerify(byte[] file, byte[] dataFile, ElFinder.CryptxService.Settings settings, bool saveSourceFiles, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/SignVerify", ReplyAction="http://tempuri.org/ICryptxService/SignVerifyResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.SignVerifyResponse> SignVerifyAsync(byte[] file, byte[] dataFile, ElFinder.CryptxService.Settings settings, bool saveSourceFiles, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVSignVerify", ReplyAction="http://tempuri.org/ICryptxService/DAVSignVerifyResponse")]
        ElFinder.CryptxService.SignVerifyResponse DAVSignVerify(ElFinder.CryptxService.SignedFileInfo signedFileInfo, ElFinder.CryptxService.Settings settings, bool saveSourceFiles, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVSignVerify", ReplyAction="http://tempuri.org/ICryptxService/DAVSignVerifyResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.SignVerifyResponse> DAVSignVerifyAsync(ElFinder.CryptxService.SignedFileInfo signedFileInfo, ElFinder.CryptxService.Settings settings, bool saveSourceFiles, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVListSignVerify", ReplyAction="http://tempuri.org/ICryptxService/DAVListSignVerifyResponse")]
        System.Collections.Generic.List<ElFinder.CryptxService.SignVerifyResponse> DAVListSignVerify(System.Collections.Generic.List<ElFinder.CryptxService.SignedFileInfo> fileInfos, ElFinder.CryptxService.Settings settings, bool saveSourceFiles, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVListSignVerify", ReplyAction="http://tempuri.org/ICryptxService/DAVListSignVerifyResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ElFinder.CryptxService.SignVerifyResponse>> DAVListSignVerifyAsync(System.Collections.Generic.List<ElFinder.CryptxService.SignedFileInfo> fileInfos, ElFinder.CryptxService.Settings settings, bool saveSourceFiles, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/EncryptOperation", ReplyAction="http://tempuri.org/ICryptxService/EncryptOperationResponse")]
        ElFinder.CryptxService.CryptoOperationResponse EncryptOperation(byte[] file, ElFinder.CryptxService.Settings settings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/EncryptOperation", ReplyAction="http://tempuri.org/ICryptxService/EncryptOperationResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.CryptoOperationResponse> EncryptOperationAsync(byte[] file, ElFinder.CryptxService.Settings settings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVEncryptOperation", ReplyAction="http://tempuri.org/ICryptxService/DAVEncryptOperationResponse")]
        ElFinder.CryptxService.CryptoOperationResponse DAVEncryptOperation(string fileUri, ElFinder.CryptxService.Settings settings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVEncryptOperation", ReplyAction="http://tempuri.org/ICryptxService/DAVEncryptOperationResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.CryptoOperationResponse> DAVEncryptOperationAsync(string fileUri, ElFinder.CryptxService.Settings settings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVListEncryptOperation", ReplyAction="http://tempuri.org/ICryptxService/DAVListEncryptOperationResponse")]
        ElFinder.CryptxService.DAVListCryptoOperationResponse DAVListEncryptOperation(System.Collections.Generic.List<string> fileUri, ElFinder.CryptxService.Settings settings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVListEncryptOperation", ReplyAction="http://tempuri.org/ICryptxService/DAVListEncryptOperationResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.DAVListCryptoOperationResponse> DAVListEncryptOperationAsync(System.Collections.Generic.List<string> fileUri, ElFinder.CryptxService.Settings settings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DecryptOperation", ReplyAction="http://tempuri.org/ICryptxService/DecryptOperationResponse")]
        ElFinder.CryptxService.CryptoOperationResponse DecryptOperation(byte[] file, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DecryptOperation", ReplyAction="http://tempuri.org/ICryptxService/DecryptOperationResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.CryptoOperationResponse> DecryptOperationAsync(byte[] file, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVDecryptOperation", ReplyAction="http://tempuri.org/ICryptxService/DAVDecryptOperationResponse")]
        ElFinder.CryptxService.CryptoOperationResponse DAVDecryptOperation(string fileUri, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVDecryptOperation", ReplyAction="http://tempuri.org/ICryptxService/DAVDecryptOperationResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.CryptoOperationResponse> DAVDecryptOperationAsync(string fileUri, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVListDecryptOperation", ReplyAction="http://tempuri.org/ICryptxService/DAVListDecryptOperationResponse")]
        ElFinder.CryptxService.DAVListCryptoOperationResponse DAVListDecryptOperation(System.Collections.Generic.List<string> fileUri, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/DAVListDecryptOperation", ReplyAction="http://tempuri.org/ICryptxService/DAVListDecryptOperationResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.DAVListCryptoOperationResponse> DAVListDecryptOperationAsync(System.Collections.Generic.List<string> fileUri, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetVisualizationUrl", ReplyAction="http://tempuri.org/ICryptxService/GetVisualizationUrlResponse")]
        ElFinder.CryptxService.GetVisualizationResponse GetVisualizationUrl(string fileName, System.Guid token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptxService/GetVisualizationUrl", ReplyAction="http://tempuri.org/ICryptxService/GetVisualizationUrlResponse")]
        System.Threading.Tasks.Task<ElFinder.CryptxService.GetVisualizationResponse> GetVisualizationUrlAsync(string fileName, System.Guid token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICryptxServiceChannel : global::ElFinder.CryptxService.ICryptxService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CryptxServiceClient : System.ServiceModel.ClientBase<global::ElFinder.CryptxService.ICryptxService>, global::ElFinder.CryptxService.ICryptxService {
        
        public CryptxServiceClient() {
        }
        
        public CryptxServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CryptxServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CryptxServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CryptxServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ElFinder.CryptxService.Contact GetContact(System.Guid contactId, System.Guid userId, System.Guid token) {
            return base.Channel.GetContact(contactId, userId, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.Contact> GetContactAsync(System.Guid contactId, System.Guid userId, System.Guid token) {
            return base.Channel.GetContactAsync(contactId, userId, token);
        }
        
        public ElFinder.CryptxService.OldServiceResponse CreateContact(ElFinder.CryptxService.Contact contact, System.Guid userID, System.Guid token) {
            return base.Channel.CreateContact(contact, userID, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.OldServiceResponse> CreateContactAsync(ElFinder.CryptxService.Contact contact, System.Guid userID, System.Guid token) {
            return base.Channel.CreateContactAsync(contact, userID, token);
        }
        
        public ElFinder.CryptxService.CertificatesResponse GetUserCertificates(string searchString, ElFinder.CryptxService.CertificateSort sortType, ElFinder.CryptxService.CertificateFilter filter, System.Guid userID, System.Guid token, int count) {
            return base.Channel.GetUserCertificates(searchString, sortType, filter, userID, token, count);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.CertificatesResponse> GetUserCertificatesAsync(string searchString, ElFinder.CryptxService.CertificateSort sortType, ElFinder.CryptxService.CertificateFilter filter, System.Guid userID, System.Guid token, int count) {
            return base.Channel.GetUserCertificatesAsync(searchString, sortType, filter, userID, token, count);
        }
        
        public System.Collections.Generic.List<ElFinder.CryptxService.ContactCertificateRelationship> GetContactCertificates(System.Guid contactId, string searchString, ElFinder.CryptxService.CertificateSort sort, ElFinder.CryptxService.CertificateFilter filter, System.Guid userID, System.Guid token) {
            return base.Channel.GetContactCertificates(contactId, searchString, sort, filter, userID, token);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ElFinder.CryptxService.ContactCertificateRelationship>> GetContactCertificatesAsync(System.Guid contactId, string searchString, ElFinder.CryptxService.CertificateSort sort, ElFinder.CryptxService.CertificateFilter filter, System.Guid userID, System.Guid token) {
            return base.Channel.GetContactCertificatesAsync(contactId, searchString, sort, filter, userID, token);
        }
        
        public ElFinder.CryptxService.OldServiceResponse EditContact(ElFinder.CryptxService.Contact contact, System.Guid userID, System.Guid token) {
            return base.Channel.EditContact(contact, userID, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.OldServiceResponse> EditContactAsync(ElFinder.CryptxService.Contact contact, System.Guid userID, System.Guid token) {
            return base.Channel.EditContactAsync(contact, userID, token);
        }
        
        public ElFinder.CryptxService.OldServiceResponse DeleteContact(System.Guid contactID, System.Guid userID, System.Guid token) {
            return base.Channel.DeleteContact(contactID, userID, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.OldServiceResponse> DeleteContactAsync(System.Guid contactID, System.Guid userID, System.Guid token) {
            return base.Channel.DeleteContactAsync(contactID, userID, token);
        }
        
        public void DeleteCertificateFromContact(System.Guid contactId, System.Guid certificateId, System.Guid userId, System.Guid token) {
            base.Channel.DeleteCertificateFromContact(contactId, certificateId, userId, token);
        }
        
        public System.Threading.Tasks.Task DeleteCertificateFromContactAsync(System.Guid contactId, System.Guid certificateId, System.Guid userId, System.Guid token) {
            return base.Channel.DeleteCertificateFromContactAsync(contactId, certificateId, userId, token);
        }
        
        public ElFinder.CryptxService.UserAddressBookResponse GetAddressBook(string searchString, ElFinder.CryptxService.AddressBookSort sortType, ElFinder.CryptxService.AddressBookFilter filter, System.Guid userID, System.Guid token, int count) {
            return base.Channel.GetAddressBook(searchString, sortType, filter, userID, token, count);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.UserAddressBookResponse> GetAddressBookAsync(string searchString, ElFinder.CryptxService.AddressBookSort sortType, ElFinder.CryptxService.AddressBookFilter filter, System.Guid userID, System.Guid token, int count) {
            return base.Channel.GetAddressBookAsync(searchString, sortType, filter, userID, token, count);
        }
        
        public void AddCertificatesToContact(System.Guid contactId, System.Collections.Generic.List<ElFinder.CryptxService.CertificateAddRequest> certRequests, System.Guid userId, System.Guid token) {
            base.Channel.AddCertificatesToContact(contactId, certRequests, userId, token);
        }
        
        public System.Threading.Tasks.Task AddCertificatesToContactAsync(System.Guid contactId, System.Collections.Generic.List<ElFinder.CryptxService.CertificateAddRequest> certRequests, System.Guid userId, System.Guid token) {
            return base.Channel.AddCertificatesToContactAsync(contactId, certRequests, userId, token);
        }
        
        public System.Guid FileGroupCreate(System.Collections.Generic.List<ElFinder.CryptxService.OperationFile> data, ElFinder.CryptxService.OperationType operationType, System.Guid token) {
            return base.Channel.FileGroupCreate(data, operationType, token);
        }
        
        public System.Threading.Tasks.Task<System.Guid> FileGroupCreateAsync(System.Collections.Generic.List<ElFinder.CryptxService.OperationFile> data, ElFinder.CryptxService.OperationType operationType, System.Guid token) {
            return base.Channel.FileGroupCreateAsync(data, operationType, token);
        }
        
        public System.Collections.Generic.List<ElFinder.CryptxService.OperationFile> GetFileGroupFiles(System.Guid fileGroupId, System.Guid token) {
            return base.Channel.GetFileGroupFiles(fileGroupId, token);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ElFinder.CryptxService.OperationFile>> GetFileGroupFilesAsync(System.Guid fileGroupId, System.Guid token) {
            return base.Channel.GetFileGroupFilesAsync(fileGroupId, token);
        }
        
        public System.Guid FileGroupSend(System.Guid fileGroupId, string templateName, string emails, string messageText, bool confirmationOfReceipt, System.Guid token, bool publicLink) {
            return base.Channel.FileGroupSend(fileGroupId, templateName, emails, messageText, confirmationOfReceipt, token, publicLink);
        }
        
        public System.Threading.Tasks.Task<System.Guid> FileGroupSendAsync(System.Guid fileGroupId, string templateName, string emails, string messageText, bool confirmationOfReceipt, System.Guid token, bool publicLink) {
            return base.Channel.FileGroupSendAsync(fileGroupId, templateName, emails, messageText, confirmationOfReceipt, token, publicLink);
        }
        
        public System.Guid FileGroupReceive(System.Guid fileGroupSendId, System.Guid token) {
            return base.Channel.FileGroupReceive(fileGroupSendId, token);
        }
        
        public System.Threading.Tasks.Task<System.Guid> FileGroupReceiveAsync(System.Guid fileGroupSendId, System.Guid token) {
            return base.Channel.FileGroupReceiveAsync(fileGroupSendId, token);
        }
        
        public ElFinder.CryptxService.OldServiceResponse RejectFileGroupReceive(System.Guid fileGroupSendId, System.Guid token) {
            return base.Channel.RejectFileGroupReceive(fileGroupSendId, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.OldServiceResponse> RejectFileGroupReceiveAsync(System.Guid fileGroupSendId, System.Guid token) {
            return base.Channel.RejectFileGroupReceiveAsync(fileGroupSendId, token);
        }
        
        public ElFinder.CryptxService.ProfileResponse GetProfile(System.Guid profileId, System.Guid userId, System.Guid token) {
            return base.Channel.GetProfile(profileId, userId, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.ProfileResponse> GetProfileAsync(System.Guid profileId, System.Guid userId, System.Guid token) {
            return base.Channel.GetProfileAsync(profileId, userId, token);
        }
        
        public ElFinder.CryptxService.UserProfilesResponse GetUserProfiles(System.Guid userId, System.Guid token) {
            return base.Channel.GetUserProfiles(userId, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.UserProfilesResponse> GetUserProfilesAsync(System.Guid userId, System.Guid token) {
            return base.Channel.GetUserProfilesAsync(userId, token);
        }
        
        public ElFinder.CryptxService.ProfileTooltipResponse GetProfileTooltip(System.Guid profileId, System.Guid token) {
            return base.Channel.GetProfileTooltip(profileId, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.ProfileTooltipResponse> GetProfileTooltipAsync(System.Guid profileId, System.Guid token) {
            return base.Channel.GetProfileTooltipAsync(profileId, token);
        }
        
        public ElFinder.CryptxService.ProfileResponse SaveNewProfile(ElFinder.CryptxService.Settings settings, System.Guid token, System.Guid userId) {
            return base.Channel.SaveNewProfile(settings, token, userId);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.ProfileResponse> SaveNewProfileAsync(ElFinder.CryptxService.Settings settings, System.Guid token, System.Guid userId) {
            return base.Channel.SaveNewProfileAsync(settings, token, userId);
        }
        
        public ElFinder.CryptxService.ProfileResponse SetProfileAsDefault(System.Guid profileId, System.Guid token) {
            return base.Channel.SetProfileAsDefault(profileId, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.ProfileResponse> SetProfileAsDefaultAsync(System.Guid profileId, System.Guid token) {
            return base.Channel.SetProfileAsDefaultAsync(profileId, token);
        }
        
        public ElFinder.CryptxService.ProfileResponse SaveProfile(ElFinder.CryptxService.Settings settings, System.Guid token, System.Guid userId) {
            return base.Channel.SaveProfile(settings, token, userId);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.ProfileResponse> SaveProfileAsync(ElFinder.CryptxService.Settings settings, System.Guid token, System.Guid userId) {
            return base.Channel.SaveProfileAsync(settings, token, userId);
        }
        
        public ElFinder.CryptxService.ProfileResponse GetBlankProfile() {
            return base.Channel.GetBlankProfile();
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.ProfileResponse> GetBlankProfileAsync() {
            return base.Channel.GetBlankProfileAsync();
        }
        
        public ElFinder.CryptxService.ProfileResponse GetDefaultProfile(System.Guid token) {
            return base.Channel.GetDefaultProfile(token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.ProfileResponse> GetDefaultProfileAsync(System.Guid token) {
            return base.Channel.GetDefaultProfileAsync(token);
        }
        
        public ElFinder.CryptxService.ProfileResponse DeleteProfile(System.Guid profileId, System.Guid token, System.Guid userId) {
            return base.Channel.DeleteProfile(profileId, token, userId);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.ProfileResponse> DeleteProfileAsync(System.Guid profileId, System.Guid token, System.Guid userId) {
            return base.Channel.DeleteProfileAsync(profileId, token, userId);
        }
        
        public ElFinder.CryptxService.NeedToPINResponse NeedToPIN(string thumbprint, System.Guid token) {
            return base.Channel.NeedToPIN(thumbprint, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.NeedToPINResponse> NeedToPINAsync(string thumbprint, System.Guid token) {
            return base.Channel.NeedToPINAsync(thumbprint, token);
        }
        
        public ElFinder.CryptxService.AdminInfoResponse GetGroupUsers(string searchString, ElFinder.CryptxService.AdminSort sort, System.Guid token) {
            return base.Channel.GetGroupUsers(searchString, sort, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.AdminInfoResponse> GetGroupUsersAsync(string searchString, ElFinder.CryptxService.AdminSort sort, System.Guid token) {
            return base.Channel.GetGroupUsersAsync(searchString, sort, token);
        }
        
        public ElFinder.CryptxService.OldServiceResponse AddCertificates(System.Collections.Generic.List<byte[]> certificates, bool asRecipient, System.Guid userId, System.Guid token) {
            return base.Channel.AddCertificates(certificates, asRecipient, userId, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.OldServiceResponse> AddCertificatesAsync(System.Collections.Generic.List<byte[]> certificates, bool asRecipient, System.Guid userId, System.Guid token) {
            return base.Channel.AddCertificatesAsync(certificates, asRecipient, userId, token);
        }
        
        public void FileBinarySend(string uri, string emails, System.Guid token) {
            base.Channel.FileBinarySend(uri, emails, token);
        }
        
        public System.Threading.Tasks.Task FileBinarySendAsync(string uri, string emails, System.Guid token) {
            return base.Channel.FileBinarySendAsync(uri, emails, token);
        }
        
        public ElFinder.CryptxService.CertificatesResponse GetMyCertificates(System.Guid userId, System.Guid token) {
            return base.Channel.GetMyCertificates(userId, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.CertificatesResponse> GetMyCertificatesAsync(System.Guid userId, System.Guid token) {
            return base.Channel.GetMyCertificatesAsync(userId, token);
        }
        
        public ElFinder.CryptxService.CertificatesResponse GetRecipientCertificates(System.Guid token) {
            return base.Channel.GetRecipientCertificates(token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.CertificatesResponse> GetRecipientCertificatesAsync(System.Guid token) {
            return base.Channel.GetRecipientCertificatesAsync(token);
        }
        
        public ElFinder.CryptxService.CertificatesResponse GetDecryptCertificates(byte[] file, System.Guid token) {
            return base.Channel.GetDecryptCertificates(file, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.CertificatesResponse> GetDecryptCertificatesAsync(byte[] file, System.Guid token) {
            return base.Channel.GetDecryptCertificatesAsync(file, token);
        }
        
        public ElFinder.CryptxService.CertificatesResponse DAVGetDecryptCertificates(string fileUri, System.Guid token) {
            return base.Channel.DAVGetDecryptCertificates(fileUri, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.CertificatesResponse> DAVGetDecryptCertificatesAsync(string fileUri, System.Guid token) {
            return base.Channel.DAVGetDecryptCertificatesAsync(fileUri, token);
        }
        
        public ElFinder.CryptxService.SearchResultResponse GetCertificatesBySearchString(string searchString, bool active, bool all, System.Guid token) {
            return base.Channel.GetCertificatesBySearchString(searchString, active, all, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.SearchResultResponse> GetCertificatesBySearchStringAsync(string searchString, bool active, bool all, System.Guid token) {
            return base.Channel.GetCertificatesBySearchStringAsync(searchString, active, all, token);
        }
        
        public ElFinder.CryptxService.AddRecipientResponse AddRecipientCertificate(byte[] file, string friendlyname, System.Guid userId, System.Guid token) {
            return base.Channel.AddRecipientCertificate(file, friendlyname, userId, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.AddRecipientResponse> AddRecipientCertificateAsync(byte[] file, string friendlyname, System.Guid userId, System.Guid token) {
            return base.Channel.AddRecipientCertificateAsync(file, friendlyname, userId, token);
        }
        
        public ElFinder.CryptxService.AddRecipientResponse AddRecipientCertificateByThumbprint(string thumbprint, string friendlyname, System.Guid userId, System.Guid token) {
            return base.Channel.AddRecipientCertificateByThumbprint(thumbprint, friendlyname, userId, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.AddRecipientResponse> AddRecipientCertificateByThumbprintAsync(string thumbprint, string friendlyname, System.Guid userId, System.Guid token) {
            return base.Channel.AddRecipientCertificateByThumbprintAsync(thumbprint, friendlyname, userId, token);
        }
        
        public bool ChangeFriendlyName(string thumbprint, string friendlyname, System.Guid userId, System.Guid token) {
            return base.Channel.ChangeFriendlyName(thumbprint, friendlyname, userId, token);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeFriendlyNameAsync(string thumbprint, string friendlyname, System.Guid userId, System.Guid token) {
            return base.Channel.ChangeFriendlyNameAsync(thumbprint, friendlyname, userId, token);
        }
        
        public bool ChangeMyCertificateFriendlyName(System.Guid user2CertificateId, string friendlyname, System.Guid userId, System.Guid token) {
            return base.Channel.ChangeMyCertificateFriendlyName(user2CertificateId, friendlyname, userId, token);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeMyCertificateFriendlyNameAsync(System.Guid user2CertificateId, string friendlyname, System.Guid userId, System.Guid token) {
            return base.Channel.ChangeMyCertificateFriendlyNameAsync(user2CertificateId, friendlyname, userId, token);
        }
        
        public ElFinder.CryptxService.OldServiceResponse SetMyCertPIN(System.Guid user2CertificateId, string newPWD, System.Guid userId, System.Guid token) {
            return base.Channel.SetMyCertPIN(user2CertificateId, newPWD, userId, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.OldServiceResponse> SetMyCertPINAsync(System.Guid user2CertificateId, string newPWD, System.Guid userId, System.Guid token) {
            return base.Channel.SetMyCertPINAsync(user2CertificateId, newPWD, userId, token);
        }
        
        public ElFinder.CryptxService.OldServiceResponse ChangeMyCertPIN(System.Guid user2CertificateId, string oldPWD, string newPWD, System.Guid userId, System.Guid token) {
            return base.Channel.ChangeMyCertPIN(user2CertificateId, oldPWD, newPWD, userId, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.OldServiceResponse> ChangeMyCertPINAsync(System.Guid user2CertificateId, string oldPWD, string newPWD, System.Guid userId, System.Guid token) {
            return base.Channel.ChangeMyCertPINAsync(user2CertificateId, oldPWD, newPWD, userId, token);
        }
        
        public ElFinder.CryptxService.OldServiceResponse DeleteMyCertPIN(System.Guid user2CertificateId, System.Guid userId, System.Guid token) {
            return base.Channel.DeleteMyCertPIN(user2CertificateId, userId, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.OldServiceResponse> DeleteMyCertPINAsync(System.Guid user2CertificateId, System.Guid userId, System.Guid token) {
            return base.Channel.DeleteMyCertPINAsync(user2CertificateId, userId, token);
        }
        
        public bool DeleteRecipientRelation(string thumbprint, System.Guid userId, System.Guid token) {
            return base.Channel.DeleteRecipientRelation(thumbprint, userId, token);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRecipientRelationAsync(string thumbprint, System.Guid userId, System.Guid token) {
            return base.Channel.DeleteRecipientRelationAsync(thumbprint, userId, token);
        }
        
        public ElFinder.CryptxService.SignAttachmentResponse SignIsAttached(ElFinder.CryptxService.SignedFileInfo file, System.Guid token) {
            return base.Channel.SignIsAttached(file, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.SignAttachmentResponse> SignIsAttachedAsync(ElFinder.CryptxService.SignedFileInfo file, System.Guid token) {
            return base.Channel.SignIsAttachedAsync(file, token);
        }
        
        public ElFinder.CryptxService.CertificateResponse GetCertificate(string thumbprint, System.Guid userId, System.Guid token) {
            return base.Channel.GetCertificate(thumbprint, userId, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.CertificateResponse> GetCertificateAsync(string thumbprint, System.Guid userId, System.Guid token) {
            return base.Channel.GetCertificateAsync(thumbprint, userId, token);
        }
        
        public ElFinder.CryptxService.CustomFileInfo GetFileInfo(string fileUri, System.Guid token) {
            return base.Channel.GetFileInfo(fileUri, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.CustomFileInfo> GetFileInfoAsync(string fileUri, System.Guid token) {
            return base.Channel.GetFileInfoAsync(fileUri, token);
        }
        
        public void RefreshStore(System.Guid token) {
            base.Channel.RefreshStore(token);
        }
        
        public System.Threading.Tasks.Task RefreshStoreAsync(System.Guid token) {
            return base.Channel.RefreshStoreAsync(token);
        }
        
        public ElFinder.CryptxService.CryptoOperationResponse SignOperation(byte[] file, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token) {
            return base.Channel.SignOperation(file, settings, pinSettings, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.CryptoOperationResponse> SignOperationAsync(byte[] file, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token) {
            return base.Channel.SignOperationAsync(file, settings, pinSettings, token);
        }
        
        public ElFinder.CryptxService.CryptoOperationResponse DAVSignOperation(string fileUri, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token) {
            return base.Channel.DAVSignOperation(fileUri, settings, pinSettings, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.CryptoOperationResponse> DAVSignOperationAsync(string fileUri, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token) {
            return base.Channel.DAVSignOperationAsync(fileUri, settings, pinSettings, token);
        }
        
        public ElFinder.CryptxService.DAVListCryptoOperationResponse DAVListSignOperation(System.Collections.Generic.List<string> fileUri, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token) {
            return base.Channel.DAVListSignOperation(fileUri, settings, pinSettings, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.DAVListCryptoOperationResponse> DAVListSignOperationAsync(System.Collections.Generic.List<string> fileUri, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token) {
            return base.Channel.DAVListSignOperationAsync(fileUri, settings, pinSettings, token);
        }
        
        public ElFinder.CryptxService.SignVerifyResponse SignVerify(byte[] file, byte[] dataFile, ElFinder.CryptxService.Settings settings, bool saveSourceFiles, System.Guid token) {
            return base.Channel.SignVerify(file, dataFile, settings, saveSourceFiles, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.SignVerifyResponse> SignVerifyAsync(byte[] file, byte[] dataFile, ElFinder.CryptxService.Settings settings, bool saveSourceFiles, System.Guid token) {
            return base.Channel.SignVerifyAsync(file, dataFile, settings, saveSourceFiles, token);
        }
        
        public ElFinder.CryptxService.SignVerifyResponse DAVSignVerify(ElFinder.CryptxService.SignedFileInfo signedFileInfo, ElFinder.CryptxService.Settings settings, bool saveSourceFiles, System.Guid token) {
            return base.Channel.DAVSignVerify(signedFileInfo, settings, saveSourceFiles, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.SignVerifyResponse> DAVSignVerifyAsync(ElFinder.CryptxService.SignedFileInfo signedFileInfo, ElFinder.CryptxService.Settings settings, bool saveSourceFiles, System.Guid token) {
            return base.Channel.DAVSignVerifyAsync(signedFileInfo, settings, saveSourceFiles, token);
        }
        
        public System.Collections.Generic.List<ElFinder.CryptxService.SignVerifyResponse> DAVListSignVerify(System.Collections.Generic.List<ElFinder.CryptxService.SignedFileInfo> fileInfos, ElFinder.CryptxService.Settings settings, bool saveSourceFiles, System.Guid token) {
            return base.Channel.DAVListSignVerify(fileInfos, settings, saveSourceFiles, token);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ElFinder.CryptxService.SignVerifyResponse>> DAVListSignVerifyAsync(System.Collections.Generic.List<ElFinder.CryptxService.SignedFileInfo> fileInfos, ElFinder.CryptxService.Settings settings, bool saveSourceFiles, System.Guid token) {
            return base.Channel.DAVListSignVerifyAsync(fileInfos, settings, saveSourceFiles, token);
        }
        
        public ElFinder.CryptxService.CryptoOperationResponse EncryptOperation(byte[] file, ElFinder.CryptxService.Settings settings, System.Guid token) {
            return base.Channel.EncryptOperation(file, settings, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.CryptoOperationResponse> EncryptOperationAsync(byte[] file, ElFinder.CryptxService.Settings settings, System.Guid token) {
            return base.Channel.EncryptOperationAsync(file, settings, token);
        }
        
        public ElFinder.CryptxService.CryptoOperationResponse DAVEncryptOperation(string fileUri, ElFinder.CryptxService.Settings settings, System.Guid token) {
            return base.Channel.DAVEncryptOperation(fileUri, settings, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.CryptoOperationResponse> DAVEncryptOperationAsync(string fileUri, ElFinder.CryptxService.Settings settings, System.Guid token) {
            return base.Channel.DAVEncryptOperationAsync(fileUri, settings, token);
        }
        
        public ElFinder.CryptxService.DAVListCryptoOperationResponse DAVListEncryptOperation(System.Collections.Generic.List<string> fileUri, ElFinder.CryptxService.Settings settings, System.Guid token) {
            return base.Channel.DAVListEncryptOperation(fileUri, settings, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.DAVListCryptoOperationResponse> DAVListEncryptOperationAsync(System.Collections.Generic.List<string> fileUri, ElFinder.CryptxService.Settings settings, System.Guid token) {
            return base.Channel.DAVListEncryptOperationAsync(fileUri, settings, token);
        }
        
        public ElFinder.CryptxService.CryptoOperationResponse DecryptOperation(byte[] file, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token) {
            return base.Channel.DecryptOperation(file, settings, pinSettings, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.CryptoOperationResponse> DecryptOperationAsync(byte[] file, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token) {
            return base.Channel.DecryptOperationAsync(file, settings, pinSettings, token);
        }
        
        public ElFinder.CryptxService.CryptoOperationResponse DAVDecryptOperation(string fileUri, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token) {
            return base.Channel.DAVDecryptOperation(fileUri, settings, pinSettings, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.CryptoOperationResponse> DAVDecryptOperationAsync(string fileUri, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token) {
            return base.Channel.DAVDecryptOperationAsync(fileUri, settings, pinSettings, token);
        }
        
        public ElFinder.CryptxService.DAVListCryptoOperationResponse DAVListDecryptOperation(System.Collections.Generic.List<string> fileUri, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token) {
            return base.Channel.DAVListDecryptOperation(fileUri, settings, pinSettings, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.DAVListCryptoOperationResponse> DAVListDecryptOperationAsync(System.Collections.Generic.List<string> fileUri, ElFinder.CryptxService.Settings settings, ElFinder.CryptxService.PINSettings pinSettings, System.Guid token) {
            return base.Channel.DAVListDecryptOperationAsync(fileUri, settings, pinSettings, token);
        }
        
        public ElFinder.CryptxService.GetVisualizationResponse GetVisualizationUrl(string fileName, System.Guid token) {
            return base.Channel.GetVisualizationUrl(fileName, token);
        }
        
        public System.Threading.Tasks.Task<ElFinder.CryptxService.GetVisualizationResponse> GetVisualizationUrlAsync(string fileName, System.Guid token) {
            return base.Channel.GetVisualizationUrlAsync(fileName, token);
        }
    }
}
