/*! jQuery v1.7.1 jquery.com | jquery.org/license */
(function(a,b){function cy(a){return f.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cv(a){if(!ck[a]){var b=c.body,d=f("<"+a+">").appendTo(b),e=d.css("display");d.remove();if(e==="none"||e===""){cl||(cl=c.createElement("iframe"),cl.frameBorder=cl.width=cl.height=0),b.appendChild(cl);if(!cm||!cl.createElement)cm=(cl.contentWindow||cl.contentDocument).document,cm.write((c.compatMode==="CSS1Compat"?"<!doctype html>":"")+"<html><body>"),cm.close();d=cm.createElement(a),cm.body.appendChild(d),e=f.css(d,"display"),b.removeChild(cl)}ck[a]=e}return ck[a]}function cu(a,b){var c={};f.each(cq.concat.apply([],cq.slice(0,b)),function(){c[this]=a});return c}function ct(){cr=b}function cs(){setTimeout(ct,0);return cr=f.now()}function cj(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function ci(){try{return new a.XMLHttpRequest}catch(b){}}function cc(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var d=a.dataTypes,e={},g,h,i=d.length,j,k=d[0],l,m,n,o,p;for(g=1;g<i;g++){if(g===1)for(h in a.converters)typeof h=="string"&&(e[h.toLowerCase()]=a.converters[h]);l=k,k=d[g];if(k==="*")k=l;else if(l!=="*"&&l!==k){m=l+" "+k,n=e[m]||e["* "+k];if(!n){p=b;for(o in e){j=o.split(" ");if(j[0]===l||j[0]==="*"){p=e[j[1]+" "+k];if(p){o=e[o],o===!0?n=p:p===!0&&(n=o);break}}}}!n&&!p&&f.error("No conversion from "+m.replace(" "," to ")),n!==!0&&(c=n?n(c):p(o(c)))}}return c}function cb(a,c,d){var e=a.contents,f=a.dataTypes,g=a.responseFields,h,i,j,k;for(i in g)i in d&&(c[g[i]]=d[i]);while(f[0]==="*")f.shift(),h===b&&(h=a.mimeType||c.getResponseHeader("content-type"));if(h)for(i in e)if(e[i]&&e[i].test(h)){f.unshift(i);break}if(f[0]in d)j=f[0];else{for(i in d){if(!f[0]||a.converters[i+" "+f[0]]){j=i;break}k||(k=i)}j=j||k}if(j){j!==f[0]&&f.unshift(j);return d[j]}}function ca(a,b,c,d){if(f.isArray(b))f.each(b,function(b,e){c||bE.test(a)?d(a,e):ca(a+"["+(typeof e=="object"||f.isArray(e)?b:"")+"]",e,c,d)});else if(!c&&b!=null&&typeof b=="object")for(var e in b)ca(a+"["+e+"]",b[e],c,d);else d(a,b)}function b_(a,c){var d,e,g=f.ajaxSettings.flatOptions||{};for(d in c)c[d]!==b&&((g[d]?a:e||(e={}))[d]=c[d]);e&&f.extend(!0,a,e)}function b$(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h=a[f],i=0,j=h?h.length:0,k=a===bT,l;for(;i<j&&(k||!l);i++)l=h[i](c,d,e),typeof l=="string"&&(!k||g[l]?l=b:(c.dataTypes.unshift(l),l=b$(a,c,d,e,l,g)));(k||!l)&&!g["*"]&&(l=b$(a,c,d,e,"*",g));return l}function bZ(a){return function(b,c){typeof b!="string"&&(c=b,b="*");if(f.isFunction(c)){var d=b.toLowerCase().split(bP),e=0,g=d.length,h,i,j;for(;e<g;e++)h=d[e],j=/^\+/.test(h),j&&(h=h.substr(1)||"*"),i=a[h]=a[h]||[],i[j?"unshift":"push"](c)}}}function bC(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=b==="width"?bx:by,g=0,h=e.length;if(d>0){if(c!=="border")for(;g<h;g++)c||(d-=parseFloat(f.css(a,"padding"+e[g]))||0),c==="margin"?d+=parseFloat(f.css(a,c+e[g]))||0:d-=parseFloat(f.css(a,"border"+e[g]+"Width"))||0;return d+"px"}d=bz(a,b,b);if(d<0||d==null)d=a.style[b]||0;d=parseFloat(d)||0;if(c)for(;g<h;g++)d+=parseFloat(f.css(a,"padding"+e[g]))||0,c!=="padding"&&(d+=parseFloat(f.css(a,"border"+e[g]+"Width"))||0),c==="margin"&&(d+=parseFloat(f.css(a,c+e[g]))||0);return d+"px"}function bp(a,b){b.src?f.ajax({url:b.src,async:!1,dataType:"script"}):f.globalEval((b.text||b.textContent||b.innerHTML||"").replace(bf,"/*$0*/")),b.parentNode&&b.parentNode.removeChild(b)}function bo(a){var b=c.createElement("div");bh.appendChild(b),b.innerHTML=a.outerHTML;return b.firstChild}function bn(a){var b=(a.nodeName||"").toLowerCase();b==="input"?bm(a):b!=="script"&&typeof a.getElementsByTagName!="undefined"&&f.grep(a.getElementsByTagName("input"),bm)}function bm(a){if(a.type==="checkbox"||a.type==="radio")a.defaultChecked=a.checked}function bl(a){return typeof a.getElementsByTagName!="undefined"?a.getElementsByTagName("*"):typeof a.querySelectorAll!="undefined"?a.querySelectorAll("*"):[]}function bk(a,b){var c;if(b.nodeType===1){b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase();if(c==="object")b.outerHTML=a.outerHTML;else if(c!=="input"||a.type!=="checkbox"&&a.type!=="radio"){if(c==="option")b.selected=a.defaultSelected;else if(c==="input"||c==="textarea")b.defaultValue=a.defaultValue}else a.checked&&(b.defaultChecked=b.checked=a.checked),b.value!==a.value&&(b.value=a.value);b.removeAttribute(f.expando)}}function bj(a,b){if(b.nodeType===1&&!!f.hasData(a)){var c,d,e,g=f._data(a),h=f._data(b,g),i=g.events;if(i){delete h.handle,h.events={};for(c in i)for(d=0,e=i[c].length;d<e;d++)f.event.add(b,c+(i[c][d].namespace?".":"")+i[c][d].namespace,i[c][d],i[c][d].data)}h.data&&(h.data=f.extend({},h.data))}}function bi(a,b){return f.nodeName(a,"table")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function U(a){var b=V.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}function T(a,b,c){b=b||0;if(f.isFunction(b))return f.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return f.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=f.grep(a,function(a){return a.nodeType===1});if(O.test(b))return f.filter(b,d,!c);b=f.filter(b,d)}return f.grep(a,function(a,d){return f.inArray(a,b)>=0===c})}function S(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function K(){return!0}function J(){return!1}function n(a,b,c){var d=b+"defer",e=b+"queue",g=b+"mark",h=f._data(a,d);h&&(c==="queue"||!f._data(a,e))&&(c==="mark"||!f._data(a,g))&&setTimeout(function(){!f._data(a,e)&&!f._data(a,g)&&(f.removeData(a,d,!0),h.fire())},0)}function m(a){for(var b in a){if(b==="data"&&f.isEmptyObject(a[b]))continue;if(b!=="toJSON")return!1}return!0}function l(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(k,"-$1").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:f.isNumeric(d)?parseFloat(d):j.test(d)?f.parseJSON(d):d}catch(g){}f.data(a,c,d)}else d=b}return d}function h(a){var b=g[a]={},c,d;a=a.split(/\s+/);for(c=0,d=a.length;c<d;c++)b[a[c]]=!0;return b}var c=a.document,d=a.navigator,e=a.location,f=function(){function J(){if(!e.isReady){try{c.documentElement.doScroll("left")}catch(a){setTimeout(J,1);return}e.ready()}}var e=function(a,b){return new e.fn.init(a,b,h)},f=a.jQuery,g=a.$,h,i=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,j=/\S/,k=/^\s+/,l=/\s+$/,m=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,n=/^[\],:{}\s]*$/,o=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,p=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,q=/(?:^|:|,)(?:\s*\[)+/g,r=/(webkit)[ \/]([\w.]+)/,s=/(opera)(?:.*version)?[ \/]([\w.]+)/,t=/(msie) ([\w.]+)/,u=/(mozilla)(?:.*? rv:([\w.]+))?/,v=/-([a-z]|[0-9])/ig,w=/^-ms-/,x=function(a,b){return(b+"").toUpperCase()},y=d.userAgent,z,A,B,C=Object.prototype.toString,D=Object.prototype.hasOwnProperty,E=Array.prototype.push,F=Array.prototype.slice,G=String.prototype.trim,H=Array.prototype.indexOf,I={};e.fn=e.prototype={constructor:e,init:function(a,d,f){var g,h,j,k;if(!a)return this;if(a.nodeType){this.context=this[0]=a,this.length=1;return this}if(a==="body"&&!d&&c.body){this.context=c,this[0]=c.body,this.selector=a,this.length=1;return this}if(typeof a=="string"){a.charAt(0)!=="<"||a.charAt(a.length-1)!==">"||a.length<3?g=i.exec(a):g=[null,a,null];if(g&&(g[1]||!d)){if(g[1]){d=d instanceof e?d[0]:d,k=d?d.ownerDocument||d:c,j=m.exec(a),j?e.isPlainObject(d)?(a=[c.createElement(j[1])],e.fn.attr.call(a,d,!0)):a=[k.createElement(j[1])]:(j=e.buildFragment([g[1]],[k]),a=(j.cacheable?e.clone(j.fragment):j.fragment).childNodes);return e.merge(this,a)}h=c.getElementById(g[2]);if(h&&h.parentNode){if(h.id!==g[2])return f.find(a);this.length=1,this[0]=h}this.context=c,this.selector=a;return this}return!d||d.jquery?(d||f).find(a):this.constructor(d).find(a)}if(e.isFunction(a))return f.ready(a);a.selector!==b&&(this.selector=a.selector,this.context=a.context);return e.makeArray(a,this)},selector:"",jquery:"1.7.1",length:0,size:function(){return this.length},toArray:function(){return F.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=this.constructor();e.isArray(a)?E.apply(d,a):e.merge(d,a),d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")");return d},each:function(a,b){return e.each(this,a,b)},ready:function(a){e.bindReady(),A.add(a);return this},eq:function(a){a=+a;return a===-1?this.slice(a):this.slice(a,a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(F.apply(this,arguments),"slice",F.call(arguments).join(","))},map:function(a){return this.pushStack(e.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:E,sort:[].sort,splice:[].splice},e.fn.init.prototype=e.fn,e.extend=e.fn.extend=function(){var a,c,d,f,g,h,i=arguments[0]||{},j=1,k=arguments.length,l=!1;typeof i=="boolean"&&(l=i,i=arguments[1]||{},j=2),typeof i!="object"&&!e.isFunction(i)&&(i={}),k===j&&(i=this,--j);for(;j<k;j++)if((a=arguments[j])!=null)for(c in a){d=i[c],f=a[c];if(i===f)continue;l&&f&&(e.isPlainObject(f)||(g=e.isArray(f)))?(g?(g=!1,h=d&&e.isArray(d)?d:[]):h=d&&e.isPlainObject(d)?d:{},i[c]=e.extend(l,h,f)):f!==b&&(i[c]=f)}return i},e.extend({noConflict:function(b){a.$===e&&(a.$=g),b&&a.jQuery===e&&(a.jQuery=f);return e},isReady:!1,readyWait:1,holdReady:function(a){a?e.readyWait++:e.ready(!0)},ready:function(a){if(a===!0&&!--e.readyWait||a!==!0&&!e.isReady){if(!c.body)return setTimeout(e.ready,1);e.isReady=!0;if(a!==!0&&--e.readyWait>0)return;A.fireWith(c,[e]),e.fn.trigger&&e(c).trigger("ready").off("ready")}},bindReady:function(){if(!A){A=e.Callbacks("once memory");if(c.readyState==="complete")return setTimeout(e.ready,1);if(c.addEventListener)c.addEventListener("DOMContentLoaded",B,!1),a.addEventListener("load",e.ready,!1);else if(c.attachEvent){c.attachEvent("onreadystatechange",B),a.attachEvent("onload",e.ready);var b=!1;try{b=a.frameElement==null}catch(d){}c.documentElement.doScroll&&b&&J()}}},isFunction:function(a){return e.type(a)==="function"},isArray:Array.isArray||function(a){return e.type(a)==="array"},isWindow:function(a){return a&&typeof a=="object"&&"setInterval"in a},isNumeric:function(a){return!isNaN(parseFloat(a))&&isFinite(a)},type:function(a){return a==null?String(a):I[C.call(a)]||"object"},isPlainObject:function(a){if(!a||e.type(a)!=="object"||a.nodeType||e.isWindow(a))return!1;try{if(a.constructor&&!D.call(a,"constructor")&&!D.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}var d;for(d in a);return d===b||D.call(a,d)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw new Error(a)},parseJSON:function(b){if(typeof b!="string"||!b)return null;b=e.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(n.test(b.replace(o,"@").replace(p,"]").replace(q,"")))return(new Function("return "+b))();e.error("Invalid JSON: "+b)},parseXML:function(c){var d,f;try{a.DOMParser?(f=new DOMParser,d=f.parseFromString(c,"text/xml")):(d=new ActiveXObject("Microsoft.XMLDOM"),d.async="false",d.loadXML(c))}catch(g){d=b}(!d||!d.documentElement||d.getElementsByTagName("parsererror").length)&&e.error("Invalid XML: "+c);return d},noop:function(){},globalEval:function(b){b&&j.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(w,"ms-").replace(v,x)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,d){var f,g=0,h=a.length,i=h===b||e.isFunction(a);if(d){if(i){for(f in a)if(c.apply(a[f],d)===!1)break}else for(;g<h;)if(c.apply(a[g++],d)===!1)break}else if(i){for(f in a)if(c.call(a[f],f,a[f])===!1)break}else for(;g<h;)if(c.call(a[g],g,a[g++])===!1)break;return a},trim:G?function(a){return a==null?"":G.call(a)}:function(a){return a==null?"":(a+"").replace(k,"").replace(l,"")},makeArray:function(a,b){var c=b||[];if(a!=null){var d=e.type(a);a.length==null||d==="string"||d==="function"||d==="regexp"||e.isWindow(a)?E.call(c,a):e.merge(c,a)}return c},inArray:function(a,b,c){var d;if(b){if(H)return H.call(b,a,c);d=b.length,c=c?c<0?Math.max(0,d+c):c:0;for(;c<d;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,c){var d=a.length,e=0;if(typeof c.length=="number")for(var f=c.length;e<f;e++)a[d++]=c[e];else while(c[e]!==b)a[d++]=c[e++];a.length=d;return a},grep:function(a,b,c){var d=[],e;c=!!c;for(var f=0,g=a.length;f<g;f++)e=!!b(a[f],f),c!==e&&d.push(a[f]);return d},map:function(a,c,d){var f,g,h=[],i=0,j=a.length,k=a instanceof e||j!==b&&typeof j=="number"&&(j>0&&a[0]&&a[j-1]||j===0||e.isArray(a));if(k)for(;i<j;i++)f=c(a[i],i,d),f!=null&&(h[h.length]=f);else for(g in a)f=c(a[g],g,d),f!=null&&(h[h.length]=f);return h.concat.apply([],h)},guid:1,proxy:function(a,c){if(typeof c=="string"){var d=a[c];c=a,a=d}if(!e.isFunction(a))return b;var f=F.call(arguments,2),g=function(){return a.apply(c,f.concat(F.call(arguments)))};g.guid=a.guid=a.guid||g.guid||e.guid++;return g},access:function(a,c,d,f,g,h){var i=a.length;if(typeof c=="object"){for(var j in c)e.access(a,j,c[j],f,g,d);return a}if(d!==b){f=!h&&f&&e.isFunction(d);for(var k=0;k<i;k++)g(a[k],c,f?d.call(a[k],k,g(a[k],c)):d,h);return a}return i?g(a[0],c):b},now:function(){return(new Date).getTime()},uaMatch:function(a){a=a.toLowerCase();var b=r.exec(a)||s.exec(a)||t.exec(a)||a.indexOf("compatible")<0&&u.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function a(b,c){return new a.fn.init(b,c)}e.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function(d,f){f&&f instanceof e&&!(f instanceof a)&&(f=a(f));return e.fn.init.call(this,d,f,b)},a.fn.init.prototype=a.fn;var b=a(c);return a},browser:{}}),e.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){I["[object "+b+"]"]=b.toLowerCase()}),z=e.uaMatch(y),z.browser&&(e.browser[z.browser]=!0,e.browser.version=z.version),e.browser.webkit&&(e.browser.safari=!0),j.test(" ")&&(k=/^[\s\xA0]+/,l=/[\s\xA0]+$/),h=e(c),c.addEventListener?B=function(){c.removeEventListener("DOMContentLoaded",B,!1),e.ready()}:c.attachEvent&&(B=function(){c.readyState==="complete"&&(c.detachEvent("onreadystatechange",B),e.ready())});return e}(),g={};f.Callbacks=function(a){a=a?g[a]||h(a):{};var c=[],d=[],e,i,j,k,l,m=function(b){var d,e,g,h,i;for(d=0,e=b.length;d<e;d++)g=b[d],h=f.type(g),h==="array"?m(g):h==="function"&&(!a.unique||!o.has(g))&&c.push(g)},n=function(b,f){f=f||[],e=!a.memory||[b,f],i=!0,l=j||0,j=0,k=c.length;for(;c&&l<k;l++)if(c[l].apply(b,f)===!1&&a.stopOnFalse){e=!0;break}i=!1,c&&(a.once?e===!0?o.disable():c=[]:d&&d.length&&(e=d.shift(),o.fireWith(e[0],e[1])))},o={add:function(){if(c){var a=c.length;m(arguments),i?k=c.length:e&&e!==!0&&(j=a,n(e[0],e[1]))}return this},remove:function(){if(c){var b=arguments,d=0,e=b.length;for(;d<e;d++)for(var f=0;f<c.length;f++)if(b[d]===c[f]){i&&f<=k&&(k--,f<=l&&l--),c.splice(f--,1);if(a.unique)break}}return this},has:function(a){if(c){var b=0,d=c.length;for(;b<d;b++)if(a===c[b])return!0}return!1},empty:function(){c=[];return this},disable:function(){c=d=e=b;return this},disabled:function(){return!c},lock:function(){d=b,(!e||e===!0)&&o.disable();return this},locked:function(){return!d},fireWith:function(b,c){d&&(i?a.once||d.push([b,c]):(!a.once||!e)&&n(b,c));return this},fire:function(){o.fireWith(this,arguments);return this},fired:function(){return!!e}};return o};var i=[].slice;f.extend({Deferred:function(a){var b=f.Callbacks("once memory"),c=f.Callbacks("once memory"),d=f.Callbacks("memory"),e="pending",g={resolve:b,reject:c,notify:d},h={done:b.add,fail:c.add,progress:d.add,state:function(){return e},isResolved:b.fired,isRejected:c.fired,then:function(a,b,c){i.done(a).fail(b).progress(c);return this},always:function(){i.done.apply(i,arguments).fail.apply(i,arguments);return this},pipe:function(a,b,c){return f.Deferred(function(d){f.each({done:[a,"resolve"],fail:[b,"reject"],progress:[c,"notify"]},function(a,b){var c=b[0],e=b[1],g;f.isFunction(c)?i[a](function(){g=c.apply(this,arguments),g&&f.isFunction(g.promise)?g.promise().then(d.resolve,d.reject,d.notify):d[e+"With"](this===i?d:this,[g])}):i[a](d[e])})}).promise()},promise:function(a){if(a==null)a=h;else for(var b in h)a[b]=h[b];return a}},i=h.promise({}),j;for(j in g)i[j]=g[j].fire,i[j+"With"]=g[j].fireWith;i.done(function(){e="resolved"},c.disable,d.lock).fail(function(){e="rejected"},b.disable,d.lock),a&&a.call(i,i);return i},when:function(a){function m(a){return function(b){e[a]=arguments.length>1?i.call(arguments,0):b,j.notifyWith(k,e)}}function l(a){return function(c){b[a]=arguments.length>1?i.call(arguments,0):c,--g||j.resolveWith(j,b)}}var b=i.call(arguments,0),c=0,d=b.length,e=Array(d),g=d,h=d,j=d<=1&&a&&f.isFunction(a.promise)?a:f.Deferred(),k=j.promise();if(d>1){for(;c<d;c++)b[c]&&b[c].promise&&f.isFunction(b[c].promise)?b[c].promise().then(l(c),j.reject,m(c)):--g;g||j.resolveWith(j,b)}else j!==a&&j.resolveWith(j,d?[a]:[]);return k}}),f.support=function(){var b,d,e,g,h,i,j,k,l,m,n,o,p,q=c.createElement("div"),r=c.documentElement;q.setAttribute("className","t"),q.innerHTML="   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>",d=q.getElementsByTagName("*"),e=q.getElementsByTagName("a")[0];if(!d||!d.length||!e)return{};g=c.createElement("select"),h=g.appendChild(c.createElement("option")),i=q.getElementsByTagName("input")[0],b={leadingWhitespace:q.firstChild.nodeType===3,tbody:!q.getElementsByTagName("tbody").length,htmlSerialize:!!q.getElementsByTagName("link").length,style:/top/.test(e.getAttribute("style")),hrefNormalized:e.getAttribute("href")==="/a",opacity:/^0.55/.test(e.style.opacity),cssFloat:!!e.style.cssFloat,checkOn:i.value==="on",optSelected:h.selected,getSetAttribute:q.className!=="t",enctype:!!c.createElement("form").enctype,html5Clone:c.createElement("nav").cloneNode(!0).outerHTML!=="<:nav></:nav>",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0},i.checked=!0,b.noCloneChecked=i.cloneNode(!0).checked,g.disabled=!0,b.optDisabled=!h.disabled;try{delete q.test}catch(s){b.deleteExpando=!1}!q.addEventListener&&q.attachEvent&&q.fireEvent&&(q.attachEvent("onclick",function(){b.noCloneEvent=!1}),q.cloneNode(!0).fireEvent("onclick")),i=c.createElement("input"),i.value="t",i.setAttribute("type","radio"),b.radioValue=i.value==="t",i.setAttribute("checked","checked"),q.appendChild(i),k=c.createDocumentFragment(),k.appendChild(q.lastChild),b.checkClone=k.cloneNode(!0).cloneNode(!0).lastChild.checked,b.appendChecked=i.checked,k.removeChild(i),k.appendChild(q),q.innerHTML="",a.getComputedStyle&&(j=c.createElement("div"),j.style.width="0",j.style.marginRight="0",q.style.width="2px",q.appendChild(j),b.reliableMarginRight=(parseInt((a.getComputedStyle(j,null)||{marginRight:0}).marginRight,10)||0)===0);if(q.attachEvent)for(o in{submit:1,change:1,focusin:1})n="on"+o,p=n in q,p||(q.setAttribute(n,"return;"),p=typeof q[n]=="function"),b[o+"Bubbles"]=p;k.removeChild(q),k=g=h=j=q=i=null,f(function(){var a,d,e,g,h,i,j,k,m,n,o,r=c.getElementsByTagName("body")[0];!r||(j=1,k="position:absolute;top:0;left:0;width:1px;height:1px;margin:0;",m="visibility:hidden;border:0;",n="style='"+k+"border:5px solid #000;padding:0;'",o="<div "+n+"><div></div></div>"+"<table "+n+" cellpadding='0' cellspacing='0'>"+"<tr><td></td></tr></table>",a=c.createElement("div"),a.style.cssText=m+"width:0;height:0;position:static;top:0;margin-top:"+j+"px",r.insertBefore(a,r.firstChild),q=c.createElement("div"),a.appendChild(q),q.innerHTML="<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>",l=q.getElementsByTagName("td"),p=l[0].offsetHeight===0,l[0].style.display="",l[1].style.display="none",b.reliableHiddenOffsets=p&&l[0].offsetHeight===0,q.innerHTML="",q.style.width=q.style.paddingLeft="1px",f.boxModel=b.boxModel=q.offsetWidth===2,typeof q.style.zoom!="undefined"&&(q.style.display="inline",q.style.zoom=1,b.inlineBlockNeedsLayout=q.offsetWidth===2,q.style.display="",q.innerHTML="<div style='width:4px;'></div>",b.shrinkWrapBlocks=q.offsetWidth!==2),q.style.cssText=k+m,q.innerHTML=o,d=q.firstChild,e=d.firstChild,h=d.nextSibling.firstChild.firstChild,i={doesNotAddBorder:e.offsetTop!==5,doesAddBorderForTableAndCells:h.offsetTop===5},e.style.position="fixed",e.style.top="20px",i.fixedPosition=e.offsetTop===20||e.offsetTop===15,e.style.position=e.style.top="",d.style.overflow="hidden",d.style.position="relative",i.subtractsBorderForOverflowNotVisible=e.offsetTop===-5,i.doesNotIncludeMarginInBodyOffset=r.offsetTop!==j,r.removeChild(a),q=a=null,f.extend(b,i))});return b}();var j=/^(?:\{.*\}|\[.*\])$/,k=/([A-Z])/g;f.extend({cache:{},uuid:0,expando:"jQuery"+(f.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){a=a.nodeType?f.cache[a[f.expando]]:a[f.expando];return!!a&&!m(a)},data:function(a,c,d,e){if(!!f.acceptData(a)){var g,h,i,j=f.expando,k=typeof c=="string",l=a.nodeType,m=l?f.cache:a,n=l?a[j]:a[j]&&j,o=c==="events";if((!n||!m[n]||!o&&!e&&!m[n].data)&&k&&d===b)return;n||(l?a[j]=n=++f.uuid:n=j),m[n]||(m[n]={},l||(m[n].toJSON=f.noop));if(typeof c=="object"||typeof c=="function")e?m[n]=f.extend(m[n],c):m[n].data=f.extend(m[n].data,c);g=h=m[n],e||(h.data||(h.data={}),h=h.data),d!==b&&(h[f.camelCase(c)]=d);if(o&&!h[c])return g.events;k?(i=h[c],i==null&&(i=h[f.camelCase(c)])):i=h;return i}},removeData:function(a,b,c){if(!!f.acceptData(a)){var d,e,g,h=f.expando,i=a.nodeType,j=i?f.cache:a,k=i?a[h]:h;if(!j[k])return;if(b){d=c?j[k]:j[k].data;if(d){f.isArray(b)||(b in d?b=[b]:(b=f.camelCase(b),b in d?b=[b]:b=b.split(" ")));for(e=0,g=b.length;e<g;e++)delete d[b[e]];if(!(c?m:f.isEmptyObject)(d))return}}if(!c){delete j[k].data;if(!m(j[k]))return}f.support.deleteExpando||!j.setInterval?delete j[k]:j[k]=null,i&&(f.support.deleteExpando?delete a[h]:a.removeAttribute?a.removeAttribute(h):a[h]=null)}},_data:function(a,b,c){return f.data(a,b,c,!0)},acceptData:function(a){if(a.nodeName){var b=f.noData[a.nodeName.toLowerCase()];if(b)return b!==!0&&a.getAttribute("classid")===b}return!0}}),f.fn.extend({data:function(a,c){var d,e,g,h=null;if(typeof a=="undefined"){if(this.length){h=f.data(this[0]);if(this[0].nodeType===1&&!f._data(this[0],"parsedAttrs")){e=this[0].attributes;for(var i=0,j=e.length;i<j;i++)g=e[i].name,g.indexOf("data-")===0&&(g=f.camelCase(g.substring(5)),l(this[0],g,h[g]));f._data(this[0],"parsedAttrs",!0)}}return h}if(typeof a=="object")return this.each(function(){f.data(this,a)});d=a.split("."),d[1]=d[1]?"."+d[1]:"";if(c===b){h=this.triggerHandler("getData"+d[1]+"!",[d[0]]),h===b&&this.length&&(h=f.data(this[0],a),h=l(this[0],a,h));return h===b&&d[1]?this.data(d[0]):h}return this.each(function(){var b=f(this),e=[d[0],c];b.triggerHandler("setData"+d[1]+"!",e),f.data(this,a,c),b.triggerHandler("changeData"+d[1]+"!",e)})},removeData:function(a){return this.each(function(){f.removeData(this,a)})}}),f.extend({_mark:function(a,b){a&&(b=(b||"fx")+"mark",f._data(a,b,(f._data(a,b)||0)+1))},_unmark:function(a,b,c){a!==!0&&(c=b,b=a,a=!1);if(b){c=c||"fx";var d=c+"mark",e=a?0:(f._data(b,d)||1)-1;e?f._data(b,d,e):(f.removeData(b,d,!0),n(b,c,"mark"))}},queue:function(a,b,c){var d;if(a){b=(b||"fx")+"queue",d=f._data(a,b),c&&(!d||f.isArray(c)?d=f._data(a,b,f.makeArray(c)):d.push(c));return d||[]}},dequeue:function(a,b){b=b||"fx";var c=f.queue(a,b),d=c.shift(),e={};d==="inprogress"&&(d=c.shift()),d&&(b==="fx"&&c.unshift("inprogress"),f._data(a,b+".run",e),d.call(a,function(){f.dequeue(a,b)},e)),c.length||(f.removeData(a,b+"queue "+b+".run",!0),n(a,b,"queue"))}}),f.fn.extend({queue:function(a,c){typeof a!="string"&&(c=a,a="fx");if(c===b)return f.queue(this[0],a);return this.each(function(){var b=f.queue(this,a,c);a==="fx"&&b[0]!=="inprogress"&&f.dequeue(this,a)})},dequeue:function(a){return this.each(function(){f.dequeue(this,a)})},delay:function(a,b){a=f.fx?f.fx.speeds[a]||a:a,b=b||"fx";return this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){function m(){--h||d.resolveWith(e,[e])}typeof a!="string"&&(c=a,a=b),a=a||"fx";var d=f.Deferred(),e=this,g=e.length,h=1,i=a+"defer",j=a+"queue",k=a+"mark",l;while(g--)if(l=f.data(e[g],i,b,!0)||(f.data(e[g],j,b,!0)||f.data(e[g],k,b,!0))&&f.data(e[g],i,f.Callbacks("once memory"),!0))h++,l.add(m);m();return d.promise()}});var o=/[\n\t\r]/g,p=/\s+/,q=/\r/g,r=/^(?:button|input)$/i,s=/^(?:button|input|object|select|textarea)$/i,t=/^a(?:rea)?$/i,u=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,v=f.support.getSetAttribute,w,x,y;f.fn.extend({attr:function(a,b){return f.access(this,a,b,!0,f.attr)},removeAttr:function(a){return this.each(function(){f.removeAttr(this,a)})},prop:function(a,b){return f.access(this,a,b,!0,f.prop)},removeProp:function(a){a=f.propFix[a]||a;return this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,g,h,i;if(f.isFunction(a))return this.each(function(b){f(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(p);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{g=" "+e.className+" ";for(h=0,i=b.length;h<i;h++)~g.indexOf(" "+b[h]+" ")||(g+=b[h]+" ");e.className=f.trim(g)}}}return this},removeClass:function(a){var c,d,e,g,h,i,j;if(f.isFunction(a))return this.each(function(b){f(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(p);for(d=0,e=this.length;d<e;d++){g=this[d];if(g.nodeType===1&&g.className)if(a){h=(" "+g.className+" ").replace(o," ");for(i=0,j=c.length;i<j;i++)h=h.replace(" "+c[i]+" "," ");g.className=f.trim(h)}else g.className=""}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";if(f.isFunction(a))return this.each(function(c){f(this).toggleClass(a.call(this,c,this.className,b),b)});return this.each(function(){if(c==="string"){var e,g=0,h=f(this),i=b,j=a.split(p);while(e=j[g++])i=d?i:!h.hasClass(e),h[i?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&f._data(this,"__className__",this.className),this.className=this.className||a===!1?"":f._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ",c=0,d=this.length;for(;c<d;c++)if(this[c].nodeType===1&&(" "+this[c].className+" ").replace(o," ").indexOf(b)>-1)return!0;return!1},val:function(a){var c,d,e,g=this[0];{if(!!arguments.length){e=f.isFunction(a);return this.each(function(d){var g=f(this),h;if(this.nodeType===1){e?h=a.call(this,d,g.val()):h=a,h==null?h="":typeof h=="number"?h+="":f.isArray(h)&&(h=f.map(h,function(a){return a==null?"":a+""})),c=f.valHooks[this.nodeName.toLowerCase()]||f.valHooks[this.type];if(!c||!("set"in c)||c.set(this,h,"value")===b)this.value=h}})}if(g){c=f.valHooks[g.nodeName.toLowerCase()]||f.valHooks[g.type];if(c&&"get"in c&&(d=c.get(g,"value"))!==b)return d;d=g.value;return typeof d=="string"?d.replace(q,""):d==null?"":d}}}}),f.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c,d,e,g=a.selectedIndex,h=[],i=a.options,j=a.type==="select-one";if(g<0)return null;c=j?g:0,d=j?g+1:i.length;for(;c<d;c++){e=i[c];if(e.selected&&(f.support.optDisabled?!e.disabled:e.getAttribute("disabled")===null)&&(!e.parentNode.disabled||!f.nodeName(e.parentNode,"optgroup"))){b=f(e).val();if(j)return b;h.push(b)}}if(j&&!h.length&&i.length)return f(i[g]).val();return h},set:function(a,b){var c=f.makeArray(b);f(a).find("option").each(function(){this.selected=f.inArray(f(this).val(),c)>=0}),c.length||(a.selectedIndex=-1);return c}}},attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0},attr:function(a,c,d,e){var g,h,i,j=a.nodeType;if(!!a&&j!==3&&j!==8&&j!==2){if(e&&c in f.attrFn)return f(a)[c](d);if(typeof a.getAttribute=="undefined")return f.prop(a,c,d);i=j!==1||!f.isXMLDoc(a),i&&(c=c.toLowerCase(),h=f.attrHooks[c]||(u.test(c)?x:w));if(d!==b){if(d===null){f.removeAttr(a,c);return}if(h&&"set"in h&&i&&(g=h.set(a,d,c))!==b)return g;a.setAttribute(c,""+d);return d}if(h&&"get"in h&&i&&(g=h.get(a,c))!==null)return g;g=a.getAttribute(c);return g===null?b:g}},removeAttr:function(a,b){var c,d,e,g,h=0;if(b&&a.nodeType===1){d=b.toLowerCase().split(p),g=d.length;for(;h<g;h++)e=d[h],e&&(c=f.propFix[e]||e,f.attr(a,e,""),a.removeAttribute(v?e:c),u.test(e)&&c in a&&(a[c]=!1))}},attrHooks:{type:{set:function(a,b){if(r.test(a.nodeName)&&a.parentNode)f.error("type property can't be changed");else if(!f.support.radioValue&&b==="radio"&&f.nodeName(a,"input")){var c=a.value;a.setAttribute("type",b),c&&(a.value=c);return b}}},value:{get:function(a,b){if(w&&f.nodeName(a,"button"))return w.get(a,b);return b in a?a.value:null},set:function(a,b,c){if(w&&f.nodeName(a,"button"))return w.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e,g,h,i=a.nodeType;if(!!a&&i!==3&&i!==8&&i!==2){h=i!==1||!f.isXMLDoc(a),h&&(c=f.propFix[c]||c,g=f.propHooks[c]);return d!==b?g&&"set"in g&&(e=g.set(a,d,c))!==b?e:a[c]=d:g&&"get"in g&&(e=g.get(a,c))!==null?e:a[c]}},propHooks:{tabIndex:{get:function(a){var c=a.getAttributeNode("tabindex");return c&&c.specified?parseInt(c.value,10):s.test(a.nodeName)||t.test(a.nodeName)&&a.href?0:b}}}}),f.attrHooks.tabindex=f.propHooks.tabIndex,x={get:function(a,c){var d,e=f.prop(a,c);return e===!0||typeof e!="boolean"&&(d=a.getAttributeNode(c))&&d.nodeValue!==!1?c.toLowerCase():b},set:function(a,b,c){var d;b===!1?f.removeAttr(a,c):(d=f.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase()));return c}},v||(y={name:!0,id:!0},w=f.valHooks.button={get:function(a,c){var d;d=a.getAttributeNode(c);return d&&(y[c]?d.nodeValue!=="":d.specified)?d.nodeValue:b},set:function(a,b,d){var e=a.getAttributeNode(d);e||(e=c.createAttribute(d),a.setAttributeNode(e));return e.nodeValue=b+""}},f.attrHooks.tabindex.set=w.set,f.each(["width","height"],function(a,b){f.attrHooks[b]=f.extend(f.attrHooks[b],{set:function(a,c){if(c===""){a.setAttribute(b,"auto");return c}}})}),f.attrHooks.contenteditable={get:w.get,set:function(a,b,c){b===""&&(b="false"),w.set(a,b,c)}}),f.support.hrefNormalized||f.each(["href","src","width","height"],function(a,c){f.attrHooks[c]=f.extend(f.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),f.support.style||(f.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=""+b}}),f.support.optSelected||(f.propHooks.selected=f.extend(f.propHooks.selected,{get:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex);return null}})),f.support.enctype||(f.propFix.enctype="encoding"),f.support.checkOn||f.each(["radio","checkbox"],function(){f.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),f.each(["radio","checkbox"],function(){f.valHooks[this]=f.extend(f.valHooks[this],{set:function(a,b){if(f.isArray(b))return a.checked=f.inArray(f(a).val(),b)>=0}})});var z=/^(?:textarea|input|select)$/i,A=/^([^\.]*)?(?:\.(.+))?$/,B=/\bhover(\.\S+)?\b/,C=/^key/,D=/^(?:mouse|contextmenu)|click/,E=/^(?:focusinfocus|focusoutblur)$/,F=/^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,G=function(a){var b=F.exec(a);b&&(b[1]=(b[1]||"").toLowerCase(),b[3]=b[3]&&new RegExp("(?:^|\\s)"+b[3]+"(?:\\s|$)"));return b},H=function(a,b){var c=a.attributes||{};return(!b[1]||a.nodeName.toLowerCase()===b[1])&&(!b[2]||(c.id||{}).value===b[2])&&(!b[3]||b[3].test((c["class"]||{}).value))},I=function(a){return f.event.special.hover?a:a.replace(B,"mouseenter$1 mouseleave$1")};
f.event={add:function(a,c,d,e,g){var h,i,j,k,l,m,n,o,p,q,r,s;if(!(a.nodeType===3||a.nodeType===8||!c||!d||!(h=f._data(a)))){d.handler&&(p=d,d=p.handler),d.guid||(d.guid=f.guid++),j=h.events,j||(h.events=j={}),i=h.handle,i||(h.handle=i=function(a){return typeof f!="undefined"&&(!a||f.event.triggered!==a.type)?f.event.dispatch.apply(i.elem,arguments):b},i.elem=a),c=f.trim(I(c)).split(" ");for(k=0;k<c.length;k++){l=A.exec(c[k])||[],m=l[1],n=(l[2]||"").split(".").sort(),s=f.event.special[m]||{},m=(g?s.delegateType:s.bindType)||m,s=f.event.special[m]||{},o=f.extend({type:m,origType:l[1],data:e,handler:d,guid:d.guid,selector:g,quick:G(g),namespace:n.join(".")},p),r=j[m];if(!r){r=j[m]=[],r.delegateCount=0;if(!s.setup||s.setup.call(a,e,n,i)===!1)a.addEventListener?a.addEventListener(m,i,!1):a.attachEvent&&a.attachEvent("on"+m,i)}s.add&&(s.add.call(a,o),o.handler.guid||(o.handler.guid=d.guid)),g?r.splice(r.delegateCount++,0,o):r.push(o),f.event.global[m]=!0}a=null}},global:{},remove:function(a,b,c,d,e){var g=f.hasData(a)&&f._data(a),h,i,j,k,l,m,n,o,p,q,r,s;if(!!g&&!!(o=g.events)){b=f.trim(I(b||"")).split(" ");for(h=0;h<b.length;h++){i=A.exec(b[h])||[],j=k=i[1],l=i[2];if(!j){for(j in o)f.event.remove(a,j+b[h],c,d,!0);continue}p=f.event.special[j]||{},j=(d?p.delegateType:p.bindType)||j,r=o[j]||[],m=r.length,l=l?new RegExp("(^|\\.)"+l.split(".").sort().join("\\.(?:.*\\.)?")+"(\\.|$)"):null;for(n=0;n<r.length;n++)s=r[n],(e||k===s.origType)&&(!c||c.guid===s.guid)&&(!l||l.test(s.namespace))&&(!d||d===s.selector||d==="**"&&s.selector)&&(r.splice(n--,1),s.selector&&r.delegateCount--,p.remove&&p.remove.call(a,s));r.length===0&&m!==r.length&&((!p.teardown||p.teardown.call(a,l)===!1)&&f.removeEvent(a,j,g.handle),delete o[j])}f.isEmptyObject(o)&&(q=g.handle,q&&(q.elem=null),f.removeData(a,["events","handle"],!0))}},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,e,g){if(!e||e.nodeType!==3&&e.nodeType!==8){var h=c.type||c,i=[],j,k,l,m,n,o,p,q,r,s;if(E.test(h+f.event.triggered))return;h.indexOf("!")>=0&&(h=h.slice(0,-1),k=!0),h.indexOf(".")>=0&&(i=h.split("."),h=i.shift(),i.sort());if((!e||f.event.customEvent[h])&&!f.event.global[h])return;c=typeof c=="object"?c[f.expando]?c:new f.Event(h,c):new f.Event(h),c.type=h,c.isTrigger=!0,c.exclusive=k,c.namespace=i.join("."),c.namespace_re=c.namespace?new RegExp("(^|\\.)"+i.join("\\.(?:.*\\.)?")+"(\\.|$)"):null,o=h.indexOf(":")<0?"on"+h:"";if(!e){j=f.cache;for(l in j)j[l].events&&j[l].events[h]&&f.event.trigger(c,d,j[l].handle.elem,!0);return}c.result=b,c.target||(c.target=e),d=d!=null?f.makeArray(d):[],d.unshift(c),p=f.event.special[h]||{};if(p.trigger&&p.trigger.apply(e,d)===!1)return;r=[[e,p.bindType||h]];if(!g&&!p.noBubble&&!f.isWindow(e)){s=p.delegateType||h,m=E.test(s+h)?e:e.parentNode,n=null;for(;m;m=m.parentNode)r.push([m,s]),n=m;n&&n===e.ownerDocument&&r.push([n.defaultView||n.parentWindow||a,s])}for(l=0;l<r.length&&!c.isPropagationStopped();l++)m=r[l][0],c.type=r[l][1],q=(f._data(m,"events")||{})[c.type]&&f._data(m,"handle"),q&&q.apply(m,d),q=o&&m[o],q&&f.acceptData(m)&&q.apply(m,d)===!1&&c.preventDefault();c.type=h,!g&&!c.isDefaultPrevented()&&(!p._default||p._default.apply(e.ownerDocument,d)===!1)&&(h!=="click"||!f.nodeName(e,"a"))&&f.acceptData(e)&&o&&e[h]&&(h!=="focus"&&h!=="blur"||c.target.offsetWidth!==0)&&!f.isWindow(e)&&(n=e[o],n&&(e[o]=null),f.event.triggered=h,e[h](),f.event.triggered=b,n&&(e[o]=n));return c.result}},dispatch:function(c){c=f.event.fix(c||a.event);var d=(f._data(this,"events")||{})[c.type]||[],e=d.delegateCount,g=[].slice.call(arguments,0),h=!c.exclusive&&!c.namespace,i=[],j,k,l,m,n,o,p,q,r,s,t;g[0]=c,c.delegateTarget=this;if(e&&!c.target.disabled&&(!c.button||c.type!=="click")){m=f(this),m.context=this.ownerDocument||this;for(l=c.target;l!=this;l=l.parentNode||this){o={},q=[],m[0]=l;for(j=0;j<e;j++)r=d[j],s=r.selector,o[s]===b&&(o[s]=r.quick?H(l,r.quick):m.is(s)),o[s]&&q.push(r);q.length&&i.push({elem:l,matches:q})}}d.length>e&&i.push({elem:this,matches:d.slice(e)});for(j=0;j<i.length&&!c.isPropagationStopped();j++){p=i[j],c.currentTarget=p.elem;for(k=0;k<p.matches.length&&!c.isImmediatePropagationStopped();k++){r=p.matches[k];if(h||!c.namespace&&!r.namespace||c.namespace_re&&c.namespace_re.test(r.namespace))c.data=r.data,c.handleObj=r,n=((f.event.special[r.origType]||{}).handle||r.handler).apply(p.elem,g),n!==b&&(c.result=n,n===!1&&(c.preventDefault(),c.stopPropagation()))}}return c.result},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){a.which==null&&(a.which=b.charCode!=null?b.charCode:b.keyCode);return a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,d){var e,f,g,h=d.button,i=d.fromElement;a.pageX==null&&d.clientX!=null&&(e=a.target.ownerDocument||c,f=e.documentElement,g=e.body,a.pageX=d.clientX+(f&&f.scrollLeft||g&&g.scrollLeft||0)-(f&&f.clientLeft||g&&g.clientLeft||0),a.pageY=d.clientY+(f&&f.scrollTop||g&&g.scrollTop||0)-(f&&f.clientTop||g&&g.clientTop||0)),!a.relatedTarget&&i&&(a.relatedTarget=i===a.target?d.toElement:i),!a.which&&h!==b&&(a.which=h&1?1:h&2?3:h&4?2:0);return a}},fix:function(a){if(a[f.expando])return a;var d,e,g=a,h=f.event.fixHooks[a.type]||{},i=h.props?this.props.concat(h.props):this.props;a=f.Event(g);for(d=i.length;d;)e=i[--d],a[e]=g[e];a.target||(a.target=g.srcElement||c),a.target.nodeType===3&&(a.target=a.target.parentNode),a.metaKey===b&&(a.metaKey=a.ctrlKey);return h.filter?h.filter(a,g):a},special:{ready:{setup:f.bindReady},load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(a,b,c){f.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}},simulate:function(a,b,c,d){var e=f.extend(new f.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?f.event.trigger(e,null,b):f.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},f.event.handle=f.event.dispatch,f.removeEvent=c.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},f.Event=function(a,b){if(!(this instanceof f.Event))return new f.Event(a,b);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?K:J):this.type=a,b&&f.extend(this,b),this.timeStamp=a&&a.timeStamp||f.now(),this[f.expando]=!0},f.Event.prototype={preventDefault:function(){this.isDefaultPrevented=K;var a=this.originalEvent;!a||(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=K;var a=this.originalEvent;!a||(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=K,this.stopPropagation()},isDefaultPrevented:J,isPropagationStopped:J,isImmediatePropagationStopped:J},f.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){f.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c=this,d=a.relatedTarget,e=a.handleObj,g=e.selector,h;if(!d||d!==c&&!f.contains(c,d))a.type=e.origType,h=e.handler.apply(this,arguments),a.type=b;return h}}}),f.support.submitBubbles||(f.event.special.submit={setup:function(){if(f.nodeName(this,"form"))return!1;f.event.add(this,"click._submit keypress._submit",function(a){var c=a.target,d=f.nodeName(c,"input")||f.nodeName(c,"button")?c.form:b;d&&!d._submit_attached&&(f.event.add(d,"submit._submit",function(a){this.parentNode&&!a.isTrigger&&f.event.simulate("submit",this.parentNode,a,!0)}),d._submit_attached=!0)})},teardown:function(){if(f.nodeName(this,"form"))return!1;f.event.remove(this,"._submit")}}),f.support.changeBubbles||(f.event.special.change={setup:function(){if(z.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")f.event.add(this,"propertychange._change",function(a){a.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),f.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1,f.event.simulate("change",this,a,!0))});return!1}f.event.add(this,"beforeactivate._change",function(a){var b=a.target;z.test(b.nodeName)&&!b._change_attached&&(f.event.add(b,"change._change",function(a){this.parentNode&&!a.isSimulated&&!a.isTrigger&&f.event.simulate("change",this.parentNode,a,!0)}),b._change_attached=!0)})},handle:function(a){var b=a.target;if(this!==b||a.isSimulated||a.isTrigger||b.type!=="radio"&&b.type!=="checkbox")return a.handleObj.handler.apply(this,arguments)},teardown:function(){f.event.remove(this,"._change");return z.test(this.nodeName)}}),f.support.focusinBubbles||f.each({focus:"focusin",blur:"focusout"},function(a,b){var d=0,e=function(a){f.event.simulate(b,a.target,f.event.fix(a),!0)};f.event.special[b]={setup:function(){d++===0&&c.addEventListener(a,e,!0)},teardown:function(){--d===0&&c.removeEventListener(a,e,!0)}}}),f.fn.extend({on:function(a,c,d,e,g){var h,i;if(typeof a=="object"){typeof c!="string"&&(d=c,c=b);for(i in a)this.on(i,c,d,a[i],g);return this}d==null&&e==null?(e=c,d=c=b):e==null&&(typeof c=="string"?(e=d,d=b):(e=d,d=c,c=b));if(e===!1)e=J;else if(!e)return this;g===1&&(h=e,e=function(a){f().off(a);return h.apply(this,arguments)},e.guid=h.guid||(h.guid=f.guid++));return this.each(function(){f.event.add(this,a,e,d,c)})},one:function(a,b,c,d){return this.on.call(this,a,b,c,d,1)},off:function(a,c,d){if(a&&a.preventDefault&&a.handleObj){var e=a.handleObj;f(a.delegateTarget).off(e.namespace?e.type+"."+e.namespace:e.type,e.selector,e.handler);return this}if(typeof a=="object"){for(var g in a)this.off(g,c,a[g]);return this}if(c===!1||typeof c=="function")d=c,c=b;d===!1&&(d=J);return this.each(function(){f.event.remove(this,a,d,c)})},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},live:function(a,b,c){f(this.context).on(a,this.selector,b,c);return this},die:function(a,b){f(this.context).off(a,this.selector||"**",b);return this},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return arguments.length==1?this.off(a,"**"):this.off(b,a,c)},trigger:function(a,b){return this.each(function(){f.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return f.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||f.guid++,d=0,e=function(c){var e=(f._data(this,"lastToggle"+a.guid)||0)%d;f._data(this,"lastToggle"+a.guid,e+1),c.preventDefault();return b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),f.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){f.fn[b]=function(a,c){c==null&&(c=a,a=null);return arguments.length>0?this.on(b,null,a,c):this.trigger(b)},f.attrFn&&(f.attrFn[b]=!0),C.test(b)&&(f.event.fixHooks[b]=f.event.keyHooks),D.test(b)&&(f.event.fixHooks[b]=f.event.mouseHooks)}),function(){function x(a,b,c,e,f,g){for(var h=0,i=e.length;h<i;h++){var j=e[h];if(j){var k=!1;j=j[a];while(j){if(j[d]===c){k=e[j.sizset];break}if(j.nodeType===1){g||(j[d]=c,j.sizset=h);if(typeof b!="string"){if(j===b){k=!0;break}}else if(m.filter(b,[j]).length>0){k=j;break}}j=j[a]}e[h]=k}}}function w(a,b,c,e,f,g){for(var h=0,i=e.length;h<i;h++){var j=e[h];if(j){var k=!1;j=j[a];while(j){if(j[d]===c){k=e[j.sizset];break}j.nodeType===1&&!g&&(j[d]=c,j.sizset=h);if(j.nodeName.toLowerCase()===b){k=j;break}j=j[a]}e[h]=k}}}var a=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,d="sizcache"+(Math.random()+"").replace(".",""),e=0,g=Object.prototype.toString,h=!1,i=!0,j=/\\/g,k=/\r\n/g,l=/\W/;[0,0].sort(function(){i=!1;return 0});var m=function(b,d,e,f){e=e||[],d=d||c;var h=d;if(d.nodeType!==1&&d.nodeType!==9)return[];if(!b||typeof b!="string")return e;var i,j,k,l,n,q,r,t,u=!0,v=m.isXML(d),w=[],x=b;do{a.exec(""),i=a.exec(x);if(i){x=i[3],w.push(i[1]);if(i[2]){l=i[3];break}}}while(i);if(w.length>1&&p.exec(b))if(w.length===2&&o.relative[w[0]])j=y(w[0]+w[1],d,f);else{j=o.relative[w[0]]?[d]:m(w.shift(),d);while(w.length)b=w.shift(),o.relative[b]&&(b+=w.shift()),j=y(b,j,f)}else{!f&&w.length>1&&d.nodeType===9&&!v&&o.match.ID.test(w[0])&&!o.match.ID.test(w[w.length-1])&&(n=m.find(w.shift(),d,v),d=n.expr?m.filter(n.expr,n.set)[0]:n.set[0]);if(d){n=f?{expr:w.pop(),set:s(f)}:m.find(w.pop(),w.length===1&&(w[0]==="~"||w[0]==="+")&&d.parentNode?d.parentNode:d,v),j=n.expr?m.filter(n.expr,n.set):n.set,w.length>0?k=s(j):u=!1;while(w.length)q=w.pop(),r=q,o.relative[q]?r=w.pop():q="",r==null&&(r=d),o.relative[q](k,r,v)}else k=w=[]}k||(k=j),k||m.error(q||b);if(g.call(k)==="[object Array]")if(!u)e.push.apply(e,k);else if(d&&d.nodeType===1)for(t=0;k[t]!=null;t++)k[t]&&(k[t]===!0||k[t].nodeType===1&&m.contains(d,k[t]))&&e.push(j[t]);else for(t=0;k[t]!=null;t++)k[t]&&k[t].nodeType===1&&e.push(j[t]);else s(k,e);l&&(m(l,h,e,f),m.uniqueSort(e));return e};m.uniqueSort=function(a){if(u){h=i,a.sort(u);if(h)for(var b=1;b<a.length;b++)a[b]===a[b-1]&&a.splice(b--,1)}return a},m.matches=function(a,b){return m(a,null,null,b)},m.matchesSelector=function(a,b){return m(b,null,null,[a]).length>0},m.find=function(a,b,c){var d,e,f,g,h,i;if(!a)return[];for(e=0,f=o.order.length;e<f;e++){h=o.order[e];if(g=o.leftMatch[h].exec(a)){i=g[1],g.splice(1,1);if(i.substr(i.length-1)!=="\\"){g[1]=(g[1]||"").replace(j,""),d=o.find[h](g,b,c);if(d!=null){a=a.replace(o.match[h],"");break}}}}d||(d=typeof b.getElementsByTagName!="undefined"?b.getElementsByTagName("*"):[]);return{set:d,expr:a}},m.filter=function(a,c,d,e){var f,g,h,i,j,k,l,n,p,q=a,r=[],s=c,t=c&&c[0]&&m.isXML(c[0]);while(a&&c.length){for(h in o.filter)if((f=o.leftMatch[h].exec(a))!=null&&f[2]){k=o.filter[h],l=f[1],g=!1,f.splice(1,1);if(l.substr(l.length-1)==="\\")continue;s===r&&(r=[]);if(o.preFilter[h]){f=o.preFilter[h](f,s,d,r,e,t);if(!f)g=i=!0;else if(f===!0)continue}if(f)for(n=0;(j=s[n])!=null;n++)j&&(i=k(j,f,n,s),p=e^i,d&&i!=null?p?g=!0:s[n]=!1:p&&(r.push(j),g=!0));if(i!==b){d||(s=r),a=a.replace(o.match[h],"");if(!g)return[];break}}if(a===q)if(g==null)m.error(a);else break;q=a}return s},m.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)};var n=m.getText=function(a){var b,c,d=a.nodeType,e="";if(d){if(d===1||d===9){if(typeof a.textContent=="string")return a.textContent;if(typeof a.innerText=="string")return a.innerText.replace(k,"");for(a=a.firstChild;a;a=a.nextSibling)e+=n(a)}else if(d===3||d===4)return a.nodeValue}else for(b=0;c=a[b];b++)c.nodeType!==8&&(e+=n(c));return e},o=m.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(a){return a.getAttribute("href")},type:function(a){return a.getAttribute("type")}},relative:{"+":function(a,b){var c=typeof b=="string",d=c&&!l.test(b),e=c&&!d;d&&(b=b.toLowerCase());for(var f=0,g=a.length,h;f<g;f++)if(h=a[f]){while((h=h.previousSibling)&&h.nodeType!==1);a[f]=e||h&&h.nodeName.toLowerCase()===b?h||!1:h===b}e&&m.filter(b,a,!0)},">":function(a,b){var c,d=typeof b=="string",e=0,f=a.length;if(d&&!l.test(b)){b=b.toLowerCase();for(;e<f;e++){c=a[e];if(c){var g=c.parentNode;a[e]=g.nodeName.toLowerCase()===b?g:!1}}}else{for(;e<f;e++)c=a[e],c&&(a[e]=d?c.parentNode:c.parentNode===b);d&&m.filter(b,a,!0)}},"":function(a,b,c){var d,f=e++,g=x;typeof b=="string"&&!l.test(b)&&(b=b.toLowerCase(),d=b,g=w),g("parentNode",b,f,a,d,c)},"~":function(a,b,c){var d,f=e++,g=x;typeof b=="string"&&!l.test(b)&&(b=b.toLowerCase(),d=b,g=w),g("previousSibling",b,f,a,d,c)}},find:{ID:function(a,b,c){if(typeof b.getElementById!="undefined"&&!c){var d=b.getElementById(a[1]);return d&&d.parentNode?[d]:[]}},NAME:function(a,b){if(typeof b.getElementsByName!="undefined"){var c=[],d=b.getElementsByName(a[1]);for(var e=0,f=d.length;e<f;e++)d[e].getAttribute("name")===a[1]&&c.push(d[e]);return c.length===0?null:c}},TAG:function(a,b){if(typeof b.getElementsByTagName!="undefined")return b.getElementsByTagName(a[1])}},preFilter:{CLASS:function(a,b,c,d,e,f){a=" "+a[1].replace(j,"")+" ";if(f)return a;for(var g=0,h;(h=b[g])!=null;g++)h&&(e^(h.className&&(" "+h.className+" ").replace(/[\t\n\r]/g," ").indexOf(a)>=0)?c||d.push(h):c&&(b[g]=!1));return!1},ID:function(a){return a[1].replace(j,"")},TAG:function(a,b){return a[1].replace(j,"").toLowerCase()},CHILD:function(a){if(a[1]==="nth"){a[2]||m.error(a[0]),a[2]=a[2].replace(/^\+|\s*/g,"");var b=/(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2]==="even"&&"2n"||a[2]==="odd"&&"2n+1"||!/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=b[1]+(b[2]||1)-0,a[3]=b[3]-0}else a[2]&&m.error(a[0]);a[0]=e++;return a},ATTR:function(a,b,c,d,e,f){var g=a[1]=a[1].replace(j,"");!f&&o.attrMap[g]&&(a[1]=o.attrMap[g]),a[4]=(a[4]||a[5]||"").replace(j,""),a[2]==="~="&&(a[4]=" "+a[4]+" ");return a},PSEUDO:function(b,c,d,e,f){if(b[1]==="not")if((a.exec(b[3])||"").length>1||/^\w/.test(b[3]))b[3]=m(b[3],null,null,c);else{var g=m.filter(b[3],c,d,!0^f);d||e.push.apply(e,g);return!1}else if(o.match.POS.test(b[0])||o.match.CHILD.test(b[0]))return!0;return b},POS:function(a){a.unshift(!0);return a}},filters:{enabled:function(a){return a.disabled===!1&&a.type!=="hidden"},disabled:function(a){return a.disabled===!0},checked:function(a){return a.checked===!0},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return a.selected===!0},parent:function(a){return!!a.firstChild},empty:function(a){return!a.firstChild},has:function(a,b,c){return!!m(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},text:function(a){var b=a.getAttribute("type"),c=a.type;return a.nodeName.toLowerCase()==="input"&&"text"===c&&(b===c||b===null)},radio:function(a){return a.nodeName.toLowerCase()==="input"&&"radio"===a.type},checkbox:function(a){return a.nodeName.toLowerCase()==="input"&&"checkbox"===a.type},file:function(a){return a.nodeName.toLowerCase()==="input"&&"file"===a.type},password:function(a){return a.nodeName.toLowerCase()==="input"&&"password"===a.type},submit:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"submit"===a.type},image:function(a){return a.nodeName.toLowerCase()==="input"&&"image"===a.type},reset:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"reset"===a.type},button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&"button"===a.type||b==="button"},input:function(a){return/input|select|textarea|button/i.test(a.nodeName)},focus:function(a){return a===a.ownerDocument.activeElement}},setFilters:{first:function(a,b){return b===0},last:function(a,b,c,d){return b===d.length-1},even:function(a,b){return b%2===0},odd:function(a,b){return b%2===1},lt:function(a,b,c){return b<c[3]-0},gt:function(a,b,c){return b>c[3]-0},nth:function(a,b,c){return c[3]-0===b},eq:function(a,b,c){return c[3]-0===b}},filter:{PSEUDO:function(a,b,c,d){var e=b[1],f=o.filters[e];if(f)return f(a,c,b,d);if(e==="contains")return(a.textContent||a.innerText||n([a])||"").indexOf(b[3])>=0;if(e==="not"){var g=b[3];for(var h=0,i=g.length;h<i;h++)if(g[h]===a)return!1;return!0}m.error(e)},CHILD:function(a,b){var c,e,f,g,h,i,j,k=b[1],l=a;switch(k){case"only":case"first":while(l=l.previousSibling)if(l.nodeType===1)return!1;if(k==="first")return!0;l=a;case"last":while(l=l.nextSibling)if(l.nodeType===1)return!1;return!0;case"nth":c=b[2],e=b[3];if(c===1&&e===0)return!0;f=b[0],g=a.parentNode;if(g&&(g[d]!==f||!a.nodeIndex)){i=0;for(l=g.firstChild;l;l=l.nextSibling)l.nodeType===1&&(l.nodeIndex=++i);g[d]=f}j=a.nodeIndex-e;return c===0?j===0:j%c===0&&j/c>=0}},ID:function(a,b){return a.nodeType===1&&a.getAttribute("id")===b},TAG:function(a,b){return b==="*"&&a.nodeType===1||!!a.nodeName&&a.nodeName.toLowerCase()===b},CLASS:function(a,b){return(" "+(a.className||a.getAttribute("class"))+" ").indexOf(b)>-1},ATTR:function(a,b){var c=b[1],d=m.attr?m.attr(a,c):o.attrHandle[c]?o.attrHandle[c](a):a[c]!=null?a[c]:a.getAttribute(c),e=d+"",f=b[2],g=b[4];return d==null?f==="!=":!f&&m.attr?d!=null:f==="="?e===g:f==="*="?e.indexOf(g)>=0:f==="~="?(" "+e+" ").indexOf(g)>=0:g?f==="!="?e!==g:f==="^="?e.indexOf(g)===0:f==="$="?e.substr(e.length-g.length)===g:f==="|="?e===g||e.substr(0,g.length+1)===g+"-":!1:e&&d!==!1},POS:function(a,b,c,d){var e=b[2],f=o.setFilters[e];if(f)return f(a,c,b,d)}}},p=o.match.POS,q=function(a,b){return"\\"+(b-0+1)};for(var r in o.match)o.match[r]=new RegExp(o.match[r].source+/(?![^\[]*\])(?![^\(]*\))/.source),o.leftMatch[r]=new RegExp(/(^(?:.|\r|\n)*?)/.source+o.match[r].source.replace(/\\(\d+)/g,q));var s=function(a,b){a=Array.prototype.slice.call(a,0);if(b){b.push.apply(b,a);return b}return a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].nodeType}catch(t){s=function(a,b){var c=0,d=b||[];if(g.call(a)==="[object Array]")Array.prototype.push.apply(d,a);else if(typeof a.length=="number")for(var e=a.length;c<e;c++)d.push(a[c]);else for(;a[c];c++)d.push(a[c]);return d}}var u,v;c.documentElement.compareDocumentPosition?u=function(a,b){if(a===b){h=!0;return 0}if(!a.compareDocumentPosition||!b.compareDocumentPosition)return a.compareDocumentPosition?-1:1;return a.compareDocumentPosition(b)&4?-1:1}:(u=function(a,b){if(a===b){h=!0;return 0}if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],g=a.parentNode,i=b.parentNode,j=g;if(g===i)return v(a,b);if(!g)return-1;if(!i)return 1;while(j)e.unshift(j),j=j.parentNode;j=i;while(j)f.unshift(j),j=j.parentNode;c=e.length,d=f.length;for(var k=0;k<c&&k<d;k++)if(e[k]!==f[k])return v(e[k],f[k]);return k===c?v(a,f[k],-1):v(e[k],b,1)},v=function(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}),function(){var a=c.createElement("div"),d="script"+(new Date).getTime(),e=c.documentElement;a.innerHTML="<a name='"+d+"'/>",e.insertBefore(a,e.firstChild),c.getElementById(d)&&(o.find.ID=function(a,c,d){if(typeof c.getElementById!="undefined"&&!d){var e=c.getElementById(a[1]);return e?e.id===a[1]||typeof e.getAttributeNode!="undefined"&&e.getAttributeNode("id").nodeValue===a[1]?[e]:b:[]}},o.filter.ID=function(a,b){var c=typeof a.getAttributeNode!="undefined"&&a.getAttributeNode("id");return a.nodeType===1&&c&&c.nodeValue===b}),e.removeChild(a),e=a=null}(),function(){var a=c.createElement("div");a.appendChild(c.createComment("")),a.getElementsByTagName("*").length>0&&(o.find.TAG=function(a,b){var c=b.getElementsByTagName(a[1]);if(a[1]==="*"){var d=[];for(var e=0;c[e];e++)c[e].nodeType===1&&d.push(c[e]);c=d}return c}),a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!="undefined"&&a.firstChild.getAttribute("href")!=="#"&&(o.attrHandle.href=function(a){return a.getAttribute("href",2)}),a=null}(),c.querySelectorAll&&function(){var a=m,b=c.createElement("div"),d="__sizzle__";b.innerHTML="<p class='TEST'></p>";if(!b.querySelectorAll||b.querySelectorAll(".TEST").length!==0){m=function(b,e,f,g){e=e||c;if(!g&&!m.isXML(e)){var h=/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);if(h&&(e.nodeType===1||e.nodeType===9)){if(h[1])return s(e.getElementsByTagName(b),f);if(h[2]&&o.find.CLASS&&e.getElementsByClassName)return s(e.getElementsByClassName(h[2]),f)}if(e.nodeType===9){if(b==="body"&&e.body)return s([e.body],f);if(h&&h[3]){var i=e.getElementById(h[3]);if(!i||!i.parentNode)return s([],f);if(i.id===h[3])return s([i],f)}try{return s(e.querySelectorAll(b),f)}catch(j){}}else if(e.nodeType===1&&e.nodeName.toLowerCase()!=="object"){var k=e,l=e.getAttribute("id"),n=l||d,p=e.parentNode,q=/^\s*[+~]/.test(b);l?n=n.replace(/'/g,"\\$&"):e.setAttribute("id",n),q&&p&&(e=e.parentNode);try{if(!q||p)return s(e.querySelectorAll("[id='"+n+"'] "+b),f)}catch(r){}finally{l||k.removeAttribute("id")}}}return a(b,e,f,g)};for(var e in a)m[e]=a[e];b=null}}(),function(){var a=c.documentElement,b=a.matchesSelector||a.mozMatchesSelector||a.webkitMatchesSelector||a.msMatchesSelector;if(b){var d=!b.call(c.createElement("div"),"div"),e=!1;try{b.call(c.documentElement,"[test!='']:sizzle")}catch(f){e=!0}m.matchesSelector=function(a,c){c=c.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!m.isXML(a))try{if(e||!o.match.PSEUDO.test(c)&&!/!=/.test(c)){var f=b.call(a,c);if(f||!d||a.document&&a.document.nodeType!==11)return f}}catch(g){}return m(c,null,null,[a]).length>0}}}(),function(){var a=c.createElement("div");a.innerHTML="<div class='test e'></div><div class='test'></div>";if(!!a.getElementsByClassName&&a.getElementsByClassName("e").length!==0){a.lastChild.className="e";if(a.getElementsByClassName("e").length===1)return;o.order.splice(1,0,"CLASS"),o.find.CLASS=function(a,b,c){if(typeof b.getElementsByClassName!="undefined"&&!c)return b.getElementsByClassName(a[1])},a=null}}(),c.documentElement.contains?m.contains=function(a,b){return a!==b&&(a.contains?a.contains(b):!0)}:c.documentElement.compareDocumentPosition?m.contains=function(a,b){return!!(a.compareDocumentPosition(b)&16)}:m.contains=function(){return!1},m.isXML=function(a){var b=(a?a.ownerDocument||a:0).documentElement;return b?b.nodeName!=="HTML":!1};var y=function(a,b,c){var d,e=[],f="",g=b.nodeType?[b]:b;while(d=o.match.PSEUDO.exec(a))f+=d[0],a=a.replace(o.match.PSEUDO,"");a=o.relative[a]?a+"*":a;for(var h=0,i=g.length;h<i;h++)m(a,g[h],e,c);return m.filter(f,e)};m.attr=f.attr,m.selectors.attrMap={},f.find=m,f.expr=m.selectors,f.expr[":"]=f.expr.filters,f.unique=m.uniqueSort,f.text=m.getText,f.isXMLDoc=m.isXML,f.contains=m.contains}();var L=/Until$/,M=/^(?:parents|prevUntil|prevAll)/,N=/,/,O=/^.[^:#\[\.,]*$/,P=Array.prototype.slice,Q=f.expr.match.POS,R={children:!0,contents:!0,next:!0,prev:!0};f.fn.extend({find:function(a){var b=this,c,d;if(typeof a!="string")return f(a).filter(function(){for(c=0,d=b.length;c<d;c++)if(f.contains(b[c],this))return!0});var e=this.pushStack("","find",a),g,h,i;for(c=0,d=this.length;c<d;c++){g=e.length,f.find(a,this[c],e);if(c>0)for(h=g;h<e.length;h++)for(i=0;i<g;i++)if(e[i]===e[h]){e.splice(h--,1);break}}return e},has:function(a){var b=f(a);return this.filter(function(){for(var a=0,c=b.length;a<c;a++)if(f.contains(this,b[a]))return!0})},not:function(a){return this.pushStack(T(this,a,!1),"not",a)},filter:function(a){return this.pushStack(T(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?Q.test(a)?f(a,this.context).index(this[0])>=0:f.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c=[],d,e,g=this[0];if(f.isArray(a)){var h=1;while(g&&g.ownerDocument&&g!==b){for(d=0;d<a.length;d++)f(g).is(a[d])&&c.push({selector:a[d],elem:g,level:h});g=g.parentNode,h++}return c}var i=Q.test(a)||typeof a!="string"?f(a,b||this.context):0;for(d=0,e=this.length;d<e;d++){g=this[d];while(g){if(i?i.index(g)>-1:f.find.matchesSelector(g,a)){c.push(g);break}g=g.parentNode;if(!g||!g.ownerDocument||g===b||g.nodeType===11)break}}c=c.length>1?f.unique(c):c;return this.pushStack(c,"closest",a)},index:function(a){if(!a)return this[0]&&this[0].parentNode?this.prevAll().length:-1;if(typeof a=="string")return f.inArray(this[0],f(a));return f.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var c=typeof a=="string"?f(a,b):f.makeArray(a&&a.nodeType?[a]:a),d=f.merge(this.get(),c);return this.pushStack(S(c[0])||S(d[0])?d:f.unique(d))},andSelf:function(){return this.add(this.prevObject)}}),f.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return f.dir(a,"parentNode")},parentsUntil:function(a,b,c){return f.dir(a,"parentNode",c)},next:function(a){return f.nth(a,2,"nextSibling")},prev:function(a){return f.nth(a,2,"previousSibling")},nextAll:function(a){return f.dir(a,"nextSibling")},prevAll:function(a){return f.dir(a,"previousSibling")},nextUntil:function(a,b,c){return f.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return f.dir(a,"previousSibling",c)},siblings:function(a){return f.sibling(a.parentNode.firstChild,a)},children:function(a){return f.sibling(a.firstChild)},contents:function(a){return f.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:f.makeArray(a.childNodes)}},function(a,b){f.fn[a]=function(c,d){var e=f.map(this,b,c);L.test(a)||(d=c),d&&typeof d=="string"&&(e=f.filter(d,e)),e=this.length>1&&!R[a]?f.unique(e):e,(this.length>1||N.test(d))&&M.test(a)&&(e=e.reverse());return this.pushStack(e,a,P.call(arguments).join(","))}}),f.extend({filter:function(a,b,c){c&&(a=":not("+a+")");return b.length===1?f.find.matchesSelector(b[0],a)?[b[0]]:[]:f.find.matches(a,b)},dir:function(a,c,d){var e=[],g=a[c];while(g&&g.nodeType!==9&&(d===b||g.nodeType!==1||!f(g).is(d)))g.nodeType===1&&e.push(g),g=g[c];return e},nth:function(a,b,c,d){b=b||1;var e=0;for(;a;a=a[c])if(a.nodeType===1&&++e===b)break;return a},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var V="abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",W=/ jQuery\d+="(?:\d+|null)"/g,X=/^\s+/,Y=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,Z=/<([\w:]+)/,$=/<tbody/i,_=/<|&#?\w+;/,ba=/<(?:script|style)/i,bb=/<(?:script|object|embed|option|style)/i,bc=new RegExp("<(?:"+V+")","i"),bd=/checked\s*(?:[^=]|=\s*.checked.)/i,be=/\/(java|ecma)script/i,bf=/^\s*<!(?:\[CDATA\[|\-\-)/,bg={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]},bh=U(c);bg.optgroup=bg.option,bg.tbody=bg.tfoot=bg.colgroup=bg.caption=bg.thead,bg.th=bg.td,f.support.htmlSerialize||(bg._default=[1,"div<div>","</div>"]),f.fn.extend({text:function(a){if(f.isFunction(a))return this.each(function(b){var c=f(this);c.text(a.call(this,b,c.text()))});if(typeof a!="object"&&a!==b)return this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(a));return f.text(this)},wrapAll:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapAll(a.call(this,b))});if(this[0]){var b=f(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapInner(a.call(this,b))});return this.each(function(){var b=f(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=f.isFunction(a);return this.each(function(c){f(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){f.nodeName(this,"body")||f(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=f.clean(arguments);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,f.clean(arguments));return a}},remove:function(a,b){for(var c=0,d;(d=this[c])!=null;c++)if(!a||f.filter(a,[d]).length)!b&&d.nodeType===1&&(f.cleanData(d.getElementsByTagName("*")),f.cleanData([d])),d.parentNode&&d.parentNode.removeChild(d);return this},empty:function()
{for(var a=0,b;(b=this[a])!=null;a++){b.nodeType===1&&f.cleanData(b.getElementsByTagName("*"));while(b.firstChild)b.removeChild(b.firstChild)}return this},clone:function(a,b){a=a==null?!1:a,b=b==null?a:b;return this.map(function(){return f.clone(this,a,b)})},html:function(a){if(a===b)return this[0]&&this[0].nodeType===1?this[0].innerHTML.replace(W,""):null;if(typeof a=="string"&&!ba.test(a)&&(f.support.leadingWhitespace||!X.test(a))&&!bg[(Z.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(Y,"<$1></$2>");try{for(var c=0,d=this.length;c<d;c++)this[c].nodeType===1&&(f.cleanData(this[c].getElementsByTagName("*")),this[c].innerHTML=a)}catch(e){this.empty().append(a)}}else f.isFunction(a)?this.each(function(b){var c=f(this);c.html(a.call(this,b,c.html()))}):this.empty().append(a);return this},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(f.isFunction(a))return this.each(function(b){var c=f(this),d=c.html();c.replaceWith(a.call(this,b,d))});typeof a!="string"&&(a=f(a).detach());return this.each(function(){var b=this.nextSibling,c=this.parentNode;f(this).remove(),b?f(b).before(a):f(c).append(a)})}return this.length?this.pushStack(f(f.isFunction(a)?a():a),"replaceWith",a):this},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){var e,g,h,i,j=a[0],k=[];if(!f.support.checkClone&&arguments.length===3&&typeof j=="string"&&bd.test(j))return this.each(function(){f(this).domManip(a,c,d,!0)});if(f.isFunction(j))return this.each(function(e){var g=f(this);a[0]=j.call(this,e,c?g.html():b),g.domManip(a,c,d)});if(this[0]){i=j&&j.parentNode,f.support.parentNode&&i&&i.nodeType===11&&i.childNodes.length===this.length?e={fragment:i}:e=f.buildFragment(a,this,k),h=e.fragment,h.childNodes.length===1?g=h=h.firstChild:g=h.firstChild;if(g){c=c&&f.nodeName(g,"tr");for(var l=0,m=this.length,n=m-1;l<m;l++)d.call(c?bi(this[l],g):this[l],e.cacheable||m>1&&l<n?f.clone(h,!0,!0):h)}k.length&&f.each(k,bp)}return this}}),f.buildFragment=function(a,b,d){var e,g,h,i,j=a[0];b&&b[0]&&(i=b[0].ownerDocument||b[0]),i.createDocumentFragment||(i=c),a.length===1&&typeof j=="string"&&j.length<512&&i===c&&j.charAt(0)==="<"&&!bb.test(j)&&(f.support.checkClone||!bd.test(j))&&(f.support.html5Clone||!bc.test(j))&&(g=!0,h=f.fragments[j],h&&h!==1&&(e=h)),e||(e=i.createDocumentFragment(),f.clean(a,i,e,d)),g&&(f.fragments[j]=h?e:1);return{fragment:e,cacheable:g}},f.fragments={},f.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){f.fn[a]=function(c){var d=[],e=f(c),g=this.length===1&&this[0].parentNode;if(g&&g.nodeType===11&&g.childNodes.length===1&&e.length===1){e[b](this[0]);return this}for(var h=0,i=e.length;h<i;h++){var j=(h>0?this.clone(!0):this).get();f(e[h])[b](j),d=d.concat(j)}return this.pushStack(d,a,e.selector)}}),f.extend({clone:function(a,b,c){var d,e,g,h=f.support.html5Clone||!bc.test("<"+a.nodeName)?a.cloneNode(!0):bo(a);if((!f.support.noCloneEvent||!f.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!f.isXMLDoc(a)){bk(a,h),d=bl(a),e=bl(h);for(g=0;d[g];++g)e[g]&&bk(d[g],e[g])}if(b){bj(a,h);if(c){d=bl(a),e=bl(h);for(g=0;d[g];++g)bj(d[g],e[g])}}d=e=null;return h},clean:function(a,b,d,e){var g;b=b||c,typeof b.createElement=="undefined"&&(b=b.ownerDocument||b[0]&&b[0].ownerDocument||c);var h=[],i;for(var j=0,k;(k=a[j])!=null;j++){typeof k=="number"&&(k+="");if(!k)continue;if(typeof k=="string")if(!_.test(k))k=b.createTextNode(k);else{k=k.replace(Y,"<$1></$2>");var l=(Z.exec(k)||["",""])[1].toLowerCase(),m=bg[l]||bg._default,n=m[0],o=b.createElement("div");b===c?bh.appendChild(o):U(b).appendChild(o),o.innerHTML=m[1]+k+m[2];while(n--)o=o.lastChild;if(!f.support.tbody){var p=$.test(k),q=l==="table"&&!p?o.firstChild&&o.firstChild.childNodes:m[1]==="<table>"&&!p?o.childNodes:[];for(i=q.length-1;i>=0;--i)f.nodeName(q[i],"tbody")&&!q[i].childNodes.length&&q[i].parentNode.removeChild(q[i])}!f.support.leadingWhitespace&&X.test(k)&&o.insertBefore(b.createTextNode(X.exec(k)[0]),o.firstChild),k=o.childNodes}var r;if(!f.support.appendChecked)if(k[0]&&typeof (r=k.length)=="number")for(i=0;i<r;i++)bn(k[i]);else bn(k);k.nodeType?h.push(k):h=f.merge(h,k)}if(d){g=function(a){return!a.type||be.test(a.type)};for(j=0;h[j];j++)if(e&&f.nodeName(h[j],"script")&&(!h[j].type||h[j].type.toLowerCase()==="text/javascript"))e.push(h[j].parentNode?h[j].parentNode.removeChild(h[j]):h[j]);else{if(h[j].nodeType===1){var s=f.grep(h[j].getElementsByTagName("script"),g);h.splice.apply(h,[j+1,0].concat(s))}d.appendChild(h[j])}}return h},cleanData:function(a){var b,c,d=f.cache,e=f.event.special,g=f.support.deleteExpando;for(var h=0,i;(i=a[h])!=null;h++){if(i.nodeName&&f.noData[i.nodeName.toLowerCase()])continue;c=i[f.expando];if(c){b=d[c];if(b&&b.events){for(var j in b.events)e[j]?f.event.remove(i,j):f.removeEvent(i,j,b.handle);b.handle&&(b.handle.elem=null)}g?delete i[f.expando]:i.removeAttribute&&i.removeAttribute(f.expando),delete d[c]}}}});var bq=/alpha\([^)]*\)/i,br=/opacity=([^)]*)/,bs=/([A-Z]|^ms)/g,bt=/^-?\d+(?:px)?$/i,bu=/^-?\d/,bv=/^([\-+])=([\-+.\de]+)/,bw={position:"absolute",visibility:"hidden",display:"block"},bx=["Left","Right"],by=["Top","Bottom"],bz,bA,bB;f.fn.css=function(a,c){if(arguments.length===2&&c===b)return this;return f.access(this,a,c,!0,function(a,c,d){return d!==b?f.style(a,c,d):f.css(a,c)})},f.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bz(a,"opacity","opacity");return c===""?"1":c}return a.style.opacity}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":f.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!!a&&a.nodeType!==3&&a.nodeType!==8&&!!a.style){var g,h,i=f.camelCase(c),j=a.style,k=f.cssHooks[i];c=f.cssProps[i]||i;if(d===b){if(k&&"get"in k&&(g=k.get(a,!1,e))!==b)return g;return j[c]}h=typeof d,h==="string"&&(g=bv.exec(d))&&(d=+(g[1]+1)*+g[2]+parseFloat(f.css(a,c)),h="number");if(d==null||h==="number"&&isNaN(d))return;h==="number"&&!f.cssNumber[i]&&(d+="px");if(!k||!("set"in k)||(d=k.set(a,d))!==b)try{j[c]=d}catch(l){}}},css:function(a,c,d){var e,g;c=f.camelCase(c),g=f.cssHooks[c],c=f.cssProps[c]||c,c==="cssFloat"&&(c="float");if(g&&"get"in g&&(e=g.get(a,!0,d))!==b)return e;if(bz)return bz(a,c)},swap:function(a,b,c){var d={};for(var e in b)d[e]=a.style[e],a.style[e]=b[e];c.call(a);for(e in b)a.style[e]=d[e]}}),f.curCSS=f.css,f.each(["height","width"],function(a,b){f.cssHooks[b]={get:function(a,c,d){var e;if(c){if(a.offsetWidth!==0)return bC(a,b,d);f.swap(a,bw,function(){e=bC(a,b,d)});return e}},set:function(a,b){if(!bt.test(b))return b;b=parseFloat(b);if(b>=0)return b+"px"}}}),f.support.opacity||(f.cssHooks.opacity={get:function(a,b){return br.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=f.isNumeric(b)?"alpha(opacity="+b*100+")":"",g=d&&d.filter||c.filter||"";c.zoom=1;if(b>=1&&f.trim(g.replace(bq,""))===""){c.removeAttribute("filter");if(d&&!d.filter)return}c.filter=bq.test(g)?g.replace(bq,e):g+" "+e}}),f(function(){f.support.reliableMarginRight||(f.cssHooks.marginRight={get:function(a,b){var c;f.swap(a,{display:"inline-block"},function(){b?c=bz(a,"margin-right","marginRight"):c=a.style.marginRight});return c}})}),c.defaultView&&c.defaultView.getComputedStyle&&(bA=function(a,b){var c,d,e;b=b.replace(bs,"-$1").toLowerCase(),(d=a.ownerDocument.defaultView)&&(e=d.getComputedStyle(a,null))&&(c=e.getPropertyValue(b),c===""&&!f.contains(a.ownerDocument.documentElement,a)&&(c=f.style(a,b)));return c}),c.documentElement.currentStyle&&(bB=function(a,b){var c,d,e,f=a.currentStyle&&a.currentStyle[b],g=a.style;f===null&&g&&(e=g[b])&&(f=e),!bt.test(f)&&bu.test(f)&&(c=g.left,d=a.runtimeStyle&&a.runtimeStyle.left,d&&(a.runtimeStyle.left=a.currentStyle.left),g.left=b==="fontSize"?"1em":f||0,f=g.pixelLeft+"px",g.left=c,d&&(a.runtimeStyle.left=d));return f===""?"auto":f}),bz=bA||bB,f.expr&&f.expr.filters&&(f.expr.filters.hidden=function(a){var b=a.offsetWidth,c=a.offsetHeight;return b===0&&c===0||!f.support.reliableHiddenOffsets&&(a.style&&a.style.display||f.css(a,"display"))==="none"},f.expr.filters.visible=function(a){return!f.expr.filters.hidden(a)});var bD=/%20/g,bE=/\[\]$/,bF=/\r?\n/g,bG=/#.*$/,bH=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,bI=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,bJ=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,bK=/^(?:GET|HEAD)$/,bL=/^\/\//,bM=/\?/,bN=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bO=/^(?:select|textarea)/i,bP=/\s+/,bQ=/([?&])_=[^&]*/,bR=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,bS=f.fn.load,bT={},bU={},bV,bW,bX=["*/"]+["*"];try{bV=e.href}catch(bY){bV=c.createElement("a"),bV.href="",bV=bV.href}bW=bR.exec(bV.toLowerCase())||[],f.fn.extend({load:function(a,c,d){if(typeof a!="string"&&bS)return bS.apply(this,arguments);if(!this.length)return this;var e=a.indexOf(" ");if(e>=0){var g=a.slice(e,a.length);a=a.slice(0,e)}var h="GET";c&&(f.isFunction(c)?(d=c,c=b):typeof c=="object"&&(c=f.param(c,f.ajaxSettings.traditional),h="POST"));var i=this;f.ajax({url:a,type:h,dataType:"html",data:c,complete:function(a,b,c){c=a.responseText,a.isResolved()&&(a.done(function(a){c=a}),i.html(g?f("<div>").append(c.replace(bN,"")).find(g):c)),d&&i.each(d,[c,b,a])}});return this},serialize:function(){return f.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?f.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||bO.test(this.nodeName)||bI.test(this.type))}).map(function(a,b){var c=f(this).val();return c==null?null:f.isArray(c)?f.map(c,function(a,c){return{name:b.name,value:a.replace(bF,"\r\n")}}):{name:b.name,value:c.replace(bF,"\r\n")}}).get()}}),f.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){f.fn[b]=function(a){return this.on(b,a)}}),f.each(["get","post"],function(a,c){f[c]=function(a,d,e,g){f.isFunction(d)&&(g=g||e,e=d,d=b);return f.ajax({type:c,url:a,data:d,success:e,dataType:g})}}),f.extend({getScript:function(a,c){return f.get(a,b,c,"script")},getJSON:function(a,b,c){return f.get(a,b,c,"json")},ajaxSetup:function(a,b){b?b_(a,f.ajaxSettings):(b=a,a=f.ajaxSettings),b_(a,b);return a},ajaxSettings:{url:bV,isLocal:bJ.test(bW[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":bX},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":f.parseJSON,"text xml":f.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:bZ(bT),ajaxTransport:bZ(bU),ajax:function(a,c){function w(a,c,l,m){if(s!==2){s=2,q&&clearTimeout(q),p=b,n=m||"",v.readyState=a>0?4:0;var o,r,u,w=c,x=l?cb(d,v,l):b,y,z;if(a>=200&&a<300||a===304){if(d.ifModified){if(y=v.getResponseHeader("Last-Modified"))f.lastModified[k]=y;if(z=v.getResponseHeader("Etag"))f.etag[k]=z}if(a===304)w="notmodified",o=!0;else try{r=cc(d,x),w="success",o=!0}catch(A){w="parsererror",u=A}}else{u=w;if(!w||a)w="error",a<0&&(a=0)}v.status=a,v.statusText=""+(c||w),o?h.resolveWith(e,[r,w,v]):h.rejectWith(e,[v,w,u]),v.statusCode(j),j=b,t&&g.trigger("ajax"+(o?"Success":"Error"),[v,d,o?r:u]),i.fireWith(e,[v,w]),t&&(g.trigger("ajaxComplete",[v,d]),--f.active||f.event.trigger("ajaxStop"))}}typeof a=="object"&&(c=a,a=b),c=c||{};var d=f.ajaxSetup({},c),e=d.context||d,g=e!==d&&(e.nodeType||e instanceof f)?f(e):f.event,h=f.Deferred(),i=f.Callbacks("once memory"),j=d.statusCode||{},k,l={},m={},n,o,p,q,r,s=0,t,u,v={readyState:0,setRequestHeader:function(a,b){if(!s){var c=a.toLowerCase();a=m[c]=m[c]||a,l[a]=b}return this},getAllResponseHeaders:function(){return s===2?n:null},getResponseHeader:function(a){var c;if(s===2){if(!o){o={};while(c=bH.exec(n))o[c[1].toLowerCase()]=c[2]}c=o[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){s||(d.mimeType=a);return this},abort:function(a){a=a||"abort",p&&p.abort(a),w(0,a);return this}};h.promise(v),v.success=v.done,v.error=v.fail,v.complete=i.add,v.statusCode=function(a){if(a){var b;if(s<2)for(b in a)j[b]=[j[b],a[b]];else b=a[v.status],v.then(b,b)}return this},d.url=((a||d.url)+"").replace(bG,"").replace(bL,bW[1]+"//"),d.dataTypes=f.trim(d.dataType||"*").toLowerCase().split(bP),d.crossDomain==null&&(r=bR.exec(d.url.toLowerCase()),d.crossDomain=!(!r||r[1]==bW[1]&&r[2]==bW[2]&&(r[3]||(r[1]==="http:"?80:443))==(bW[3]||(bW[1]==="http:"?80:443)))),d.data&&d.processData&&typeof d.data!="string"&&(d.data=f.param(d.data,d.traditional)),b$(bT,d,c,v);if(s===2)return!1;t=d.global,d.type=d.type.toUpperCase(),d.hasContent=!bK.test(d.type),t&&f.active++===0&&f.event.trigger("ajaxStart");if(!d.hasContent){d.data&&(d.url+=(bM.test(d.url)?"&":"?")+d.data,delete d.data),k=d.url;if(d.cache===!1){var x=f.now(),y=d.url.replace(bQ,"$1_="+x);d.url=y+(y===d.url?(bM.test(d.url)?"&":"?")+"_="+x:"")}}(d.data&&d.hasContent&&d.contentType!==!1||c.contentType)&&v.setRequestHeader("Content-Type",d.contentType),d.ifModified&&(k=k||d.url,f.lastModified[k]&&v.setRequestHeader("If-Modified-Since",f.lastModified[k]),f.etag[k]&&v.setRequestHeader("If-None-Match",f.etag[k])),v.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+(d.dataTypes[0]!=="*"?", "+bX+"; q=0.01":""):d.accepts["*"]);for(u in d.headers)v.setRequestHeader(u,d.headers[u]);if(d.beforeSend&&(d.beforeSend.call(e,v,d)===!1||s===2)){v.abort();return!1}for(u in{success:1,error:1,complete:1})v[u](d[u]);p=b$(bU,d,c,v);if(!p)w(-1,"No Transport");else{v.readyState=1,t&&g.trigger("ajaxSend",[v,d]),d.async&&d.timeout>0&&(q=setTimeout(function(){v.abort("timeout")},d.timeout));try{s=1,p.send(l,w)}catch(z){if(s<2)w(-1,z);else throw z}}return v},param:function(a,c){var d=[],e=function(a,b){b=f.isFunction(b)?b():b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=f.ajaxSettings.traditional);if(f.isArray(a)||a.jquery&&!f.isPlainObject(a))f.each(a,function(){e(this.name,this.value)});else for(var g in a)ca(g,a[g],c,e);return d.join("&").replace(bD,"+")}}),f.extend({active:0,lastModified:{},etag:{}});var cd=f.now(),ce=/(\=)\?(&|$)|\?\?/i;f.ajaxSetup({jsonp:"callback",jsonpCallback:function(){return f.expando+"_"+cd++}}),f.ajaxPrefilter("json jsonp",function(b,c,d){var e=b.contentType==="application/x-www-form-urlencoded"&&typeof b.data=="string";if(b.dataTypes[0]==="jsonp"||b.jsonp!==!1&&(ce.test(b.url)||e&&ce.test(b.data))){var g,h=b.jsonpCallback=f.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,i=a[h],j=b.url,k=b.data,l="$1"+h+"$2";b.jsonp!==!1&&(j=j.replace(ce,l),b.url===j&&(e&&(k=k.replace(ce,l)),b.data===k&&(j+=(/\?/.test(j)?"&":"?")+b.jsonp+"="+h))),b.url=j,b.data=k,a[h]=function(a){g=[a]},d.always(function(){a[h]=i,g&&f.isFunction(i)&&a[h](g[0])}),b.converters["script json"]=function(){g||f.error(h+" was not called");return g[0]},b.dataTypes[0]="json";return"script"}}),f.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){f.globalEval(a);return a}}}),f.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),f.ajaxTransport("script",function(a){if(a.crossDomain){var d,e=c.head||c.getElementsByTagName("head")[0]||c.documentElement;return{send:function(f,g){d=c.createElement("script"),d.async="async",a.scriptCharset&&(d.charset=a.scriptCharset),d.src=a.url,d.onload=d.onreadystatechange=function(a,c){if(c||!d.readyState||/loaded|complete/.test(d.readyState))d.onload=d.onreadystatechange=null,e&&d.parentNode&&e.removeChild(d),d=b,c||g(200,"success")},e.insertBefore(d,e.firstChild)},abort:function(){d&&d.onload(0,1)}}}});var cf=a.ActiveXObject?function(){for(var a in ch)ch[a](0,1)}:!1,cg=0,ch;f.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&ci()||cj()}:ci,function(a){f.extend(f.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(f.ajaxSettings.xhr()),f.support.ajax&&f.ajaxTransport(function(c){if(!c.crossDomain||f.support.cors){var d;return{send:function(e,g){var h=c.xhr(),i,j;c.username?h.open(c.type,c.url,c.async,c.username,c.password):h.open(c.type,c.url,c.async);if(c.xhrFields)for(j in c.xhrFields)h[j]=c.xhrFields[j];c.mimeType&&h.overrideMimeType&&h.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(j in e)h.setRequestHeader(j,e[j])}catch(k){}h.send(c.hasContent&&c.data||null),d=function(a,e){var j,k,l,m,n;try{if(d&&(e||h.readyState===4)){d=b,i&&(h.onreadystatechange=f.noop,cf&&delete ch[i]);if(e)h.readyState!==4&&h.abort();else{j=h.status,l=h.getAllResponseHeaders(),m={},n=h.responseXML,n&&n.documentElement&&(m.xml=n),m.text=h.responseText;try{k=h.statusText}catch(o){k=""}!j&&c.isLocal&&!c.crossDomain?j=m.text?200:404:j===1223&&(j=204)}}}catch(p){e||g(-1,p)}m&&g(j,k,m,l)},!c.async||h.readyState===4?d():(i=++cg,cf&&(ch||(ch={},f(a).unload(cf)),ch[i]=d),h.onreadystatechange=d)},abort:function(){d&&d(0,1)}}}});var ck={},cl,cm,cn=/^(?:toggle|show|hide)$/,co=/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,cp,cq=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]],cr;f.fn.extend({show:function(a,b,c){var d,e;if(a||a===0)return this.animate(cu("show",3),a,b,c);for(var g=0,h=this.length;g<h;g++)d=this[g],d.style&&(e=d.style.display,!f._data(d,"olddisplay")&&e==="none"&&(e=d.style.display=""),e===""&&f.css(d,"display")==="none"&&f._data(d,"olddisplay",cv(d.nodeName)));for(g=0;g<h;g++){d=this[g];if(d.style){e=d.style.display;if(e===""||e==="none")d.style.display=f._data(d,"olddisplay")||""}}return this},hide:function(a,b,c){if(a||a===0)return this.animate(cu("hide",3),a,b,c);var d,e,g=0,h=this.length;for(;g<h;g++)d=this[g],d.style&&(e=f.css(d,"display"),e!=="none"&&!f._data(d,"olddisplay")&&f._data(d,"olddisplay",e));for(g=0;g<h;g++)this[g].style&&(this[g].style.display="none");return this},_toggle:f.fn.toggle,toggle:function(a,b,c){var d=typeof a=="boolean";f.isFunction(a)&&f.isFunction(b)?this._toggle.apply(this,arguments):a==null||d?this.each(function(){var b=d?a:f(this).is(":hidden");f(this)[b?"show":"hide"]()}):this.animate(cu("toggle",3),a,b,c);return this},fadeTo:function(a,b,c,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){function g(){e.queue===!1&&f._mark(this);var b=f.extend({},e),c=this.nodeType===1,d=c&&f(this).is(":hidden"),g,h,i,j,k,l,m,n,o;b.animatedProperties={};for(i in a){g=f.camelCase(i),i!==g&&(a[g]=a[i],delete a[i]),h=a[g],f.isArray(h)?(b.animatedProperties[g]=h[1],h=a[g]=h[0]):b.animatedProperties[g]=b.specialEasing&&b.specialEasing[g]||b.easing||"swing";if(h==="hide"&&d||h==="show"&&!d)return b.complete.call(this);c&&(g==="height"||g==="width")&&(b.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY],f.css(this,"display")==="inline"&&f.css(this,"float")==="none"&&(!f.support.inlineBlockNeedsLayout||cv(this.nodeName)==="inline"?this.style.display="inline-block":this.style.zoom=1))}b.overflow!=null&&(this.style.overflow="hidden");for(i in a)j=new f.fx(this,b,i),h=a[i],cn.test(h)?(o=f._data(this,"toggle"+i)||(h==="toggle"?d?"show":"hide":0),o?(f._data(this,"toggle"+i,o==="show"?"hide":"show"),j[o]()):j[h]()):(k=co.exec(h),l=j.cur(),k?(m=parseFloat(k[2]),n=k[3]||(f.cssNumber[i]?"":"px"),n!=="px"&&(f.style(this,i,(m||1)+n),l=(m||1)/j.cur()*l,f.style(this,i,l+n)),k[1]&&(m=(k[1]==="-="?-1:1)*m+l),j.custom(l,m,n)):j.custom(l,h,""));return!0}var e=f.speed(b,c,d);if(f.isEmptyObject(a))return this.each(e.complete,[!1]);a=f.extend({},a);return e.queue===!1?this.each(g):this.queue(e.queue,g)},stop:function(a,c,d){typeof a!="string"&&(d=c,c=a,a=b),c&&a!==!1&&this.queue(a||"fx",[]);return this.each(function(){function h(a,b,c){var e=b[c];f.removeData(a,c,!0),e.stop(d)}var b,c=!1,e=f.timers,g=f._data(this);d||f._unmark(!0,this);if(a==null)for(b in g)g[b]&&g[b].stop&&b.indexOf(".run")===b.length-4&&h(this,g,b);else g[b=a+".run"]&&g[b].stop&&h(this,g,b);for(b=e.length;b--;)e[b].elem===this&&(a==null||e[b].queue===a)&&(d?e[b](!0):e[b].saveState(),c=!0,e.splice(b,1));(!d||!c)&&f.dequeue(this,a)})}}),f.each({slideDown:cu("show",1),slideUp:cu("hide",1),slideToggle:cu("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){f.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),f.extend({speed:function(a,b,c){var d=a&&typeof a=="object"?f.extend({},a):{complete:c||!c&&b||f.isFunction(a)&&a,duration:a,easing:c&&b||b&&!f.isFunction(b)&&b};d.duration=f.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in f.fx.speeds?f.fx.speeds[d.duration]:f.fx.speeds._default;if(d.queue==null||d.queue===!0)d.queue="fx";d.old=d.complete,d.complete=function(a){f.isFunction(d.old)&&d.old.call(this),d.queue?f.dequeue(this,d.queue):a!==!1&&f._unmark(this)};return d},easing:{linear:function(a,b,c,d){return c+d*a},swing:function(a,b,c,d){return(-Math.cos(a*Math.PI)/2+.5)*d+c}},timers:[],fx:function(a,b,c){this.options=b,this.elem=a,this.prop=c,b.orig=b.orig||{}}}),f.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this),(f.fx.step[this.prop]||f.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];var a,b=f.css(this.elem,this.prop);return isNaN(a=parseFloat(b))?!b||b==="auto"?0:b:a},custom:function(a,c,d){function h(a){return e.step(a)}var e=this,g=f.fx;this.startTime=cr||cs(),this.end=c,this.now=this.start=a,this.pos=this.state=0,this.unit=d||this.unit||(f.cssNumber[this.prop]?"":"px"),h.queue=this.options.queue,h.elem=this.elem,h.saveState=function(){e.options.hide&&f._data(e.elem,"fxshow"+e.prop)===b&&f._data(e.elem,"fxshow"+e.prop,e.start)},h()&&f.timers.push(h)&&!cp&&(cp=setInterval(g.tick,g.interval))},show:function(){var a=f._data(this.elem,"fxshow"+this.prop);this.options.orig[this.prop]=a||f.style(this.elem,this.prop),this.options.show=!0,a!==b?this.custom(this.cur(),a):this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur()),f(this.elem).show()},hide:function(){this.options.orig[this.prop]=f._data(this.elem,"fxshow"+this.prop)||f.style(this.elem,this.prop),this.options.hide=!0,this.custom(this.cur(),0)},step:function(a){var b,c,d,e=cr||cs(),g=!0,h=this.elem,i=this.options;if(a||e>=i.duration+this.startTime){this.now=this.end,this.pos=this.state=1,this.update(),i.animatedProperties[this.prop]=!0;for(b in i.animatedProperties)i.animatedProperties[b]!==!0&&(g=!1);if(g){i.overflow!=null&&!f.support.shrinkWrapBlocks&&f.each(["","X","Y"],function(a,b){h.style["overflow"+b]=i.overflow[a]}),i.hide&&f(h).hide();if(i.hide||i.show)for(b in i.animatedProperties)f.style(h,b,i.orig[b]),f.removeData(h,"fxshow"+b,!0),f.removeData(h,"toggle"+b,!0);d=i.complete,d&&(i.complete=!1,d.call(h))}return!1}i.duration==Infinity?this.now=e:(c=e-this.startTime,this.state=c/i.duration,this.pos=f.easing[i.animatedProperties[this.prop]](this.state,c,0,1,i.duration),this.now=this.start+(this.end-this.start)*this.pos),this.update();return!0}},f.extend(f.fx,{tick:function(){var a,b=f.timers,c=0;for(;c<b.length;c++)a=b[c],!a()&&b[c]===a&&b.splice(c--,1);b.length||f.fx.stop()},interval:13,stop:function(){clearInterval(cp),cp=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){f.style(a.elem,"opacity",a.now)},_default:function(a){a.elem.style&&a.elem.style[a.prop]!=null?a.elem.style[a.prop]=a.now+a.unit:a.elem[a.prop]=a.now}}}),f.each(["width","height"],function(a,b){f.fx.step[b]=function(a){f.style(a.elem,b,Math.max(0,a.now)+a.unit)}}),f.expr&&f.expr.filters&&(f.expr.filters.animated=function(a){return f.grep(f.timers,function(b){return a===b.elem}).length});var cw=/^t(?:able|d|h)$/i,cx=/^(?:body|html)$/i;"getBoundingClientRect"in c.documentElement?f.fn.offset=function(a){var b=this[0],c;if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);try{c=b.getBoundingClientRect()}catch(d){}var e=b.ownerDocument,g=e.documentElement;if(!c||!f.contains(g,b))return c?{top:c.top,left:c.left}:{top:0,left:0};var h=e.body,i=cy(e),j=g.clientTop||h.clientTop||0,k=g.clientLeft||h.clientLeft||0,l=i.pageYOffset||f.support.boxModel&&g.scrollTop||h.scrollTop,m=i.pageXOffset||f.support.boxModel&&g.scrollLeft||h.scrollLeft,n=c.top+l-j,o=c.left+m-k;return{top:n,left:o}}:f.fn.offset=function(a){var b=this[0];if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);var c,d=b.offsetParent,e=b,g=b.ownerDocument,h=g.documentElement,i=g.body,j=g.defaultView,k=j?j.getComputedStyle(b,null):b.currentStyle,l=b.offsetTop,m=b.offsetLeft;while((b=b.parentNode)&&b!==i&&b!==h){if(f.support.fixedPosition&&k.position==="fixed")break;c=j?j.getComputedStyle(b,null):b.currentStyle,l-=b.scrollTop,m-=b.scrollLeft,b===d&&(l+=b.offsetTop,m+=b.offsetLeft,f.support.doesNotAddBorder&&(!f.support.doesAddBorderForTableAndCells||!cw.test(b.nodeName))&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),e=d,d=b.offsetParent),f.support.subtractsBorderForOverflowNotVisible&&c.overflow!=="visible"&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),k=c}if(k.position==="relative"||k.position==="static")l+=i.offsetTop,m+=i.offsetLeft;f.support.fixedPosition&&k.position==="fixed"&&(l+=Math.max(h.scrollTop,i.scrollTop),m+=Math.max(h.scrollLeft,i.scrollLeft));return{top:l,left:m}},f.offset={bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;f.support.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(f.css(a,"marginTop"))||0,c+=parseFloat(f.css(a,"marginLeft"))||0);return{top:b,left:c}},setOffset:function(a,b,c){var d=f.css(a,"position");d==="static"&&(a.style.position="relative");var e=f(a),g=e.offset(),h=f.css(a,"top"),i=f.css(a,"left"),j=(d==="absolute"||d==="fixed")&&f.inArray("auto",[h,i])>-1,k={},l={},m,n;j?(l=e.position(),m=l.top,n=l.left):(m=parseFloat(h)||0,n=parseFloat(i)||0),f.isFunction(b)&&(b=b.call(a,c,g)),b.top!=null&&(k.top=b.top-g.top+m),b.left!=null&&(k.left=b.left-g.left+n),"using"in b?b.using.call(a,k):e.css(k)}},f.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),c=this.offset(),d=cx.test(b[0].nodeName)?{top:0,left:0}:b.offset();c.top-=parseFloat(f.css(a,"marginTop"))||0,c.left-=parseFloat(f.css(a,"marginLeft"))||0,d.top+=parseFloat(f.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(f.css(b[0],"borderLeftWidth"))||0;return{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||c.body;while(a&&!cx.test(a.nodeName)&&f.css(a,"position")==="static")a=a.offsetParent;return a})}}),f.each(["Left","Top"],function(a,c){var d="scroll"+c;f.fn[d]=function(c){var e,g;if(c===b){e=this[0];if(!e)return null;g=cy(e);return g?"pageXOffset"in g?g[a?"pageYOffset":"pageXOffset"]:f.support.boxModel&&g.document.documentElement[d]||g.document.body[d]:e[d]}return this.each(function(){g=cy(this),g?g.scrollTo(a?f(g).scrollLeft():c,a?c:f(g).scrollTop()):this[d]=c})}}),f.each(["Height","Width"],function(a,c){var d=c.toLowerCase();f.fn["inner"+c]=function(){var a=this[0];return a?a.style?parseFloat(f.css(a,d,"padding")):this[d]():null},f.fn["outer"+c]=function(a){var b=this[0];return b?b.style?parseFloat(f.css(b,d,a?"margin":"border")):this[d]():null},f.fn[d]=function(a){var e=this[0];if(!e)return a==null?null:this;if(f.isFunction(a))return this.each(function(b){var c=f(this);c[d](a.call(this,b,c[d]()))});if(f.isWindow(e)){var g=e.document.documentElement["client"+c],h=e.document.body;return e.document.compatMode==="CSS1Compat"&&g||h&&h["client"+c]||g}if(e.nodeType===9)return Math.max(e.documentElement["client"+c],e.body["scroll"+c],e.documentElement["scroll"+c],e.body["offset"+c],e.documentElement["offset"+c]);if(a===b){var i=f.css(e,d),j=parseFloat(i);return f.isNumeric(j)?j:i}return this.css(d,typeof a=="string"?a:a+"px")}}),a.jQuery=a.$=f,typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return f})})(window);
/*!
* Note: While Microsoft is not the author of this file, Microsoft is
* offering you a license subject to the terms of the Microsoft Software
* License Terms for Microsoft ASP.NET Model View Controller 3.
* Microsoft reserves all other rights. The notices below are provided
* for informational purposes only and are not the license terms under
* which Microsoft distributed this file.
*
* jQuery UI 1.8.11
*
* Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
*
* http://docs.jquery.com/UI
*/
(function(c,j){function k(a){return!c(a).parents().andSelf().filter(function(){return c.curCSS(this,"visibility")==="hidden"||c.expr.filters.hidden(this)}).length}c.ui=c.ui||{};if(!c.ui.version){c.extend(c.ui,{version:"1.8.11",keyCode:{ALT:18,BACKSPACE:8,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,
NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91}});c.fn.extend({_focus:c.fn.focus,focus:function(a,b){return typeof a==="number"?this.each(function(){var d=this;setTimeout(function(){c(d).focus();b&&b.call(d)},a)}):this._focus.apply(this,arguments)},scrollParent:function(){var a;a=c.browser.msie&&/(static|relative)/.test(this.css("position"))||/absolute/.test(this.css("position"))?this.parents().filter(function(){return/(relative|absolute|fixed)/.test(c.curCSS(this,
"position",1))&&/(auto|scroll)/.test(c.curCSS(this,"overflow",1)+c.curCSS(this,"overflow-y",1)+c.curCSS(this,"overflow-x",1))}).eq(0):this.parents().filter(function(){return/(auto|scroll)/.test(c.curCSS(this,"overflow",1)+c.curCSS(this,"overflow-y",1)+c.curCSS(this,"overflow-x",1))}).eq(0);return/fixed/.test(this.css("position"))||!a.length?c(document):a},zIndex:function(a){if(a!==j)return this.css("zIndex",a);if(this.length){a=c(this[0]);for(var b;a.length&&a[0]!==document;){b=a.css("position");
if(b==="absolute"||b==="relative"||b==="fixed"){b=parseInt(a.css("zIndex"),10);if(!isNaN(b)&&b!==0)return b}a=a.parent()}}return 0},disableSelection:function(){return this.bind((c.support.selectstart?"selectstart":"mousedown")+".ui-disableSelection",function(a){a.preventDefault()})},enableSelection:function(){return this.unbind(".ui-disableSelection")}});c.each(["Width","Height"],function(a,b){function d(f,g,l,m){c.each(e,function(){g-=parseFloat(c.curCSS(f,"padding"+this,true))||0;if(l)g-=parseFloat(c.curCSS(f,
"border"+this+"Width",true))||0;if(m)g-=parseFloat(c.curCSS(f,"margin"+this,true))||0});return g}var e=b==="Width"?["Left","Right"]:["Top","Bottom"],h=b.toLowerCase(),i={innerWidth:c.fn.innerWidth,innerHeight:c.fn.innerHeight,outerWidth:c.fn.outerWidth,outerHeight:c.fn.outerHeight};c.fn["inner"+b]=function(f){if(f===j)return i["inner"+b].call(this);return this.each(function(){c(this).css(h,d(this,f)+"px")})};c.fn["outer"+b]=function(f,g){if(typeof f!=="number")return i["outer"+b].call(this,f);return this.each(function(){c(this).css(h,
d(this,f,true,g)+"px")})}});c.extend(c.expr[":"],{data:function(a,b,d){return!!c.data(a,d[3])},focusable:function(a){var b=a.nodeName.toLowerCase(),d=c.attr(a,"tabindex");if("area"===b){b=a.parentNode;d=b.name;if(!a.href||!d||b.nodeName.toLowerCase()!=="map")return false;a=c("img[usemap=#"+d+"]")[0];return!!a&&k(a)}return(/input|select|textarea|button|object/.test(b)?!a.disabled:"a"==b?a.href||!isNaN(d):!isNaN(d))&&k(a)},tabbable:function(a){var b=c.attr(a,"tabindex");return(isNaN(b)||b>=0)&&c(a).is(":focusable")}});
c(function(){var a=document.body,b=a.appendChild(b=document.createElement("div"));c.extend(b.style,{minHeight:"100px",height:"auto",padding:0,borderWidth:0});c.support.minHeight=b.offsetHeight===100;c.support.selectstart="onselectstart"in b;a.removeChild(b).style.display="none"});c.extend(c.ui,{plugin:{add:function(a,b,d){a=c.ui[a].prototype;for(var e in d){a.plugins[e]=a.plugins[e]||[];a.plugins[e].push([b,d[e]])}},call:function(a,b,d){if((b=a.plugins[b])&&a.element[0].parentNode)for(var e=0;e<b.length;e++)a.options[b[e][0]]&&
b[e][1].apply(a.element,d)}},contains:function(a,b){return document.compareDocumentPosition?a.compareDocumentPosition(b)&16:a!==b&&a.contains(b)},hasScroll:function(a,b){if(c(a).css("overflow")==="hidden")return false;b=b&&b==="left"?"scrollLeft":"scrollTop";var d=false;if(a[b]>0)return true;a[b]=1;d=a[b]>0;a[b]=0;return d},isOverAxis:function(a,b,d){return a>b&&a<b+d},isOver:function(a,b,d,e,h,i){return c.ui.isOverAxis(a,d,h)&&c.ui.isOverAxis(b,e,i)}})}})(jQuery);
; /*!
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Widget 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)\
 *
 * http://docs.jquery.com/UI/Widget
 */
(function(b,j){if(b.cleanData){var k=b.cleanData;b.cleanData=function(a){for(var c=0,d;(d=a[c])!=null;c++)b(d).triggerHandler("remove");k(a)}}else{var l=b.fn.remove;b.fn.remove=function(a,c){return this.each(function(){if(!c)if(!a||b.filter(a,[this]).length)b("*",this).add([this]).each(function(){b(this).triggerHandler("remove")});return l.call(b(this),a,c)})}}b.widget=function(a,c,d){var e=a.split(".")[0],f;a=a.split(".")[1];f=e+"-"+a;if(!d){d=c;c=b.Widget}b.expr[":"][f]=function(h){return!!b.data(h,
a)};b[e]=b[e]||{};b[e][a]=function(h,g){arguments.length&&this._createWidget(h,g)};c=new c;c.options=b.extend(true,{},c.options);b[e][a].prototype=b.extend(true,c,{namespace:e,widgetName:a,widgetEventPrefix:b[e][a].prototype.widgetEventPrefix||a,widgetBaseClass:f},d);b.widget.bridge(a,b[e][a])};b.widget.bridge=function(a,c){b.fn[a]=function(d){var e=typeof d==="string",f=Array.prototype.slice.call(arguments,1),h=this;d=!e&&f.length?b.extend.apply(null,[true,d].concat(f)):d;if(e&&d.charAt(0)==="_")return h;
e?this.each(function(){var g=b.data(this,a),i=g&&b.isFunction(g[d])?g[d].apply(g,f):g;if(i!==g&&i!==j){h=i;return false}}):this.each(function(){var g=b.data(this,a);g?g.option(d||{})._init():b.data(this,a,new c(d,this))});return h}};b.Widget=function(a,c){arguments.length&&this._createWidget(a,c)};b.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",options:{disabled:false},_createWidget:function(a,c){b.data(c,this.widgetName,this);this.element=b(c);this.options=b.extend(true,{},this.options,
this._getCreateOptions(),a);var d=this;this.element.bind("remove."+this.widgetName,function(){d.destroy()});this._create();this._trigger("create");this._init()},_getCreateOptions:function(){return b.metadata&&b.metadata.get(this.element[0])[this.widgetName]},_create:function(){},_init:function(){},destroy:function(){this.element.unbind("."+this.widgetName).removeData(this.widgetName);this.widget().unbind("."+this.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass+"-disabled ui-state-disabled")},
widget:function(){return this.element},option:function(a,c){var d=a;if(arguments.length===0)return b.extend({},this.options);if(typeof a==="string"){if(c===j)return this.options[a];d={};d[a]=c}this._setOptions(d);return this},_setOptions:function(a){var c=this;b.each(a,function(d,e){c._setOption(d,e)});return this},_setOption:function(a,c){this.options[a]=c;if(a==="disabled")this.widget()[c?"addClass":"removeClass"](this.widgetBaseClass+"-disabled ui-state-disabled").attr("aria-disabled",c);return this},
enable:function(){return this._setOption("disabled",false)},disable:function(){return this._setOption("disabled",true)},_trigger:function(a,c,d){var e=this.options[a];c=b.Event(c);c.type=(a===this.widgetEventPrefix?a:this.widgetEventPrefix+a).toLowerCase();d=d||{};if(c.originalEvent){a=b.event.props.length;for(var f;a;){f=b.event.props[--a];c[f]=c.originalEvent[f]}}this.element.trigger(c,d);return!(b.isFunction(e)&&e.call(this.element[0],c,d)===false||c.isDefaultPrevented())}}})(jQuery);
; /*!
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Mouse 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)\
 *
 * http://docs.jquery.com/UI/Mouse
 *
 * Depends:
 *	jquery.ui.widget.js
 */
(function(b){b.widget("ui.mouse",{options:{cancel:":input,option",distance:1,delay:0},_mouseInit:function(){var a=this;this.element.bind("mousedown."+this.widgetName,function(c){return a._mouseDown(c)}).bind("click."+this.widgetName,function(c){if(true===b.data(c.target,a.widgetName+".preventClickEvent")){b.removeData(c.target,a.widgetName+".preventClickEvent");c.stopImmediatePropagation();return false}});this.started=false},_mouseDestroy:function(){this.element.unbind("."+this.widgetName)},_mouseDown:function(a){a.originalEvent=
a.originalEvent||{};if(!a.originalEvent.mouseHandled){this._mouseStarted&&this._mouseUp(a);this._mouseDownEvent=a;var c=this,e=a.which==1,f=typeof this.options.cancel=="string"?b(a.target).parents().add(a.target).filter(this.options.cancel).length:false;if(!e||f||!this._mouseCapture(a))return true;this.mouseDelayMet=!this.options.delay;if(!this.mouseDelayMet)this._mouseDelayTimer=setTimeout(function(){c.mouseDelayMet=true},this.options.delay);if(this._mouseDistanceMet(a)&&this._mouseDelayMet(a)){this._mouseStarted=
this._mouseStart(a)!==false;if(!this._mouseStarted){a.preventDefault();return true}}true===b.data(a.target,this.widgetName+".preventClickEvent")&&b.removeData(a.target,this.widgetName+".preventClickEvent");this._mouseMoveDelegate=function(d){return c._mouseMove(d)};this._mouseUpDelegate=function(d){return c._mouseUp(d)};b(document).bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate);a.preventDefault();return a.originalEvent.mouseHandled=
true}},_mouseMove:function(a){if(b.browser.msie&&!(document.documentMode>=9)&&!a.button)return this._mouseUp(a);if(this._mouseStarted){this._mouseDrag(a);return a.preventDefault()}if(this._mouseDistanceMet(a)&&this._mouseDelayMet(a))(this._mouseStarted=this._mouseStart(this._mouseDownEvent,a)!==false)?this._mouseDrag(a):this._mouseUp(a);return!this._mouseStarted},_mouseUp:function(a){b(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate);
if(this._mouseStarted){this._mouseStarted=false;a.target==this._mouseDownEvent.target&&b.data(a.target,this.widgetName+".preventClickEvent",true);this._mouseStop(a)}return false},_mouseDistanceMet:function(a){return Math.max(Math.abs(this._mouseDownEvent.pageX-a.pageX),Math.abs(this._mouseDownEvent.pageY-a.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return true}})})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Position 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Position
 */
(function(c){c.ui=c.ui||{};var n=/left|center|right/,o=/top|center|bottom/,t=c.fn.position,u=c.fn.offset;c.fn.position=function(b){if(!b||!b.of)return t.apply(this,arguments);b=c.extend({},b);var a=c(b.of),d=a[0],g=(b.collision||"flip").split(" "),e=b.offset?b.offset.split(" "):[0,0],h,k,j;if(d.nodeType===9){h=a.width();k=a.height();j={top:0,left:0}}else if(d.setTimeout){h=a.width();k=a.height();j={top:a.scrollTop(),left:a.scrollLeft()}}else if(d.preventDefault){b.at="left top";h=k=0;j={top:b.of.pageY,
left:b.of.pageX}}else{h=a.outerWidth();k=a.outerHeight();j=a.offset()}c.each(["my","at"],function(){var f=(b[this]||"").split(" ");if(f.length===1)f=n.test(f[0])?f.concat(["center"]):o.test(f[0])?["center"].concat(f):["center","center"];f[0]=n.test(f[0])?f[0]:"center";f[1]=o.test(f[1])?f[1]:"center";b[this]=f});if(g.length===1)g[1]=g[0];e[0]=parseInt(e[0],10)||0;if(e.length===1)e[1]=e[0];e[1]=parseInt(e[1],10)||0;if(b.at[0]==="right")j.left+=h;else if(b.at[0]==="center")j.left+=h/2;if(b.at[1]==="bottom")j.top+=
k;else if(b.at[1]==="center")j.top+=k/2;j.left+=e[0];j.top+=e[1];return this.each(function(){var f=c(this),l=f.outerWidth(),m=f.outerHeight(),p=parseInt(c.curCSS(this,"marginLeft",true))||0,q=parseInt(c.curCSS(this,"marginTop",true))||0,v=l+p+(parseInt(c.curCSS(this,"marginRight",true))||0),w=m+q+(parseInt(c.curCSS(this,"marginBottom",true))||0),i=c.extend({},j),r;if(b.my[0]==="right")i.left-=l;else if(b.my[0]==="center")i.left-=l/2;if(b.my[1]==="bottom")i.top-=m;else if(b.my[1]==="center")i.top-=
m/2;i.left=Math.round(i.left);i.top=Math.round(i.top);r={left:i.left-p,top:i.top-q};c.each(["left","top"],function(s,x){c.ui.position[g[s]]&&c.ui.position[g[s]][x](i,{targetWidth:h,targetHeight:k,elemWidth:l,elemHeight:m,collisionPosition:r,collisionWidth:v,collisionHeight:w,offset:e,my:b.my,at:b.at})});c.fn.bgiframe&&f.bgiframe();f.offset(c.extend(i,{using:b.using}))})};c.ui.position={fit:{left:function(b,a){var d=c(window);d=a.collisionPosition.left+a.collisionWidth-d.width()-d.scrollLeft();b.left=
d>0?b.left-d:Math.max(b.left-a.collisionPosition.left,b.left)},top:function(b,a){var d=c(window);d=a.collisionPosition.top+a.collisionHeight-d.height()-d.scrollTop();b.top=d>0?b.top-d:Math.max(b.top-a.collisionPosition.top,b.top)}},flip:{left:function(b,a){if(a.at[0]!=="center"){var d=c(window);d=a.collisionPosition.left+a.collisionWidth-d.width()-d.scrollLeft();var g=a.my[0]==="left"?-a.elemWidth:a.my[0]==="right"?a.elemWidth:0,e=a.at[0]==="left"?a.targetWidth:-a.targetWidth,h=-2*a.offset[0];b.left+=
a.collisionPosition.left<0?g+e+h:d>0?g+e+h:0}},top:function(b,a){if(a.at[1]!=="center"){var d=c(window);d=a.collisionPosition.top+a.collisionHeight-d.height()-d.scrollTop();var g=a.my[1]==="top"?-a.elemHeight:a.my[1]==="bottom"?a.elemHeight:0,e=a.at[1]==="top"?a.targetHeight:-a.targetHeight,h=-2*a.offset[1];b.top+=a.collisionPosition.top<0?g+e+h:d>0?g+e+h:0}}}};if(!c.offset.setOffset){c.offset.setOffset=function(b,a){if(/static/.test(c.curCSS(b,"position")))b.style.position="relative";var d=c(b),
g=d.offset(),e=parseInt(c.curCSS(b,"top",true),10)||0,h=parseInt(c.curCSS(b,"left",true),10)||0;g={top:a.top-g.top+e,left:a.left-g.left+h};"using"in a?a.using.call(b,g):d.css(g)};c.fn.offset=function(b){var a=this[0];if(!a||!a.ownerDocument)return null;if(b)return this.each(function(){c.offset.setOffset(this,b)});return u.call(this)}}})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Draggable 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Draggables
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function(d){d.widget("ui.draggable",d.ui.mouse,{widgetEventPrefix:"drag",options:{addClasses:true,appendTo:"parent",axis:false,connectToSortable:false,containment:false,cursor:"auto",cursorAt:false,grid:false,handle:false,helper:"original",iframeFix:false,opacity:false,refreshPositions:false,revert:false,revertDuration:500,scope:"default",scroll:true,scrollSensitivity:20,scrollSpeed:20,snap:false,snapMode:"both",snapTolerance:20,stack:false,zIndex:false},_create:function(){if(this.options.helper==
"original"&&!/^(?:r|a|f)/.test(this.element.css("position")))this.element[0].style.position="relative";this.options.addClasses&&this.element.addClass("ui-draggable");this.options.disabled&&this.element.addClass("ui-draggable-disabled");this._mouseInit()},destroy:function(){if(this.element.data("draggable")){this.element.removeData("draggable").unbind(".draggable").removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");this._mouseDestroy();return this}},_mouseCapture:function(a){var b=
this.options;if(this.helper||b.disabled||d(a.target).is(".ui-resizable-handle"))return false;this.handle=this._getHandle(a);if(!this.handle)return false;return true},_mouseStart:function(a){var b=this.options;this.helper=this._createHelper(a);this._cacheHelperProportions();if(d.ui.ddmanager)d.ui.ddmanager.current=this;this._cacheMargins();this.cssPosition=this.helper.css("position");this.scrollParent=this.helper.scrollParent();this.offset=this.positionAbs=this.element.offset();this.offset={top:this.offset.top-
this.margins.top,left:this.offset.left-this.margins.left};d.extend(this.offset,{click:{left:a.pageX-this.offset.left,top:a.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()});this.originalPosition=this.position=this._generatePosition(a);this.originalPageX=a.pageX;this.originalPageY=a.pageY;b.cursorAt&&this._adjustOffsetFromHelper(b.cursorAt);b.containment&&this._setContainment();if(this._trigger("start",a)===false){this._clear();return false}this._cacheHelperProportions();
d.ui.ddmanager&&!b.dropBehaviour&&d.ui.ddmanager.prepareOffsets(this,a);this.helper.addClass("ui-draggable-dragging");this._mouseDrag(a,true);return true},_mouseDrag:function(a,b){this.position=this._generatePosition(a);this.positionAbs=this._convertPositionTo("absolute");if(!b){b=this._uiHash();if(this._trigger("drag",a,b)===false){this._mouseUp({});return false}this.position=b.position}if(!this.options.axis||this.options.axis!="y")this.helper[0].style.left=this.position.left+"px";if(!this.options.axis||
this.options.axis!="x")this.helper[0].style.top=this.position.top+"px";d.ui.ddmanager&&d.ui.ddmanager.drag(this,a);return false},_mouseStop:function(a){var b=false;if(d.ui.ddmanager&&!this.options.dropBehaviour)b=d.ui.ddmanager.drop(this,a);if(this.dropped){b=this.dropped;this.dropped=false}if((!this.element[0]||!this.element[0].parentNode)&&this.options.helper=="original")return false;if(this.options.revert=="invalid"&&!b||this.options.revert=="valid"&&b||this.options.revert===true||d.isFunction(this.options.revert)&&
this.options.revert.call(this.element,b)){var c=this;d(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){c._trigger("stop",a)!==false&&c._clear()})}else this._trigger("stop",a)!==false&&this._clear();return false},cancel:function(){this.helper.is(".ui-draggable-dragging")?this._mouseUp({}):this._clear();return this},_getHandle:function(a){var b=!this.options.handle||!d(this.options.handle,this.element).length?true:false;d(this.options.handle,this.element).find("*").andSelf().each(function(){if(this==
a.target)b=true});return b},_createHelper:function(a){var b=this.options;a=d.isFunction(b.helper)?d(b.helper.apply(this.element[0],[a])):b.helper=="clone"?this.element.clone():this.element;a.parents("body").length||a.appendTo(b.appendTo=="parent"?this.element[0].parentNode:b.appendTo);a[0]!=this.element[0]&&!/(fixed|absolute)/.test(a.css("position"))&&a.css("position","absolute");return a},_adjustOffsetFromHelper:function(a){if(typeof a=="string")a=a.split(" ");if(d.isArray(a))a={left:+a[0],top:+a[1]||
0};if("left"in a)this.offset.click.left=a.left+this.margins.left;if("right"in a)this.offset.click.left=this.helperProportions.width-a.right+this.margins.left;if("top"in a)this.offset.click.top=a.top+this.margins.top;if("bottom"in a)this.offset.click.top=this.helperProportions.height-a.bottom+this.margins.top},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var a=this.offsetParent.offset();if(this.cssPosition=="absolute"&&this.scrollParent[0]!=document&&d.ui.contains(this.scrollParent[0],
this.offsetParent[0])){a.left+=this.scrollParent.scrollLeft();a.top+=this.scrollParent.scrollTop()}if(this.offsetParent[0]==document.body||this.offsetParent[0].tagName&&this.offsetParent[0].tagName.toLowerCase()=="html"&&d.browser.msie)a={top:0,left:0};return{top:a.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:a.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if(this.cssPosition=="relative"){var a=this.element.position();return{top:a.top-
(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:a.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}else return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),
height:this.helper.outerHeight()}},_setContainment:function(){var a=this.options;if(a.containment=="parent")a.containment=this.helper[0].parentNode;if(a.containment=="document"||a.containment=="window")this.containment=[(a.containment=="document"?0:d(window).scrollLeft())-this.offset.relative.left-this.offset.parent.left,(a.containment=="document"?0:d(window).scrollTop())-this.offset.relative.top-this.offset.parent.top,(a.containment=="document"?0:d(window).scrollLeft())+d(a.containment=="document"?
document:window).width()-this.helperProportions.width-this.margins.left,(a.containment=="document"?0:d(window).scrollTop())+(d(a.containment=="document"?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];if(!/^(document|window|parent)$/.test(a.containment)&&a.containment.constructor!=Array){var b=d(a.containment)[0];if(b){a=d(a.containment).offset();var c=d(b).css("overflow")!="hidden";this.containment=[a.left+(parseInt(d(b).css("borderLeftWidth"),
10)||0)+(parseInt(d(b).css("paddingLeft"),10)||0),a.top+(parseInt(d(b).css("borderTopWidth"),10)||0)+(parseInt(d(b).css("paddingTop"),10)||0),a.left+(c?Math.max(b.scrollWidth,b.offsetWidth):b.offsetWidth)-(parseInt(d(b).css("borderLeftWidth"),10)||0)-(parseInt(d(b).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,a.top+(c?Math.max(b.scrollHeight,b.offsetHeight):b.offsetHeight)-(parseInt(d(b).css("borderTopWidth"),10)||0)-(parseInt(d(b).css("paddingBottom"),
10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom]}}else if(a.containment.constructor==Array)this.containment=a.containment},_convertPositionTo:function(a,b){if(!b)b=this.position;a=a=="absolute"?1:-1;var c=this.cssPosition=="absolute"&&!(this.scrollParent[0]!=document&&d.ui.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,f=/(html|body)/i.test(c[0].tagName);return{top:b.top+this.offset.relative.top*a+this.offset.parent.top*a-(d.browser.safari&&
d.browser.version<526&&this.cssPosition=="fixed"?0:(this.cssPosition=="fixed"?-this.scrollParent.scrollTop():f?0:c.scrollTop())*a),left:b.left+this.offset.relative.left*a+this.offset.parent.left*a-(d.browser.safari&&d.browser.version<526&&this.cssPosition=="fixed"?0:(this.cssPosition=="fixed"?-this.scrollParent.scrollLeft():f?0:c.scrollLeft())*a)}},_generatePosition:function(a){var b=this.options,c=this.cssPosition=="absolute"&&!(this.scrollParent[0]!=document&&d.ui.contains(this.scrollParent[0],
this.offsetParent[0]))?this.offsetParent:this.scrollParent,f=/(html|body)/i.test(c[0].tagName),e=a.pageX,g=a.pageY;if(this.originalPosition){if(this.containment){if(a.pageX-this.offset.click.left<this.containment[0])e=this.containment[0]+this.offset.click.left;if(a.pageY-this.offset.click.top<this.containment[1])g=this.containment[1]+this.offset.click.top;if(a.pageX-this.offset.click.left>this.containment[2])e=this.containment[2]+this.offset.click.left;if(a.pageY-this.offset.click.top>this.containment[3])g=
this.containment[3]+this.offset.click.top}if(b.grid){g=this.originalPageY+Math.round((g-this.originalPageY)/b.grid[1])*b.grid[1];g=this.containment?!(g-this.offset.click.top<this.containment[1]||g-this.offset.click.top>this.containment[3])?g:!(g-this.offset.click.top<this.containment[1])?g-b.grid[1]:g+b.grid[1]:g;e=this.originalPageX+Math.round((e-this.originalPageX)/b.grid[0])*b.grid[0];e=this.containment?!(e-this.offset.click.left<this.containment[0]||e-this.offset.click.left>this.containment[2])?
e:!(e-this.offset.click.left<this.containment[0])?e-b.grid[0]:e+b.grid[0]:e}}return{top:g-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+(d.browser.safari&&d.browser.version<526&&this.cssPosition=="fixed"?0:this.cssPosition=="fixed"?-this.scrollParent.scrollTop():f?0:c.scrollTop()),left:e-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+(d.browser.safari&&d.browser.version<526&&this.cssPosition=="fixed"?0:this.cssPosition=="fixed"?-this.scrollParent.scrollLeft():
f?0:c.scrollLeft())}},_clear:function(){this.helper.removeClass("ui-draggable-dragging");this.helper[0]!=this.element[0]&&!this.cancelHelperRemoval&&this.helper.remove();this.helper=null;this.cancelHelperRemoval=false},_trigger:function(a,b,c){c=c||this._uiHash();d.ui.plugin.call(this,a,[b,c]);if(a=="drag")this.positionAbs=this._convertPositionTo("absolute");return d.Widget.prototype._trigger.call(this,a,b,c)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,
offset:this.positionAbs}}});d.extend(d.ui.draggable,{version:"1.8.11"});d.ui.plugin.add("draggable","connectToSortable",{start:function(a,b){var c=d(this).data("draggable"),f=c.options,e=d.extend({},b,{item:c.element});c.sortables=[];d(f.connectToSortable).each(function(){var g=d.data(this,"sortable");if(g&&!g.options.disabled){c.sortables.push({instance:g,shouldRevert:g.options.revert});g.refreshPositions();g._trigger("activate",a,e)}})},stop:function(a,b){var c=d(this).data("draggable"),f=d.extend({},
b,{item:c.element});d.each(c.sortables,function(){if(this.instance.isOver){this.instance.isOver=0;c.cancelHelperRemoval=true;this.instance.cancelHelperRemoval=false;if(this.shouldRevert)this.instance.options.revert=true;this.instance._mouseStop(a);this.instance.options.helper=this.instance.options._helper;c.options.helper=="original"&&this.instance.currentItem.css({top:"auto",left:"auto"})}else{this.instance.cancelHelperRemoval=false;this.instance._trigger("deactivate",a,f)}})},drag:function(a,b){var c=
d(this).data("draggable"),f=this;d.each(c.sortables,function(){this.instance.positionAbs=c.positionAbs;this.instance.helperProportions=c.helperProportions;this.instance.offset.click=c.offset.click;if(this.instance._intersectsWith(this.instance.containerCache)){if(!this.instance.isOver){this.instance.isOver=1;this.instance.currentItem=d(f).clone().appendTo(this.instance.element).data("sortable-item",true);this.instance.options._helper=this.instance.options.helper;this.instance.options.helper=function(){return b.helper[0]};
a.target=this.instance.currentItem[0];this.instance._mouseCapture(a,true);this.instance._mouseStart(a,true,true);this.instance.offset.click.top=c.offset.click.top;this.instance.offset.click.left=c.offset.click.left;this.instance.offset.parent.left-=c.offset.parent.left-this.instance.offset.parent.left;this.instance.offset.parent.top-=c.offset.parent.top-this.instance.offset.parent.top;c._trigger("toSortable",a);c.dropped=this.instance.element;c.currentItem=c.element;this.instance.fromOutside=c}this.instance.currentItem&&
this.instance._mouseDrag(a)}else if(this.instance.isOver){this.instance.isOver=0;this.instance.cancelHelperRemoval=true;this.instance.options.revert=false;this.instance._trigger("out",a,this.instance._uiHash(this.instance));this.instance._mouseStop(a,true);this.instance.options.helper=this.instance.options._helper;this.instance.currentItem.remove();this.instance.placeholder&&this.instance.placeholder.remove();c._trigger("fromSortable",a);c.dropped=false}})}});d.ui.plugin.add("draggable","cursor",
{start:function(){var a=d("body"),b=d(this).data("draggable").options;if(a.css("cursor"))b._cursor=a.css("cursor");a.css("cursor",b.cursor)},stop:function(){var a=d(this).data("draggable").options;a._cursor&&d("body").css("cursor",a._cursor)}});d.ui.plugin.add("draggable","iframeFix",{start:function(){var a=d(this).data("draggable").options;d(a.iframeFix===true?"iframe":a.iframeFix).each(function(){d('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({width:this.offsetWidth+
"px",height:this.offsetHeight+"px",position:"absolute",opacity:"0.001",zIndex:1E3}).css(d(this).offset()).appendTo("body")})},stop:function(){d("div.ui-draggable-iframeFix").each(function(){this.parentNode.removeChild(this)})}});d.ui.plugin.add("draggable","opacity",{start:function(a,b){a=d(b.helper);b=d(this).data("draggable").options;if(a.css("opacity"))b._opacity=a.css("opacity");a.css("opacity",b.opacity)},stop:function(a,b){a=d(this).data("draggable").options;a._opacity&&d(b.helper).css("opacity",
a._opacity)}});d.ui.plugin.add("draggable","scroll",{start:function(){var a=d(this).data("draggable");if(a.scrollParent[0]!=document&&a.scrollParent[0].tagName!="HTML")a.overflowOffset=a.scrollParent.offset()},drag:function(a){var b=d(this).data("draggable"),c=b.options,f=false;if(b.scrollParent[0]!=document&&b.scrollParent[0].tagName!="HTML"){if(!c.axis||c.axis!="x")if(b.overflowOffset.top+b.scrollParent[0].offsetHeight-a.pageY<c.scrollSensitivity)b.scrollParent[0].scrollTop=f=b.scrollParent[0].scrollTop+
c.scrollSpeed;else if(a.pageY-b.overflowOffset.top<c.scrollSensitivity)b.scrollParent[0].scrollTop=f=b.scrollParent[0].scrollTop-c.scrollSpeed;if(!c.axis||c.axis!="y")if(b.overflowOffset.left+b.scrollParent[0].offsetWidth-a.pageX<c.scrollSensitivity)b.scrollParent[0].scrollLeft=f=b.scrollParent[0].scrollLeft+c.scrollSpeed;else if(a.pageX-b.overflowOffset.left<c.scrollSensitivity)b.scrollParent[0].scrollLeft=f=b.scrollParent[0].scrollLeft-c.scrollSpeed}else{if(!c.axis||c.axis!="x")if(a.pageY-d(document).scrollTop()<
c.scrollSensitivity)f=d(document).scrollTop(d(document).scrollTop()-c.scrollSpeed);else if(d(window).height()-(a.pageY-d(document).scrollTop())<c.scrollSensitivity)f=d(document).scrollTop(d(document).scrollTop()+c.scrollSpeed);if(!c.axis||c.axis!="y")if(a.pageX-d(document).scrollLeft()<c.scrollSensitivity)f=d(document).scrollLeft(d(document).scrollLeft()-c.scrollSpeed);else if(d(window).width()-(a.pageX-d(document).scrollLeft())<c.scrollSensitivity)f=d(document).scrollLeft(d(document).scrollLeft()+
c.scrollSpeed)}f!==false&&d.ui.ddmanager&&!c.dropBehaviour&&d.ui.ddmanager.prepareOffsets(b,a)}});d.ui.plugin.add("draggable","snap",{start:function(){var a=d(this).data("draggable"),b=a.options;a.snapElements=[];d(b.snap.constructor!=String?b.snap.items||":data(draggable)":b.snap).each(function(){var c=d(this),f=c.offset();this!=a.element[0]&&a.snapElements.push({item:this,width:c.outerWidth(),height:c.outerHeight(),top:f.top,left:f.left})})},drag:function(a,b){for(var c=d(this).data("draggable"),
f=c.options,e=f.snapTolerance,g=b.offset.left,n=g+c.helperProportions.width,m=b.offset.top,o=m+c.helperProportions.height,h=c.snapElements.length-1;h>=0;h--){var i=c.snapElements[h].left,k=i+c.snapElements[h].width,j=c.snapElements[h].top,l=j+c.snapElements[h].height;if(i-e<g&&g<k+e&&j-e<m&&m<l+e||i-e<g&&g<k+e&&j-e<o&&o<l+e||i-e<n&&n<k+e&&j-e<m&&m<l+e||i-e<n&&n<k+e&&j-e<o&&o<l+e){if(f.snapMode!="inner"){var p=Math.abs(j-o)<=e,q=Math.abs(l-m)<=e,r=Math.abs(i-n)<=e,s=Math.abs(k-g)<=e;if(p)b.position.top=
c._convertPositionTo("relative",{top:j-c.helperProportions.height,left:0}).top-c.margins.top;if(q)b.position.top=c._convertPositionTo("relative",{top:l,left:0}).top-c.margins.top;if(r)b.position.left=c._convertPositionTo("relative",{top:0,left:i-c.helperProportions.width}).left-c.margins.left;if(s)b.position.left=c._convertPositionTo("relative",{top:0,left:k}).left-c.margins.left}var t=p||q||r||s;if(f.snapMode!="outer"){p=Math.abs(j-m)<=e;q=Math.abs(l-o)<=e;r=Math.abs(i-g)<=e;s=Math.abs(k-n)<=e;if(p)b.position.top=
c._convertPositionTo("relative",{top:j,left:0}).top-c.margins.top;if(q)b.position.top=c._convertPositionTo("relative",{top:l-c.helperProportions.height,left:0}).top-c.margins.top;if(r)b.position.left=c._convertPositionTo("relative",{top:0,left:i}).left-c.margins.left;if(s)b.position.left=c._convertPositionTo("relative",{top:0,left:k-c.helperProportions.width}).left-c.margins.left}if(!c.snapElements[h].snapping&&(p||q||r||s||t))c.options.snap.snap&&c.options.snap.snap.call(c.element,a,d.extend(c._uiHash(),
{snapItem:c.snapElements[h].item}));c.snapElements[h].snapping=p||q||r||s||t}else{c.snapElements[h].snapping&&c.options.snap.release&&c.options.snap.release.call(c.element,a,d.extend(c._uiHash(),{snapItem:c.snapElements[h].item}));c.snapElements[h].snapping=false}}}});d.ui.plugin.add("draggable","stack",{start:function(){var a=d(this).data("draggable").options;a=d.makeArray(d(a.stack)).sort(function(c,f){return(parseInt(d(c).css("zIndex"),10)||0)-(parseInt(d(f).css("zIndex"),10)||0)});if(a.length){var b=
parseInt(a[0].style.zIndex)||0;d(a).each(function(c){this.style.zIndex=b+c});this[0].style.zIndex=b+a.length}}});d.ui.plugin.add("draggable","zIndex",{start:function(a,b){a=d(b.helper);b=d(this).data("draggable").options;if(a.css("zIndex"))b._zIndex=a.css("zIndex");a.css("zIndex",b.zIndex)},stop:function(a,b){a=d(this).data("draggable").options;a._zIndex&&d(b.helper).css("zIndex",a._zIndex)}})})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Droppable 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Droppables
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 *	jquery.ui.mouse.js
 *	jquery.ui.draggable.js
 */
(function(d){d.widget("ui.droppable",{widgetEventPrefix:"drop",options:{accept:"*",activeClass:false,addClasses:true,greedy:false,hoverClass:false,scope:"default",tolerance:"intersect"},_create:function(){var a=this.options,b=a.accept;this.isover=0;this.isout=1;this.accept=d.isFunction(b)?b:function(c){return c.is(b)};this.proportions={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight};d.ui.ddmanager.droppables[a.scope]=d.ui.ddmanager.droppables[a.scope]||[];d.ui.ddmanager.droppables[a.scope].push(this);
a.addClasses&&this.element.addClass("ui-droppable")},destroy:function(){for(var a=d.ui.ddmanager.droppables[this.options.scope],b=0;b<a.length;b++)a[b]==this&&a.splice(b,1);this.element.removeClass("ui-droppable ui-droppable-disabled").removeData("droppable").unbind(".droppable");return this},_setOption:function(a,b){if(a=="accept")this.accept=d.isFunction(b)?b:function(c){return c.is(b)};d.Widget.prototype._setOption.apply(this,arguments)},_activate:function(a){var b=d.ui.ddmanager.current;this.options.activeClass&&
this.element.addClass(this.options.activeClass);b&&this._trigger("activate",a,this.ui(b))},_deactivate:function(a){var b=d.ui.ddmanager.current;this.options.activeClass&&this.element.removeClass(this.options.activeClass);b&&this._trigger("deactivate",a,this.ui(b))},_over:function(a){var b=d.ui.ddmanager.current;if(!(!b||(b.currentItem||b.element)[0]==this.element[0]))if(this.accept.call(this.element[0],b.currentItem||b.element)){this.options.hoverClass&&this.element.addClass(this.options.hoverClass);
this._trigger("over",a,this.ui(b))}},_out:function(a){var b=d.ui.ddmanager.current;if(!(!b||(b.currentItem||b.element)[0]==this.element[0]))if(this.accept.call(this.element[0],b.currentItem||b.element)){this.options.hoverClass&&this.element.removeClass(this.options.hoverClass);this._trigger("out",a,this.ui(b))}},_drop:function(a,b){var c=b||d.ui.ddmanager.current;if(!c||(c.currentItem||c.element)[0]==this.element[0])return false;var e=false;this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function(){var g=
d.data(this,"droppable");if(g.options.greedy&&!g.options.disabled&&g.options.scope==c.options.scope&&g.accept.call(g.element[0],c.currentItem||c.element)&&d.ui.intersect(c,d.extend(g,{offset:g.element.offset()}),g.options.tolerance)){e=true;return false}});if(e)return false;if(this.accept.call(this.element[0],c.currentItem||c.element)){this.options.activeClass&&this.element.removeClass(this.options.activeClass);this.options.hoverClass&&this.element.removeClass(this.options.hoverClass);this._trigger("drop",
a,this.ui(c));return this.element}return false},ui:function(a){return{draggable:a.currentItem||a.element,helper:a.helper,position:a.position,offset:a.positionAbs}}});d.extend(d.ui.droppable,{version:"1.8.11"});d.ui.intersect=function(a,b,c){if(!b.offset)return false;var e=(a.positionAbs||a.position.absolute).left,g=e+a.helperProportions.width,f=(a.positionAbs||a.position.absolute).top,h=f+a.helperProportions.height,i=b.offset.left,k=i+b.proportions.width,j=b.offset.top,l=j+b.proportions.height;
switch(c){case "fit":return i<=e&&g<=k&&j<=f&&h<=l;case "intersect":return i<e+a.helperProportions.width/2&&g-a.helperProportions.width/2<k&&j<f+a.helperProportions.height/2&&h-a.helperProportions.height/2<l;case "pointer":return d.ui.isOver((a.positionAbs||a.position.absolute).top+(a.clickOffset||a.offset.click).top,(a.positionAbs||a.position.absolute).left+(a.clickOffset||a.offset.click).left,j,i,b.proportions.height,b.proportions.width);case "touch":return(f>=j&&f<=l||h>=j&&h<=l||f<j&&h>l)&&(e>=
i&&e<=k||g>=i&&g<=k||e<i&&g>k);default:return false}};d.ui.ddmanager={current:null,droppables:{"default":[]},prepareOffsets:function(a,b){var c=d.ui.ddmanager.droppables[a.options.scope]||[],e=b?b.type:null,g=(a.currentItem||a.element).find(":data(droppable)").andSelf(),f=0;a:for(;f<c.length;f++)if(!(c[f].options.disabled||a&&!c[f].accept.call(c[f].element[0],a.currentItem||a.element))){for(var h=0;h<g.length;h++)if(g[h]==c[f].element[0]){c[f].proportions.height=0;continue a}c[f].visible=c[f].element.css("display")!=
"none";if(c[f].visible){e=="mousedown"&&c[f]._activate.call(c[f],b);c[f].offset=c[f].element.offset();c[f].proportions={width:c[f].element[0].offsetWidth,height:c[f].element[0].offsetHeight}}}},drop:function(a,b){var c=false;d.each(d.ui.ddmanager.droppables[a.options.scope]||[],function(){if(this.options){if(!this.options.disabled&&this.visible&&d.ui.intersect(a,this,this.options.tolerance))c=c||this._drop.call(this,b);if(!this.options.disabled&&this.visible&&this.accept.call(this.element[0],a.currentItem||
a.element)){this.isout=1;this.isover=0;this._deactivate.call(this,b)}}});return c},drag:function(a,b){a.options.refreshPositions&&d.ui.ddmanager.prepareOffsets(a,b);d.each(d.ui.ddmanager.droppables[a.options.scope]||[],function(){if(!(this.options.disabled||this.greedyChild||!this.visible)){var c=d.ui.intersect(a,this,this.options.tolerance);if(c=!c&&this.isover==1?"isout":c&&this.isover==0?"isover":null){var e;if(this.options.greedy){var g=this.element.parents(":data(droppable):eq(0)");if(g.length){e=
d.data(g[0],"droppable");e.greedyChild=c=="isover"?1:0}}if(e&&c=="isover"){e.isover=0;e.isout=1;e._out.call(e,b)}this[c]=1;this[c=="isout"?"isover":"isout"]=0;this[c=="isover"?"_over":"_out"].call(this,b);if(e&&c=="isout"){e.isout=0;e.isover=1;e._over.call(e,b)}}}})}}})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Resizable 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Resizables
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function(e){e.widget("ui.resizable",e.ui.mouse,{widgetEventPrefix:"resize",options:{alsoResize:false,animate:false,animateDuration:"slow",animateEasing:"swing",aspectRatio:false,autoHide:false,containment:false,ghost:false,grid:false,handles:"e,s,se",helper:false,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:1E3},_create:function(){var b=this,a=this.options;this.element.addClass("ui-resizable");e.extend(this,{_aspectRatio:!!a.aspectRatio,aspectRatio:a.aspectRatio,originalElement:this.element,
_proportionallyResizeElements:[],_helper:a.helper||a.ghost||a.animate?a.helper||"ui-resizable-helper":null});if(this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)){/relative/.test(this.element.css("position"))&&e.browser.opera&&this.element.css({position:"relative",top:"auto",left:"auto"});this.element.wrap(e('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),
top:this.element.css("top"),left:this.element.css("left")}));this.element=this.element.parent().data("resizable",this.element.data("resizable"));this.elementIsWrapper=true;this.element.css({marginLeft:this.originalElement.css("marginLeft"),marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom")});this.originalElement.css({marginLeft:0,marginTop:0,marginRight:0,marginBottom:0});this.originalResizeStyle=
this.originalElement.css("resize");this.originalElement.css("resize","none");this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"}));this.originalElement.css({margin:this.originalElement.css("margin")});this._proportionallyResize()}this.handles=a.handles||(!e(".ui-resizable-handle",this.element).length?"e,s,se":{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",
nw:".ui-resizable-nw"});if(this.handles.constructor==String){if(this.handles=="all")this.handles="n,e,s,w,se,sw,ne,nw";var c=this.handles.split(",");this.handles={};for(var d=0;d<c.length;d++){var f=e.trim(c[d]),g=e('<div class="ui-resizable-handle '+("ui-resizable-"+f)+'"></div>');/sw|se|ne|nw/.test(f)&&g.css({zIndex:++a.zIndex});"se"==f&&g.addClass("ui-icon ui-icon-gripsmall-diagonal-se");this.handles[f]=".ui-resizable-"+f;this.element.append(g)}}this._renderAxis=function(h){h=h||this.element;for(var i in this.handles){if(this.handles[i].constructor==
String)this.handles[i]=e(this.handles[i],this.element).show();if(this.elementIsWrapper&&this.originalElement[0].nodeName.match(/textarea|input|select|button/i)){var j=e(this.handles[i],this.element),k=0;k=/sw|ne|nw|se|n|s/.test(i)?j.outerHeight():j.outerWidth();j=["padding",/ne|nw|n/.test(i)?"Top":/se|sw|s/.test(i)?"Bottom":/^e$/.test(i)?"Right":"Left"].join("");h.css(j,k);this._proportionallyResize()}e(this.handles[i])}};this._renderAxis(this.element);this._handles=e(".ui-resizable-handle",this.element).disableSelection();
this._handles.mouseover(function(){if(!b.resizing){if(this.className)var h=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);b.axis=h&&h[1]?h[1]:"se"}});if(a.autoHide){this._handles.hide();e(this.element).addClass("ui-resizable-autohide").hover(function(){e(this).removeClass("ui-resizable-autohide");b._handles.show()},function(){if(!b.resizing){e(this).addClass("ui-resizable-autohide");b._handles.hide()}})}this._mouseInit()},destroy:function(){this._mouseDestroy();var b=function(c){e(c).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").unbind(".resizable").find(".ui-resizable-handle").remove()};
if(this.elementIsWrapper){b(this.element);var a=this.element;a.after(this.originalElement.css({position:a.css("position"),width:a.outerWidth(),height:a.outerHeight(),top:a.css("top"),left:a.css("left")})).remove()}this.originalElement.css("resize",this.originalResizeStyle);b(this.originalElement);return this},_mouseCapture:function(b){var a=false;for(var c in this.handles)if(e(this.handles[c])[0]==b.target)a=true;return!this.options.disabled&&a},_mouseStart:function(b){var a=this.options,c=this.element.position(),
d=this.element;this.resizing=true;this.documentScroll={top:e(document).scrollTop(),left:e(document).scrollLeft()};if(d.is(".ui-draggable")||/absolute/.test(d.css("position")))d.css({position:"absolute",top:c.top,left:c.left});e.browser.opera&&/relative/.test(d.css("position"))&&d.css({position:"relative",top:"auto",left:"auto"});this._renderProxy();c=m(this.helper.css("left"));var f=m(this.helper.css("top"));if(a.containment){c+=e(a.containment).scrollLeft()||0;f+=e(a.containment).scrollTop()||0}this.offset=
this.helper.offset();this.position={left:c,top:f};this.size=this._helper?{width:d.outerWidth(),height:d.outerHeight()}:{width:d.width(),height:d.height()};this.originalSize=this._helper?{width:d.outerWidth(),height:d.outerHeight()}:{width:d.width(),height:d.height()};this.originalPosition={left:c,top:f};this.sizeDiff={width:d.outerWidth()-d.width(),height:d.outerHeight()-d.height()};this.originalMousePosition={left:b.pageX,top:b.pageY};this.aspectRatio=typeof a.aspectRatio=="number"?a.aspectRatio:
this.originalSize.width/this.originalSize.height||1;a=e(".ui-resizable-"+this.axis).css("cursor");e("body").css("cursor",a=="auto"?this.axis+"-resize":a);d.addClass("ui-resizable-resizing");this._propagate("start",b);return true},_mouseDrag:function(b){var a=this.helper,c=this.originalMousePosition,d=this._change[this.axis];if(!d)return false;c=d.apply(this,[b,b.pageX-c.left||0,b.pageY-c.top||0]);if(this._aspectRatio||b.shiftKey)c=this._updateRatio(c,b);c=this._respectSize(c,b);this._propagate("resize",
b);a.css({top:this.position.top+"px",left:this.position.left+"px",width:this.size.width+"px",height:this.size.height+"px"});!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize();this._updateCache(c);this._trigger("resize",b,this.ui());return false},_mouseStop:function(b){this.resizing=false;var a=this.options,c=this;if(this._helper){var d=this._proportionallyResizeElements,f=d.length&&/textarea/i.test(d[0].nodeName);d=f&&e.ui.hasScroll(d[0],"left")?0:c.sizeDiff.height;
f=f?0:c.sizeDiff.width;f={width:c.helper.width()-f,height:c.helper.height()-d};d=parseInt(c.element.css("left"),10)+(c.position.left-c.originalPosition.left)||null;var g=parseInt(c.element.css("top"),10)+(c.position.top-c.originalPosition.top)||null;a.animate||this.element.css(e.extend(f,{top:g,left:d}));c.helper.height(c.size.height);c.helper.width(c.size.width);this._helper&&!a.animate&&this._proportionallyResize()}e("body").css("cursor","auto");this.element.removeClass("ui-resizable-resizing");
this._propagate("stop",b);this._helper&&this.helper.remove();return false},_updateCache:function(b){this.offset=this.helper.offset();if(l(b.left))this.position.left=b.left;if(l(b.top))this.position.top=b.top;if(l(b.height))this.size.height=b.height;if(l(b.width))this.size.width=b.width},_updateRatio:function(b){var a=this.position,c=this.size,d=this.axis;if(b.height)b.width=c.height*this.aspectRatio;else if(b.width)b.height=c.width/this.aspectRatio;if(d=="sw"){b.left=a.left+(c.width-b.width);b.top=
null}if(d=="nw"){b.top=a.top+(c.height-b.height);b.left=a.left+(c.width-b.width)}return b},_respectSize:function(b){var a=this.options,c=this.axis,d=l(b.width)&&a.maxWidth&&a.maxWidth<b.width,f=l(b.height)&&a.maxHeight&&a.maxHeight<b.height,g=l(b.width)&&a.minWidth&&a.minWidth>b.width,h=l(b.height)&&a.minHeight&&a.minHeight>b.height;if(g)b.width=a.minWidth;if(h)b.height=a.minHeight;if(d)b.width=a.maxWidth;if(f)b.height=a.maxHeight;var i=this.originalPosition.left+this.originalSize.width,j=this.position.top+
this.size.height,k=/sw|nw|w/.test(c);c=/nw|ne|n/.test(c);if(g&&k)b.left=i-a.minWidth;if(d&&k)b.left=i-a.maxWidth;if(h&&c)b.top=j-a.minHeight;if(f&&c)b.top=j-a.maxHeight;if((a=!b.width&&!b.height)&&!b.left&&b.top)b.top=null;else if(a&&!b.top&&b.left)b.left=null;return b},_proportionallyResize:function(){if(this._proportionallyResizeElements.length)for(var b=this.helper||this.element,a=0;a<this._proportionallyResizeElements.length;a++){var c=this._proportionallyResizeElements[a];if(!this.borderDif){var d=
[c.css("borderTopWidth"),c.css("borderRightWidth"),c.css("borderBottomWidth"),c.css("borderLeftWidth")],f=[c.css("paddingTop"),c.css("paddingRight"),c.css("paddingBottom"),c.css("paddingLeft")];this.borderDif=e.map(d,function(g,h){g=parseInt(g,10)||0;h=parseInt(f[h],10)||0;return g+h})}e.browser.msie&&(e(b).is(":hidden")||e(b).parents(":hidden").length)||c.css({height:b.height()-this.borderDif[0]-this.borderDif[2]||0,width:b.width()-this.borderDif[1]-this.borderDif[3]||0})}},_renderProxy:function(){var b=
this.options;this.elementOffset=this.element.offset();if(this._helper){this.helper=this.helper||e('<div style="overflow:hidden;"></div>');var a=e.browser.msie&&e.browser.version<7,c=a?1:0;a=a?2:-1;this.helper.addClass(this._helper).css({width:this.element.outerWidth()+a,height:this.element.outerHeight()+a,position:"absolute",left:this.elementOffset.left-c+"px",top:this.elementOffset.top-c+"px",zIndex:++b.zIndex});this.helper.appendTo("body").disableSelection()}else this.helper=this.element},_change:{e:function(b,
a){return{width:this.originalSize.width+a}},w:function(b,a){return{left:this.originalPosition.left+a,width:this.originalSize.width-a}},n:function(b,a,c){return{top:this.originalPosition.top+c,height:this.originalSize.height-c}},s:function(b,a,c){return{height:this.originalSize.height+c}},se:function(b,a,c){return e.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[b,a,c]))},sw:function(b,a,c){return e.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[b,a,
c]))},ne:function(b,a,c){return e.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[b,a,c]))},nw:function(b,a,c){return e.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[b,a,c]))}},_propagate:function(b,a){e.ui.plugin.call(this,b,[a,this.ui()]);b!="resize"&&this._trigger(b,a,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,
originalPosition:this.originalPosition}}});e.extend(e.ui.resizable,{version:"1.8.11"});e.ui.plugin.add("resizable","alsoResize",{start:function(){var b=e(this).data("resizable").options,a=function(c){e(c).each(function(){var d=e(this);d.data("resizable-alsoresize",{width:parseInt(d.width(),10),height:parseInt(d.height(),10),left:parseInt(d.css("left"),10),top:parseInt(d.css("top"),10),position:d.css("position")})})};if(typeof b.alsoResize=="object"&&!b.alsoResize.parentNode)if(b.alsoResize.length){b.alsoResize=
b.alsoResize[0];a(b.alsoResize)}else e.each(b.alsoResize,function(c){a(c)});else a(b.alsoResize)},resize:function(b,a){var c=e(this).data("resizable");b=c.options;var d=c.originalSize,f=c.originalPosition,g={height:c.size.height-d.height||0,width:c.size.width-d.width||0,top:c.position.top-f.top||0,left:c.position.left-f.left||0},h=function(i,j){e(i).each(function(){var k=e(this),q=e(this).data("resizable-alsoresize"),p={},r=j&&j.length?j:k.parents(a.originalElement[0]).length?["width","height"]:["width",
"height","top","left"];e.each(r,function(n,o){if((n=(q[o]||0)+(g[o]||0))&&n>=0)p[o]=n||null});if(e.browser.opera&&/relative/.test(k.css("position"))){c._revertToRelativePosition=true;k.css({position:"absolute",top:"auto",left:"auto"})}k.css(p)})};typeof b.alsoResize=="object"&&!b.alsoResize.nodeType?e.each(b.alsoResize,function(i,j){h(i,j)}):h(b.alsoResize)},stop:function(){var b=e(this).data("resizable"),a=b.options,c=function(d){e(d).each(function(){var f=e(this);f.css({position:f.data("resizable-alsoresize").position})})};
if(b._revertToRelativePosition){b._revertToRelativePosition=false;typeof a.alsoResize=="object"&&!a.alsoResize.nodeType?e.each(a.alsoResize,function(d){c(d)}):c(a.alsoResize)}e(this).removeData("resizable-alsoresize")}});e.ui.plugin.add("resizable","animate",{stop:function(b){var a=e(this).data("resizable"),c=a.options,d=a._proportionallyResizeElements,f=d.length&&/textarea/i.test(d[0].nodeName),g=f&&e.ui.hasScroll(d[0],"left")?0:a.sizeDiff.height;f={width:a.size.width-(f?0:a.sizeDiff.width),height:a.size.height-
g};g=parseInt(a.element.css("left"),10)+(a.position.left-a.originalPosition.left)||null;var h=parseInt(a.element.css("top"),10)+(a.position.top-a.originalPosition.top)||null;a.element.animate(e.extend(f,h&&g?{top:h,left:g}:{}),{duration:c.animateDuration,easing:c.animateEasing,step:function(){var i={width:parseInt(a.element.css("width"),10),height:parseInt(a.element.css("height"),10),top:parseInt(a.element.css("top"),10),left:parseInt(a.element.css("left"),10)};d&&d.length&&e(d[0]).css({width:i.width,
height:i.height});a._updateCache(i);a._propagate("resize",b)}})}});e.ui.plugin.add("resizable","containment",{start:function(){var b=e(this).data("resizable"),a=b.element,c=b.options.containment;if(a=c instanceof e?c.get(0):/parent/.test(c)?a.parent().get(0):c){b.containerElement=e(a);if(/document/.test(c)||c==document){b.containerOffset={left:0,top:0};b.containerPosition={left:0,top:0};b.parentData={element:e(document),left:0,top:0,width:e(document).width(),height:e(document).height()||document.body.parentNode.scrollHeight}}else{var d=
e(a),f=[];e(["Top","Right","Left","Bottom"]).each(function(i,j){f[i]=m(d.css("padding"+j))});b.containerOffset=d.offset();b.containerPosition=d.position();b.containerSize={height:d.innerHeight()-f[3],width:d.innerWidth()-f[1]};c=b.containerOffset;var g=b.containerSize.height,h=b.containerSize.width;h=e.ui.hasScroll(a,"left")?a.scrollWidth:h;g=e.ui.hasScroll(a)?a.scrollHeight:g;b.parentData={element:a,left:c.left,top:c.top,width:h,height:g}}}},resize:function(b){var a=e(this).data("resizable"),c=a.options,
d=a.containerOffset,f=a.position;b=a._aspectRatio||b.shiftKey;var g={top:0,left:0},h=a.containerElement;if(h[0]!=document&&/static/.test(h.css("position")))g=d;if(f.left<(a._helper?d.left:0)){a.size.width+=a._helper?a.position.left-d.left:a.position.left-g.left;if(b)a.size.height=a.size.width/c.aspectRatio;a.position.left=c.helper?d.left:0}if(f.top<(a._helper?d.top:0)){a.size.height+=a._helper?a.position.top-d.top:a.position.top;if(b)a.size.width=a.size.height*c.aspectRatio;a.position.top=a._helper?
d.top:0}a.offset.left=a.parentData.left+a.position.left;a.offset.top=a.parentData.top+a.position.top;c=Math.abs((a._helper?a.offset.left-g.left:a.offset.left-g.left)+a.sizeDiff.width);d=Math.abs((a._helper?a.offset.top-g.top:a.offset.top-d.top)+a.sizeDiff.height);f=a.containerElement.get(0)==a.element.parent().get(0);g=/relative|absolute/.test(a.containerElement.css("position"));if(f&&g)c-=a.parentData.left;if(c+a.size.width>=a.parentData.width){a.size.width=a.parentData.width-c;if(b)a.size.height=
a.size.width/a.aspectRatio}if(d+a.size.height>=a.parentData.height){a.size.height=a.parentData.height-d;if(b)a.size.width=a.size.height*a.aspectRatio}},stop:function(){var b=e(this).data("resizable"),a=b.options,c=b.containerOffset,d=b.containerPosition,f=b.containerElement,g=e(b.helper),h=g.offset(),i=g.outerWidth()-b.sizeDiff.width;g=g.outerHeight()-b.sizeDiff.height;b._helper&&!a.animate&&/relative/.test(f.css("position"))&&e(this).css({left:h.left-d.left-c.left,width:i,height:g});b._helper&&!a.animate&&
/static/.test(f.css("position"))&&e(this).css({left:h.left-d.left-c.left,width:i,height:g})}});e.ui.plugin.add("resizable","ghost",{start:function(){var b=e(this).data("resizable"),a=b.options,c=b.size;b.ghost=b.originalElement.clone();b.ghost.css({opacity:0.25,display:"block",position:"relative",height:c.height,width:c.width,margin:0,left:0,top:0}).addClass("ui-resizable-ghost").addClass(typeof a.ghost=="string"?a.ghost:"");b.ghost.appendTo(b.helper)},resize:function(){var b=e(this).data("resizable");
b.ghost&&b.ghost.css({position:"relative",height:b.size.height,width:b.size.width})},stop:function(){var b=e(this).data("resizable");b.ghost&&b.helper&&b.helper.get(0).removeChild(b.ghost.get(0))}});e.ui.plugin.add("resizable","grid",{resize:function(){var b=e(this).data("resizable"),a=b.options,c=b.size,d=b.originalSize,f=b.originalPosition,g=b.axis;a.grid=typeof a.grid=="number"?[a.grid,a.grid]:a.grid;var h=Math.round((c.width-d.width)/(a.grid[0]||1))*(a.grid[0]||1);a=Math.round((c.height-d.height)/
(a.grid[1]||1))*(a.grid[1]||1);if(/^(se|s|e)$/.test(g)){b.size.width=d.width+h;b.size.height=d.height+a}else if(/^(ne)$/.test(g)){b.size.width=d.width+h;b.size.height=d.height+a;b.position.top=f.top-a}else{if(/^(sw)$/.test(g)){b.size.width=d.width+h;b.size.height=d.height+a}else{b.size.width=d.width+h;b.size.height=d.height+a;b.position.top=f.top-a}b.position.left=f.left-h}}});var m=function(b){return parseInt(b,10)||0},l=function(b){return!isNaN(parseInt(b,10))}})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Selectable 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Selectables
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function(e){e.widget("ui.selectable",e.ui.mouse,{options:{appendTo:"body",autoRefresh:true,distance:0,filter:"*",tolerance:"touch"},_create:function(){var c=this;this.element.addClass("ui-selectable");this.dragged=false;var f;this.refresh=function(){f=e(c.options.filter,c.element[0]);f.each(function(){var d=e(this),b=d.offset();e.data(this,"selectable-item",{element:this,$element:d,left:b.left,top:b.top,right:b.left+d.outerWidth(),bottom:b.top+d.outerHeight(),startselected:false,selected:d.hasClass("ui-selected"),
selecting:d.hasClass("ui-selecting"),unselecting:d.hasClass("ui-unselecting")})})};this.refresh();this.selectees=f.addClass("ui-selectee");this._mouseInit();this.helper=e("<div class='ui-selectable-helper'></div>")},destroy:function(){this.selectees.removeClass("ui-selectee").removeData("selectable-item");this.element.removeClass("ui-selectable ui-selectable-disabled").removeData("selectable").unbind(".selectable");this._mouseDestroy();return this},_mouseStart:function(c){var f=this;this.opos=[c.pageX,
c.pageY];if(!this.options.disabled){var d=this.options;this.selectees=e(d.filter,this.element[0]);this._trigger("start",c);e(d.appendTo).append(this.helper);this.helper.css({left:c.clientX,top:c.clientY,width:0,height:0});d.autoRefresh&&this.refresh();this.selectees.filter(".ui-selected").each(function(){var b=e.data(this,"selectable-item");b.startselected=true;if(!c.metaKey){b.$element.removeClass("ui-selected");b.selected=false;b.$element.addClass("ui-unselecting");b.unselecting=true;f._trigger("unselecting",
c,{unselecting:b.element})}});e(c.target).parents().andSelf().each(function(){var b=e.data(this,"selectable-item");if(b){var g=!c.metaKey||!b.$element.hasClass("ui-selected");b.$element.removeClass(g?"ui-unselecting":"ui-selected").addClass(g?"ui-selecting":"ui-unselecting");b.unselecting=!g;b.selecting=g;(b.selected=g)?f._trigger("selecting",c,{selecting:b.element}):f._trigger("unselecting",c,{unselecting:b.element});return false}})}},_mouseDrag:function(c){var f=this;this.dragged=true;if(!this.options.disabled){var d=
this.options,b=this.opos[0],g=this.opos[1],h=c.pageX,i=c.pageY;if(b>h){var j=h;h=b;b=j}if(g>i){j=i;i=g;g=j}this.helper.css({left:b,top:g,width:h-b,height:i-g});this.selectees.each(function(){var a=e.data(this,"selectable-item");if(!(!a||a.element==f.element[0])){var k=false;if(d.tolerance=="touch")k=!(a.left>h||a.right<b||a.top>i||a.bottom<g);else if(d.tolerance=="fit")k=a.left>b&&a.right<h&&a.top>g&&a.bottom<i;if(k){if(a.selected){a.$element.removeClass("ui-selected");a.selected=false}if(a.unselecting){a.$element.removeClass("ui-unselecting");
a.unselecting=false}if(!a.selecting){a.$element.addClass("ui-selecting");a.selecting=true;f._trigger("selecting",c,{selecting:a.element})}}else{if(a.selecting)if(c.metaKey&&a.startselected){a.$element.removeClass("ui-selecting");a.selecting=false;a.$element.addClass("ui-selected");a.selected=true}else{a.$element.removeClass("ui-selecting");a.selecting=false;if(a.startselected){a.$element.addClass("ui-unselecting");a.unselecting=true}f._trigger("unselecting",c,{unselecting:a.element})}if(a.selected)if(!c.metaKey&&
!a.startselected){a.$element.removeClass("ui-selected");a.selected=false;a.$element.addClass("ui-unselecting");a.unselecting=true;f._trigger("unselecting",c,{unselecting:a.element})}}}});return false}},_mouseStop:function(c){var f=this;this.dragged=false;e(".ui-unselecting",this.element[0]).each(function(){var d=e.data(this,"selectable-item");d.$element.removeClass("ui-unselecting");d.unselecting=false;d.startselected=false;f._trigger("unselected",c,{unselected:d.element})});e(".ui-selecting",this.element[0]).each(function(){var d=
e.data(this,"selectable-item");d.$element.removeClass("ui-selecting").addClass("ui-selected");d.selecting=false;d.selected=true;d.startselected=true;f._trigger("selected",c,{selected:d.element})});this._trigger("stop",c);this.helper.remove();return false}});e.extend(e.ui.selectable,{version:"1.8.11"})})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Sortable 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Sortables
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function(d){d.widget("ui.sortable",d.ui.mouse,{widgetEventPrefix:"sort",options:{appendTo:"parent",axis:false,connectWith:false,containment:false,cursor:"auto",cursorAt:false,dropOnEmpty:true,forcePlaceholderSize:false,forceHelperSize:false,grid:false,handle:false,helper:"original",items:"> *",opacity:false,placeholder:false,revert:false,scroll:true,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1E3},_create:function(){this.containerCache={};this.element.addClass("ui-sortable");
this.refresh();this.floating=this.items.length?/left|right/.test(this.items[0].item.css("float"))||/inline|table-cell/.test(this.items[0].item.css("display")):false;this.offset=this.element.offset();this._mouseInit()},destroy:function(){this.element.removeClass("ui-sortable ui-sortable-disabled").removeData("sortable").unbind(".sortable");this._mouseDestroy();for(var a=this.items.length-1;a>=0;a--)this.items[a].item.removeData("sortable-item");return this},_setOption:function(a,b){if(a==="disabled"){this.options[a]=
b;this.widget()[b?"addClass":"removeClass"]("ui-sortable-disabled")}else d.Widget.prototype._setOption.apply(this,arguments)},_mouseCapture:function(a,b){if(this.reverting)return false;if(this.options.disabled||this.options.type=="static")return false;this._refreshItems(a);var c=null,e=this;d(a.target).parents().each(function(){if(d.data(this,"sortable-item")==e){c=d(this);return false}});if(d.data(a.target,"sortable-item")==e)c=d(a.target);if(!c)return false;if(this.options.handle&&!b){var f=false;
d(this.options.handle,c).find("*").andSelf().each(function(){if(this==a.target)f=true});if(!f)return false}this.currentItem=c;this._removeCurrentsFromItems();return true},_mouseStart:function(a,b,c){b=this.options;var e=this;this.currentContainer=this;this.refreshPositions();this.helper=this._createHelper(a);this._cacheHelperProportions();this._cacheMargins();this.scrollParent=this.helper.scrollParent();this.offset=this.currentItem.offset();this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-
this.margins.left};this.helper.css("position","absolute");this.cssPosition=this.helper.css("position");d.extend(this.offset,{click:{left:a.pageX-this.offset.left,top:a.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()});this.originalPosition=this._generatePosition(a);this.originalPageX=a.pageX;this.originalPageY=a.pageY;b.cursorAt&&this._adjustOffsetFromHelper(b.cursorAt);this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]};
this.helper[0]!=this.currentItem[0]&&this.currentItem.hide();this._createPlaceholder();b.containment&&this._setContainment();if(b.cursor){if(d("body").css("cursor"))this._storedCursor=d("body").css("cursor");d("body").css("cursor",b.cursor)}if(b.opacity){if(this.helper.css("opacity"))this._storedOpacity=this.helper.css("opacity");this.helper.css("opacity",b.opacity)}if(b.zIndex){if(this.helper.css("zIndex"))this._storedZIndex=this.helper.css("zIndex");this.helper.css("zIndex",b.zIndex)}if(this.scrollParent[0]!=
document&&this.scrollParent[0].tagName!="HTML")this.overflowOffset=this.scrollParent.offset();this._trigger("start",a,this._uiHash());this._preserveHelperProportions||this._cacheHelperProportions();if(!c)for(c=this.containers.length-1;c>=0;c--)this.containers[c]._trigger("activate",a,e._uiHash(this));if(d.ui.ddmanager)d.ui.ddmanager.current=this;d.ui.ddmanager&&!b.dropBehaviour&&d.ui.ddmanager.prepareOffsets(this,a);this.dragging=true;this.helper.addClass("ui-sortable-helper");this._mouseDrag(a);
return true},_mouseDrag:function(a){this.position=this._generatePosition(a);this.positionAbs=this._convertPositionTo("absolute");if(!this.lastPositionAbs)this.lastPositionAbs=this.positionAbs;if(this.options.scroll){var b=this.options,c=false;if(this.scrollParent[0]!=document&&this.scrollParent[0].tagName!="HTML"){if(this.overflowOffset.top+this.scrollParent[0].offsetHeight-a.pageY<b.scrollSensitivity)this.scrollParent[0].scrollTop=c=this.scrollParent[0].scrollTop+b.scrollSpeed;else if(a.pageY-this.overflowOffset.top<
b.scrollSensitivity)this.scrollParent[0].scrollTop=c=this.scrollParent[0].scrollTop-b.scrollSpeed;if(this.overflowOffset.left+this.scrollParent[0].offsetWidth-a.pageX<b.scrollSensitivity)this.scrollParent[0].scrollLeft=c=this.scrollParent[0].scrollLeft+b.scrollSpeed;else if(a.pageX-this.overflowOffset.left<b.scrollSensitivity)this.scrollParent[0].scrollLeft=c=this.scrollParent[0].scrollLeft-b.scrollSpeed}else{if(a.pageY-d(document).scrollTop()<b.scrollSensitivity)c=d(document).scrollTop(d(document).scrollTop()-
b.scrollSpeed);else if(d(window).height()-(a.pageY-d(document).scrollTop())<b.scrollSensitivity)c=d(document).scrollTop(d(document).scrollTop()+b.scrollSpeed);if(a.pageX-d(document).scrollLeft()<b.scrollSensitivity)c=d(document).scrollLeft(d(document).scrollLeft()-b.scrollSpeed);else if(d(window).width()-(a.pageX-d(document).scrollLeft())<b.scrollSensitivity)c=d(document).scrollLeft(d(document).scrollLeft()+b.scrollSpeed)}c!==false&&d.ui.ddmanager&&!b.dropBehaviour&&d.ui.ddmanager.prepareOffsets(this,
a)}this.positionAbs=this._convertPositionTo("absolute");if(!this.options.axis||this.options.axis!="y")this.helper[0].style.left=this.position.left+"px";if(!this.options.axis||this.options.axis!="x")this.helper[0].style.top=this.position.top+"px";for(b=this.items.length-1;b>=0;b--){c=this.items[b];var e=c.item[0],f=this._intersectsWithPointer(c);if(f)if(e!=this.currentItem[0]&&this.placeholder[f==1?"next":"prev"]()[0]!=e&&!d.ui.contains(this.placeholder[0],e)&&(this.options.type=="semi-dynamic"?!d.ui.contains(this.element[0],
e):true)){this.direction=f==1?"down":"up";if(this.options.tolerance=="pointer"||this._intersectsWithSides(c))this._rearrange(a,c);else break;this._trigger("change",a,this._uiHash());break}}this._contactContainers(a);d.ui.ddmanager&&d.ui.ddmanager.drag(this,a);this._trigger("sort",a,this._uiHash());this.lastPositionAbs=this.positionAbs;return false},_mouseStop:function(a,b){if(a){d.ui.ddmanager&&!this.options.dropBehaviour&&d.ui.ddmanager.drop(this,a);if(this.options.revert){var c=this;b=c.placeholder.offset();
c.reverting=true;d(this.helper).animate({left:b.left-this.offset.parent.left-c.margins.left+(this.offsetParent[0]==document.body?0:this.offsetParent[0].scrollLeft),top:b.top-this.offset.parent.top-c.margins.top+(this.offsetParent[0]==document.body?0:this.offsetParent[0].scrollTop)},parseInt(this.options.revert,10)||500,function(){c._clear(a)})}else this._clear(a,b);return false}},cancel:function(){var a=this;if(this.dragging){this._mouseUp({target:null});this.options.helper=="original"?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):
this.currentItem.show();for(var b=this.containers.length-1;b>=0;b--){this.containers[b]._trigger("deactivate",null,a._uiHash(this));if(this.containers[b].containerCache.over){this.containers[b]._trigger("out",null,a._uiHash(this));this.containers[b].containerCache.over=0}}}if(this.placeholder){this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]);this.options.helper!="original"&&this.helper&&this.helper[0].parentNode&&this.helper.remove();d.extend(this,{helper:null,
dragging:false,reverting:false,_noFinalSort:null});this.domPosition.prev?d(this.domPosition.prev).after(this.currentItem):d(this.domPosition.parent).prepend(this.currentItem)}return this},serialize:function(a){var b=this._getItemsAsjQuery(a&&a.connected),c=[];a=a||{};d(b).each(function(){var e=(d(a.item||this).attr(a.attribute||"id")||"").match(a.expression||/(.+)[-=_](.+)/);if(e)c.push((a.key||e[1]+"[]")+"="+(a.key&&a.expression?e[1]:e[2]))});!c.length&&a.key&&c.push(a.key+"=");return c.join("&")},
toArray:function(a){var b=this._getItemsAsjQuery(a&&a.connected),c=[];a=a||{};b.each(function(){c.push(d(a.item||this).attr(a.attribute||"id")||"")});return c},_intersectsWith:function(a){var b=this.positionAbs.left,c=b+this.helperProportions.width,e=this.positionAbs.top,f=e+this.helperProportions.height,g=a.left,h=g+a.width,i=a.top,k=i+a.height,j=this.offset.click.top,l=this.offset.click.left;j=e+j>i&&e+j<k&&b+l>g&&b+l<h;return this.options.tolerance=="pointer"||this.options.forcePointerForContainers||
this.options.tolerance!="pointer"&&this.helperProportions[this.floating?"width":"height"]>a[this.floating?"width":"height"]?j:g<b+this.helperProportions.width/2&&c-this.helperProportions.width/2<h&&i<e+this.helperProportions.height/2&&f-this.helperProportions.height/2<k},_intersectsWithPointer:function(a){var b=d.ui.isOverAxis(this.positionAbs.top+this.offset.click.top,a.top,a.height);a=d.ui.isOverAxis(this.positionAbs.left+this.offset.click.left,a.left,a.width);b=b&&a;a=this._getDragVerticalDirection();
var c=this._getDragHorizontalDirection();if(!b)return false;return this.floating?c&&c=="right"||a=="down"?2:1:a&&(a=="down"?2:1)},_intersectsWithSides:function(a){var b=d.ui.isOverAxis(this.positionAbs.top+this.offset.click.top,a.top+a.height/2,a.height);a=d.ui.isOverAxis(this.positionAbs.left+this.offset.click.left,a.left+a.width/2,a.width);var c=this._getDragVerticalDirection(),e=this._getDragHorizontalDirection();return this.floating&&e?e=="right"&&a||e=="left"&&!a:c&&(c=="down"&&b||c=="up"&&!b)},
_getDragVerticalDirection:function(){var a=this.positionAbs.top-this.lastPositionAbs.top;return a!=0&&(a>0?"down":"up")},_getDragHorizontalDirection:function(){var a=this.positionAbs.left-this.lastPositionAbs.left;return a!=0&&(a>0?"right":"left")},refresh:function(a){this._refreshItems(a);this.refreshPositions();return this},_connectWith:function(){var a=this.options;return a.connectWith.constructor==String?[a.connectWith]:a.connectWith},_getItemsAsjQuery:function(a){var b=[],c=[],e=this._connectWith();
if(e&&a)for(a=e.length-1;a>=0;a--)for(var f=d(e[a]),g=f.length-1;g>=0;g--){var h=d.data(f[g],"sortable");if(h&&h!=this&&!h.options.disabled)c.push([d.isFunction(h.options.items)?h.options.items.call(h.element):d(h.options.items,h.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),h])}c.push([d.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):d(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),
this]);for(a=c.length-1;a>=0;a--)c[a][0].each(function(){b.push(this)});return d(b)},_removeCurrentsFromItems:function(){for(var a=this.currentItem.find(":data(sortable-item)"),b=0;b<this.items.length;b++)for(var c=0;c<a.length;c++)a[c]==this.items[b].item[0]&&this.items.splice(b,1)},_refreshItems:function(a){this.items=[];this.containers=[this];var b=this.items,c=[[d.isFunction(this.options.items)?this.options.items.call(this.element[0],a,{item:this.currentItem}):d(this.options.items,this.element),
this]],e=this._connectWith();if(e)for(var f=e.length-1;f>=0;f--)for(var g=d(e[f]),h=g.length-1;h>=0;h--){var i=d.data(g[h],"sortable");if(i&&i!=this&&!i.options.disabled){c.push([d.isFunction(i.options.items)?i.options.items.call(i.element[0],a,{item:this.currentItem}):d(i.options.items,i.element),i]);this.containers.push(i)}}for(f=c.length-1;f>=0;f--){a=c[f][1];e=c[f][0];h=0;for(g=e.length;h<g;h++){i=d(e[h]);i.data("sortable-item",a);b.push({item:i,instance:a,width:0,height:0,left:0,top:0})}}},refreshPositions:function(a){if(this.offsetParent&&
this.helper)this.offset.parent=this._getParentOffset();for(var b=this.items.length-1;b>=0;b--){var c=this.items[b],e=this.options.toleranceElement?d(this.options.toleranceElement,c.item):c.item;if(!a){c.width=e.outerWidth();c.height=e.outerHeight()}e=e.offset();c.left=e.left;c.top=e.top}if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(b=this.containers.length-1;b>=0;b--){e=this.containers[b].element.offset();this.containers[b].containerCache.left=
e.left;this.containers[b].containerCache.top=e.top;this.containers[b].containerCache.width=this.containers[b].element.outerWidth();this.containers[b].containerCache.height=this.containers[b].element.outerHeight()}return this},_createPlaceholder:function(a){var b=a||this,c=b.options;if(!c.placeholder||c.placeholder.constructor==String){var e=c.placeholder;c.placeholder={element:function(){var f=d(document.createElement(b.currentItem[0].nodeName)).addClass(e||b.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper")[0];
if(!e)f.style.visibility="hidden";return f},update:function(f,g){if(!(e&&!c.forcePlaceholderSize)){g.height()||g.height(b.currentItem.innerHeight()-parseInt(b.currentItem.css("paddingTop")||0,10)-parseInt(b.currentItem.css("paddingBottom")||0,10));g.width()||g.width(b.currentItem.innerWidth()-parseInt(b.currentItem.css("paddingLeft")||0,10)-parseInt(b.currentItem.css("paddingRight")||0,10))}}}}b.placeholder=d(c.placeholder.element.call(b.element,b.currentItem));b.currentItem.after(b.placeholder);
c.placeholder.update(b,b.placeholder)},_contactContainers:function(a){for(var b=null,c=null,e=this.containers.length-1;e>=0;e--)if(!d.ui.contains(this.currentItem[0],this.containers[e].element[0]))if(this._intersectsWith(this.containers[e].containerCache)){if(!(b&&d.ui.contains(this.containers[e].element[0],b.element[0]))){b=this.containers[e];c=e}}else if(this.containers[e].containerCache.over){this.containers[e]._trigger("out",a,this._uiHash(this));this.containers[e].containerCache.over=0}if(b)if(this.containers.length===
1){this.containers[c]._trigger("over",a,this._uiHash(this));this.containers[c].containerCache.over=1}else if(this.currentContainer!=this.containers[c]){b=1E4;e=null;for(var f=this.positionAbs[this.containers[c].floating?"left":"top"],g=this.items.length-1;g>=0;g--)if(d.ui.contains(this.containers[c].element[0],this.items[g].item[0])){var h=this.items[g][this.containers[c].floating?"left":"top"];if(Math.abs(h-f)<b){b=Math.abs(h-f);e=this.items[g]}}if(e||this.options.dropOnEmpty){this.currentContainer=
this.containers[c];e?this._rearrange(a,e,null,true):this._rearrange(a,null,this.containers[c].element,true);this._trigger("change",a,this._uiHash());this.containers[c]._trigger("change",a,this._uiHash(this));this.options.placeholder.update(this.currentContainer,this.placeholder);this.containers[c]._trigger("over",a,this._uiHash(this));this.containers[c].containerCache.over=1}}},_createHelper:function(a){var b=this.options;a=d.isFunction(b.helper)?d(b.helper.apply(this.element[0],[a,this.currentItem])):
b.helper=="clone"?this.currentItem.clone():this.currentItem;a.parents("body").length||d(b.appendTo!="parent"?b.appendTo:this.currentItem[0].parentNode)[0].appendChild(a[0]);if(a[0]==this.currentItem[0])this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")};if(a[0].style.width==""||b.forceHelperSize)a.width(this.currentItem.width());if(a[0].style.height==
""||b.forceHelperSize)a.height(this.currentItem.height());return a},_adjustOffsetFromHelper:function(a){if(typeof a=="string")a=a.split(" ");if(d.isArray(a))a={left:+a[0],top:+a[1]||0};if("left"in a)this.offset.click.left=a.left+this.margins.left;if("right"in a)this.offset.click.left=this.helperProportions.width-a.right+this.margins.left;if("top"in a)this.offset.click.top=a.top+this.margins.top;if("bottom"in a)this.offset.click.top=this.helperProportions.height-a.bottom+this.margins.top},_getParentOffset:function(){this.offsetParent=
this.helper.offsetParent();var a=this.offsetParent.offset();if(this.cssPosition=="absolute"&&this.scrollParent[0]!=document&&d.ui.contains(this.scrollParent[0],this.offsetParent[0])){a.left+=this.scrollParent.scrollLeft();a.top+=this.scrollParent.scrollTop()}if(this.offsetParent[0]==document.body||this.offsetParent[0].tagName&&this.offsetParent[0].tagName.toLowerCase()=="html"&&d.browser.msie)a={top:0,left:0};return{top:a.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:a.left+(parseInt(this.offsetParent.css("borderLeftWidth"),
10)||0)}},_getRelativeOffset:function(){if(this.cssPosition=="relative"){var a=this.currentItem.position();return{top:a.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:a.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}else return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions=
{width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var a=this.options;if(a.containment=="parent")a.containment=this.helper[0].parentNode;if(a.containment=="document"||a.containment=="window")this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,d(a.containment=="document"?document:window).width()-this.helperProportions.width-this.margins.left,(d(a.containment=="document"?document:window).height()||
document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];if(!/^(document|window|parent)$/.test(a.containment)){var b=d(a.containment)[0];a=d(a.containment).offset();var c=d(b).css("overflow")!="hidden";this.containment=[a.left+(parseInt(d(b).css("borderLeftWidth"),10)||0)+(parseInt(d(b).css("paddingLeft"),10)||0)-this.margins.left,a.top+(parseInt(d(b).css("borderTopWidth"),10)||0)+(parseInt(d(b).css("paddingTop"),10)||0)-this.margins.top,a.left+(c?Math.max(b.scrollWidth,
b.offsetWidth):b.offsetWidth)-(parseInt(d(b).css("borderLeftWidth"),10)||0)-(parseInt(d(b).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,a.top+(c?Math.max(b.scrollHeight,b.offsetHeight):b.offsetHeight)-(parseInt(d(b).css("borderTopWidth"),10)||0)-(parseInt(d(b).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top]}},_convertPositionTo:function(a,b){if(!b)b=this.position;a=a=="absolute"?1:-1;var c=this.cssPosition=="absolute"&&!(this.scrollParent[0]!=
document&&d.ui.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,e=/(html|body)/i.test(c[0].tagName);return{top:b.top+this.offset.relative.top*a+this.offset.parent.top*a-(d.browser.safari&&this.cssPosition=="fixed"?0:(this.cssPosition=="fixed"?-this.scrollParent.scrollTop():e?0:c.scrollTop())*a),left:b.left+this.offset.relative.left*a+this.offset.parent.left*a-(d.browser.safari&&this.cssPosition=="fixed"?0:(this.cssPosition=="fixed"?-this.scrollParent.scrollLeft():
e?0:c.scrollLeft())*a)}},_generatePosition:function(a){var b=this.options,c=this.cssPosition=="absolute"&&!(this.scrollParent[0]!=document&&d.ui.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,e=/(html|body)/i.test(c[0].tagName);if(this.cssPosition=="relative"&&!(this.scrollParent[0]!=document&&this.scrollParent[0]!=this.offsetParent[0]))this.offset.relative=this._getRelativeOffset();var f=a.pageX,g=a.pageY;if(this.originalPosition){if(this.containment){if(a.pageX-
this.offset.click.left<this.containment[0])f=this.containment[0]+this.offset.click.left;if(a.pageY-this.offset.click.top<this.containment[1])g=this.containment[1]+this.offset.click.top;if(a.pageX-this.offset.click.left>this.containment[2])f=this.containment[2]+this.offset.click.left;if(a.pageY-this.offset.click.top>this.containment[3])g=this.containment[3]+this.offset.click.top}if(b.grid){g=this.originalPageY+Math.round((g-this.originalPageY)/b.grid[1])*b.grid[1];g=this.containment?!(g-this.offset.click.top<
this.containment[1]||g-this.offset.click.top>this.containment[3])?g:!(g-this.offset.click.top<this.containment[1])?g-b.grid[1]:g+b.grid[1]:g;f=this.originalPageX+Math.round((f-this.originalPageX)/b.grid[0])*b.grid[0];f=this.containment?!(f-this.offset.click.left<this.containment[0]||f-this.offset.click.left>this.containment[2])?f:!(f-this.offset.click.left<this.containment[0])?f-b.grid[0]:f+b.grid[0]:f}}return{top:g-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+(d.browser.safari&&
this.cssPosition=="fixed"?0:this.cssPosition=="fixed"?-this.scrollParent.scrollTop():e?0:c.scrollTop()),left:f-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+(d.browser.safari&&this.cssPosition=="fixed"?0:this.cssPosition=="fixed"?-this.scrollParent.scrollLeft():e?0:c.scrollLeft())}},_rearrange:function(a,b,c,e){c?c[0].appendChild(this.placeholder[0]):b.item[0].parentNode.insertBefore(this.placeholder[0],this.direction=="down"?b.item[0]:b.item[0].nextSibling);this.counter=
this.counter?++this.counter:1;var f=this,g=this.counter;window.setTimeout(function(){g==f.counter&&f.refreshPositions(!e)},0)},_clear:function(a,b){this.reverting=false;var c=[];!this._noFinalSort&&this.currentItem[0].parentNode&&this.placeholder.before(this.currentItem);this._noFinalSort=null;if(this.helper[0]==this.currentItem[0]){for(var e in this._storedCSS)if(this._storedCSS[e]=="auto"||this._storedCSS[e]=="static")this._storedCSS[e]="";this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();
this.fromOutside&&!b&&c.push(function(f){this._trigger("receive",f,this._uiHash(this.fromOutside))});if((this.fromOutside||this.domPosition.prev!=this.currentItem.prev().not(".ui-sortable-helper")[0]||this.domPosition.parent!=this.currentItem.parent()[0])&&!b)c.push(function(f){this._trigger("update",f,this._uiHash())});if(!d.ui.contains(this.element[0],this.currentItem[0])){b||c.push(function(f){this._trigger("remove",f,this._uiHash())});for(e=this.containers.length-1;e>=0;e--)if(d.ui.contains(this.containers[e].element[0],
this.currentItem[0])&&!b){c.push(function(f){return function(g){f._trigger("receive",g,this._uiHash(this))}}.call(this,this.containers[e]));c.push(function(f){return function(g){f._trigger("update",g,this._uiHash(this))}}.call(this,this.containers[e]))}}for(e=this.containers.length-1;e>=0;e--){b||c.push(function(f){return function(g){f._trigger("deactivate",g,this._uiHash(this))}}.call(this,this.containers[e]));if(this.containers[e].containerCache.over){c.push(function(f){return function(g){f._trigger("out",
g,this._uiHash(this))}}.call(this,this.containers[e]));this.containers[e].containerCache.over=0}}this._storedCursor&&d("body").css("cursor",this._storedCursor);this._storedOpacity&&this.helper.css("opacity",this._storedOpacity);if(this._storedZIndex)this.helper.css("zIndex",this._storedZIndex=="auto"?"":this._storedZIndex);this.dragging=false;if(this.cancelHelperRemoval){if(!b){this._trigger("beforeStop",a,this._uiHash());for(e=0;e<c.length;e++)c[e].call(this,a);this._trigger("stop",a,this._uiHash())}return false}b||
this._trigger("beforeStop",a,this._uiHash());this.placeholder[0].parentNode.removeChild(this.placeholder[0]);this.helper[0]!=this.currentItem[0]&&this.helper.remove();this.helper=null;if(!b){for(e=0;e<c.length;e++)c[e].call(this,a);this._trigger("stop",a,this._uiHash())}this.fromOutside=false;return true},_trigger:function(){d.Widget.prototype._trigger.apply(this,arguments)===false&&this.cancel()},_uiHash:function(a){var b=a||this;return{helper:b.helper,placeholder:b.placeholder||d([]),position:b.position,
originalPosition:b.originalPosition,offset:b.positionAbs,item:b.currentItem,sender:a?a.element:null}}});d.extend(d.ui.sortable,{version:"1.8.11"})})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Accordion 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Accordion
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 */
(function(c){c.widget("ui.accordion",{options:{active:0,animated:"slide",autoHeight:true,clearStyle:false,collapsible:false,event:"click",fillSpace:false,header:"> li > :first-child,> :not(li):even",icons:{header:"ui-icon-triangle-1-e",headerSelected:"ui-icon-triangle-1-s"},navigation:false,navigationFilter:function(){return this.href.toLowerCase()===location.href.toLowerCase()}},_create:function(){var a=this,b=a.options;a.running=0;a.element.addClass("ui-accordion ui-widget ui-helper-reset").children("li").addClass("ui-accordion-li-fix");
a.headers=a.element.find(b.header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all").bind("mouseenter.accordion",function(){b.disabled||c(this).addClass("ui-state-hover")}).bind("mouseleave.accordion",function(){b.disabled||c(this).removeClass("ui-state-hover")}).bind("focus.accordion",function(){b.disabled||c(this).addClass("ui-state-focus")}).bind("blur.accordion",function(){b.disabled||c(this).removeClass("ui-state-focus")});a.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom");
if(b.navigation){var d=a.element.find("a").filter(b.navigationFilter).eq(0);if(d.length){var h=d.closest(".ui-accordion-header");a.active=h.length?h:d.closest(".ui-accordion-content").prev()}}a.active=a._findActive(a.active||b.active).addClass("ui-state-default ui-state-active").toggleClass("ui-corner-all").toggleClass("ui-corner-top");a.active.next().addClass("ui-accordion-content-active");a._createIcons();a.resize();a.element.attr("role","tablist");a.headers.attr("role","tab").bind("keydown.accordion",
function(f){return a._keydown(f)}).next().attr("role","tabpanel");a.headers.not(a.active||"").attr({"aria-expanded":"false","aria-selected":"false",tabIndex:-1}).next().hide();a.active.length?a.active.attr({"aria-expanded":"true","aria-selected":"true",tabIndex:0}):a.headers.eq(0).attr("tabIndex",0);c.browser.safari||a.headers.find("a").attr("tabIndex",-1);b.event&&a.headers.bind(b.event.split(" ").join(".accordion ")+".accordion",function(f){a._clickHandler.call(a,f,this);f.preventDefault()})},_createIcons:function(){var a=
this.options;if(a.icons){c("<span></span>").addClass("ui-icon "+a.icons.header).prependTo(this.headers);this.active.children(".ui-icon").toggleClass(a.icons.header).toggleClass(a.icons.headerSelected);this.element.addClass("ui-accordion-icons")}},_destroyIcons:function(){this.headers.children(".ui-icon").remove();this.element.removeClass("ui-accordion-icons")},destroy:function(){var a=this.options;this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role");this.headers.unbind(".accordion").removeClass("ui-accordion-header ui-accordion-disabled ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-selected").removeAttr("tabIndex");
this.headers.find("a").removeAttr("tabIndex");this._destroyIcons();var b=this.headers.next().css("display","").removeAttr("role").removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-accordion-disabled ui-state-disabled");if(a.autoHeight||a.fillHeight)b.css("height","");return c.Widget.prototype.destroy.call(this)},_setOption:function(a,b){c.Widget.prototype._setOption.apply(this,arguments);a=="active"&&this.activate(b);if(a=="icons"){this._destroyIcons();
b&&this._createIcons()}if(a=="disabled")this.headers.add(this.headers.next())[b?"addClass":"removeClass"]("ui-accordion-disabled ui-state-disabled")},_keydown:function(a){if(!(this.options.disabled||a.altKey||a.ctrlKey)){var b=c.ui.keyCode,d=this.headers.length,h=this.headers.index(a.target),f=false;switch(a.keyCode){case b.RIGHT:case b.DOWN:f=this.headers[(h+1)%d];break;case b.LEFT:case b.UP:f=this.headers[(h-1+d)%d];break;case b.SPACE:case b.ENTER:this._clickHandler({target:a.target},a.target);
a.preventDefault()}if(f){c(a.target).attr("tabIndex",-1);c(f).attr("tabIndex",0);f.focus();return false}return true}},resize:function(){var a=this.options,b;if(a.fillSpace){if(c.browser.msie){var d=this.element.parent().css("overflow");this.element.parent().css("overflow","hidden")}b=this.element.parent().height();c.browser.msie&&this.element.parent().css("overflow",d);this.headers.each(function(){b-=c(this).outerHeight(true)});this.headers.next().each(function(){c(this).height(Math.max(0,b-c(this).innerHeight()+
c(this).height()))}).css("overflow","auto")}else if(a.autoHeight){b=0;this.headers.next().each(function(){b=Math.max(b,c(this).height("").height())}).height(b)}return this},activate:function(a){this.options.active=a;a=this._findActive(a)[0];this._clickHandler({target:a},a);return this},_findActive:function(a){return a?typeof a==="number"?this.headers.filter(":eq("+a+")"):this.headers.not(this.headers.not(a)):a===false?c([]):this.headers.filter(":eq(0)")},_clickHandler:function(a,b){var d=this.options;
if(!d.disabled)if(a.target){a=c(a.currentTarget||b);b=a[0]===this.active[0];d.active=d.collapsible&&b?false:this.headers.index(a);if(!(this.running||!d.collapsible&&b)){var h=this.active;j=a.next();g=this.active.next();e={options:d,newHeader:b&&d.collapsible?c([]):a,oldHeader:this.active,newContent:b&&d.collapsible?c([]):j,oldContent:g};var f=this.headers.index(this.active[0])>this.headers.index(a[0]);this.active=b?c([]):a;this._toggle(j,g,e,b,f);h.removeClass("ui-state-active ui-corner-top").addClass("ui-state-default ui-corner-all").children(".ui-icon").removeClass(d.icons.headerSelected).addClass(d.icons.header);
if(!b){a.removeClass("ui-state-default ui-corner-all").addClass("ui-state-active ui-corner-top").children(".ui-icon").removeClass(d.icons.header).addClass(d.icons.headerSelected);a.next().addClass("ui-accordion-content-active")}}}else if(d.collapsible){this.active.removeClass("ui-state-active ui-corner-top").addClass("ui-state-default ui-corner-all").children(".ui-icon").removeClass(d.icons.headerSelected).addClass(d.icons.header);this.active.next().addClass("ui-accordion-content-active");var g=this.active.next(),
e={options:d,newHeader:c([]),oldHeader:d.active,newContent:c([]),oldContent:g},j=this.active=c([]);this._toggle(j,g,e)}},_toggle:function(a,b,d,h,f){var g=this,e=g.options;g.toShow=a;g.toHide=b;g.data=d;var j=function(){if(g)return g._completed.apply(g,arguments)};g._trigger("changestart",null,g.data);g.running=b.size()===0?a.size():b.size();if(e.animated){d={};d=e.collapsible&&h?{toShow:c([]),toHide:b,complete:j,down:f,autoHeight:e.autoHeight||e.fillSpace}:{toShow:a,toHide:b,complete:j,down:f,autoHeight:e.autoHeight||
e.fillSpace};if(!e.proxied)e.proxied=e.animated;if(!e.proxiedDuration)e.proxiedDuration=e.duration;e.animated=c.isFunction(e.proxied)?e.proxied(d):e.proxied;e.duration=c.isFunction(e.proxiedDuration)?e.proxiedDuration(d):e.proxiedDuration;h=c.ui.accordion.animations;var i=e.duration,k=e.animated;if(k&&!h[k]&&!c.easing[k])k="slide";h[k]||(h[k]=function(l){this.slide(l,{easing:k,duration:i||700})});h[k](d)}else{if(e.collapsible&&h)a.toggle();else{b.hide();a.show()}j(true)}b.prev().attr({"aria-expanded":"false",
"aria-selected":"false",tabIndex:-1}).blur();a.prev().attr({"aria-expanded":"true","aria-selected":"true",tabIndex:0}).focus()},_completed:function(a){this.running=a?0:--this.running;if(!this.running){this.options.clearStyle&&this.toShow.add(this.toHide).css({height:"",overflow:""});this.toHide.removeClass("ui-accordion-content-active");if(this.toHide.length)this.toHide.parent()[0].className=this.toHide.parent()[0].className;this._trigger("change",null,this.data)}}});c.extend(c.ui.accordion,{version:"1.8.11",
animations:{slide:function(a,b){a=c.extend({easing:"swing",duration:300},a,b);if(a.toHide.size())if(a.toShow.size()){var d=a.toShow.css("overflow"),h=0,f={},g={},e;b=a.toShow;e=b[0].style.width;b.width(parseInt(b.parent().width(),10)-parseInt(b.css("paddingLeft"),10)-parseInt(b.css("paddingRight"),10)-(parseInt(b.css("borderLeftWidth"),10)||0)-(parseInt(b.css("borderRightWidth"),10)||0));c.each(["height","paddingTop","paddingBottom"],function(j,i){g[i]="hide";j=(""+c.css(a.toShow[0],i)).match(/^([\d+-.]+)(.*)$/);
f[i]={value:j[1],unit:j[2]||"px"}});a.toShow.css({height:0,overflow:"hidden"}).show();a.toHide.filter(":hidden").each(a.complete).end().filter(":visible").animate(g,{step:function(j,i){if(i.prop=="height")h=i.end-i.start===0?0:(i.now-i.start)/(i.end-i.start);a.toShow[0].style[i.prop]=h*f[i.prop].value+f[i.prop].unit},duration:a.duration,easing:a.easing,complete:function(){a.autoHeight||a.toShow.css("height","");a.toShow.css({width:e,overflow:d});a.complete()}})}else a.toHide.animate({height:"hide",
paddingTop:"hide",paddingBottom:"hide"},a);else a.toShow.animate({height:"show",paddingTop:"show",paddingBottom:"show"},a)},bounceslide:function(a){this.slide(a,{easing:a.down?"easeOutBounce":"swing",duration:a.down?1E3:200})}}})})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Autocomplete 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Autocomplete
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 *	jquery.ui.position.js
 */
(function(d){var e=0;d.widget("ui.autocomplete",{options:{appendTo:"body",autoFocus:false,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null},pending:0,_create:function(){var a=this,b=this.element[0].ownerDocument,g;this.element.addClass("ui-autocomplete-input").attr("autocomplete","off").attr({role:"textbox","aria-autocomplete":"list","aria-haspopup":"true"}).bind("keydown.autocomplete",function(c){if(!(a.options.disabled||a.element.attr("readonly"))){g=
false;var f=d.ui.keyCode;switch(c.keyCode){case f.PAGE_UP:a._move("previousPage",c);break;case f.PAGE_DOWN:a._move("nextPage",c);break;case f.UP:a._move("previous",c);c.preventDefault();break;case f.DOWN:a._move("next",c);c.preventDefault();break;case f.ENTER:case f.NUMPAD_ENTER:if(a.menu.active){g=true;c.preventDefault()}case f.TAB:if(!a.menu.active)return;a.menu.select(c);break;case f.ESCAPE:a.element.val(a.term);a.close(c);break;default:clearTimeout(a.searching);a.searching=setTimeout(function(){if(a.term!=
a.element.val()){a.selectedItem=null;a.search(null,c)}},a.options.delay);break}}}).bind("keypress.autocomplete",function(c){if(g){g=false;c.preventDefault()}}).bind("focus.autocomplete",function(){if(!a.options.disabled){a.selectedItem=null;a.previous=a.element.val()}}).bind("blur.autocomplete",function(c){if(!a.options.disabled){clearTimeout(a.searching);a.closing=setTimeout(function(){a.close(c);a._change(c)},150)}});this._initSource();this.response=function(){return a._response.apply(a,arguments)};
this.menu=d("<ul></ul>").addClass("ui-autocomplete").appendTo(d(this.options.appendTo||"body",b)[0]).mousedown(function(c){var f=a.menu.element[0];d(c.target).closest(".ui-menu-item").length||setTimeout(function(){d(document).one("mousedown",function(h){h.target!==a.element[0]&&h.target!==f&&!d.ui.contains(f,h.target)&&a.close()})},1);setTimeout(function(){clearTimeout(a.closing)},13)}).menu({focus:function(c,f){f=f.item.data("item.autocomplete");false!==a._trigger("focus",c,{item:f})&&/^key/.test(c.originalEvent.type)&&
a.element.val(f.value)},selected:function(c,f){var h=f.item.data("item.autocomplete"),i=a.previous;if(a.element[0]!==b.activeElement){a.element.focus();a.previous=i;setTimeout(function(){a.previous=i;a.selectedItem=h},1)}false!==a._trigger("select",c,{item:h})&&a.element.val(h.value);a.term=a.element.val();a.close(c);a.selectedItem=h},blur:function(){a.menu.element.is(":visible")&&a.element.val()!==a.term&&a.element.val(a.term)}}).zIndex(this.element.zIndex()+1).css({top:0,left:0}).hide().data("menu");
d.fn.bgiframe&&this.menu.element.bgiframe()},destroy:function(){this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete").removeAttr("role").removeAttr("aria-autocomplete").removeAttr("aria-haspopup");this.menu.element.remove();d.Widget.prototype.destroy.call(this)},_setOption:function(a,b){d.Widget.prototype._setOption.apply(this,arguments);a==="source"&&this._initSource();if(a==="appendTo")this.menu.element.appendTo(d(b||"body",this.element[0].ownerDocument)[0]);a==="disabled"&&
b&&this.xhr&&this.xhr.abort()},_initSource:function(){var a=this,b,g;if(d.isArray(this.options.source)){b=this.options.source;this.source=function(c,f){f(d.ui.autocomplete.filter(b,c.term))}}else if(typeof this.options.source==="string"){g=this.options.source;this.source=function(c,f){a.xhr&&a.xhr.abort();a.xhr=d.ajax({url:g,data:c,dataType:"json",autocompleteRequest:++e,success:function(h){this.autocompleteRequest===e&&f(h)},error:function(){this.autocompleteRequest===e&&f([])}})}}else this.source=
this.options.source},search:function(a,b){a=a!=null?a:this.element.val();this.term=this.element.val();if(a.length<this.options.minLength)return this.close(b);clearTimeout(this.closing);if(this._trigger("search",b)!==false)return this._search(a)},_search:function(a){this.pending++;this.element.addClass("ui-autocomplete-loading");this.source({term:a},this.response)},_response:function(a){if(!this.options.disabled&&a&&a.length){a=this._normalize(a);this._suggest(a);this._trigger("open")}else this.close();
this.pending--;this.pending||this.element.removeClass("ui-autocomplete-loading")},close:function(a){clearTimeout(this.closing);if(this.menu.element.is(":visible")){this.menu.element.hide();this.menu.deactivate();this._trigger("close",a)}},_change:function(a){this.previous!==this.element.val()&&this._trigger("change",a,{item:this.selectedItem})},_normalize:function(a){if(a.length&&a[0].label&&a[0].value)return a;return d.map(a,function(b){if(typeof b==="string")return{label:b,value:b};return d.extend({label:b.label||
b.value,value:b.value||b.label},b)})},_suggest:function(a){var b=this.menu.element.empty().zIndex(this.element.zIndex()+1);this._renderMenu(b,a);this.menu.deactivate();this.menu.refresh();b.show();this._resizeMenu();b.position(d.extend({of:this.element},this.options.position));this.options.autoFocus&&this.menu.next(new d.Event("mouseover"))},_resizeMenu:function(){var a=this.menu.element;a.outerWidth(Math.max(a.width("").outerWidth(),this.element.outerWidth()))},_renderMenu:function(a,b){var g=this;
d.each(b,function(c,f){g._renderItem(a,f)})},_renderItem:function(a,b){return d("<li></li>").data("item.autocomplete",b).append(d("<a></a>").text(b.label)).appendTo(a)},_move:function(a,b){if(this.menu.element.is(":visible"))if(this.menu.first()&&/^previous/.test(a)||this.menu.last()&&/^next/.test(a)){this.element.val(this.term);this.menu.deactivate()}else this.menu[a](b);else this.search(null,b)},widget:function(){return this.menu.element}});d.extend(d.ui.autocomplete,{escapeRegex:function(a){return a.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,
"\\$&")},filter:function(a,b){var g=new RegExp(d.ui.autocomplete.escapeRegex(b),"i");return d.grep(a,function(c){return g.test(c.label||c.value||c)})}})})(jQuery);
(function(d){d.widget("ui.menu",{_create:function(){var e=this;this.element.addClass("ui-menu ui-widget ui-widget-content ui-corner-all").attr({role:"listbox","aria-activedescendant":"ui-active-menuitem"}).click(function(a){if(d(a.target).closest(".ui-menu-item a").length){a.preventDefault();e.select(a)}});this.refresh()},refresh:function(){var e=this;this.element.children("li:not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role","menuitem").children("a").addClass("ui-corner-all").attr("tabindex",
-1).mouseenter(function(a){e.activate(a,d(this).parent())}).mouseleave(function(){e.deactivate()})},activate:function(e,a){this.deactivate();if(this.hasScroll()){var b=a.offset().top-this.element.offset().top,g=this.element.attr("scrollTop"),c=this.element.height();if(b<0)this.element.attr("scrollTop",g+b);else b>=c&&this.element.attr("scrollTop",g+b-c+a.height())}this.active=a.eq(0).children("a").addClass("ui-state-hover").attr("id","ui-active-menuitem").end();this._trigger("focus",e,{item:a})},
deactivate:function(){if(this.active){this.active.children("a").removeClass("ui-state-hover").removeAttr("id");this._trigger("blur");this.active=null}},next:function(e){this.move("next",".ui-menu-item:first",e)},previous:function(e){this.move("prev",".ui-menu-item:last",e)},first:function(){return this.active&&!this.active.prevAll(".ui-menu-item").length},last:function(){return this.active&&!this.active.nextAll(".ui-menu-item").length},move:function(e,a,b){if(this.active){e=this.active[e+"All"](".ui-menu-item").eq(0);
e.length?this.activate(b,e):this.activate(b,this.element.children(a))}else this.activate(b,this.element.children(a))},nextPage:function(e){if(this.hasScroll())if(!this.active||this.last())this.activate(e,this.element.children(".ui-menu-item:first"));else{var a=this.active.offset().top,b=this.element.height(),g=this.element.children(".ui-menu-item").filter(function(){var c=d(this).offset().top-a-b+d(this).height();return c<10&&c>-10});g.length||(g=this.element.children(".ui-menu-item:last"));this.activate(e,
g)}else this.activate(e,this.element.children(".ui-menu-item").filter(!this.active||this.last()?":first":":last"))},previousPage:function(e){if(this.hasScroll())if(!this.active||this.first())this.activate(e,this.element.children(".ui-menu-item:last"));else{var a=this.active.offset().top,b=this.element.height();result=this.element.children(".ui-menu-item").filter(function(){var g=d(this).offset().top-a+b-d(this).height();return g<10&&g>-10});result.length||(result=this.element.children(".ui-menu-item:first"));
this.activate(e,result)}else this.activate(e,this.element.children(".ui-menu-item").filter(!this.active||this.first()?":last":":first"))},hasScroll:function(){return this.element.height()<this.element.attr("scrollHeight")},select:function(e){this._trigger("selected",e,{item:this.active})}})})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Button 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Button
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 */
(function(a){var g,i=function(b){a(":ui-button",b.target.form).each(function(){var c=a(this).data("button");setTimeout(function(){c.refresh()},1)})},h=function(b){var c=b.name,d=b.form,f=a([]);if(c)f=d?a(d).find("[name='"+c+"']"):a("[name='"+c+"']",b.ownerDocument).filter(function(){return!this.form});return f};a.widget("ui.button",{options:{disabled:null,text:true,label:null,icons:{primary:null,secondary:null}},_create:function(){this.element.closest("form").unbind("reset.button").bind("reset.button",
i);if(typeof this.options.disabled!=="boolean")this.options.disabled=this.element.attr("disabled");this._determineButtonType();this.hasTitle=!!this.buttonElement.attr("title");var b=this,c=this.options,d=this.type==="checkbox"||this.type==="radio",f="ui-state-hover"+(!d?" ui-state-active":"");if(c.label===null)c.label=this.buttonElement.html();if(this.element.is(":disabled"))c.disabled=true;this.buttonElement.addClass("ui-button ui-widget ui-state-default ui-corner-all").attr("role","button").bind("mouseenter.button",
function(){if(!c.disabled){a(this).addClass("ui-state-hover");this===g&&a(this).addClass("ui-state-active")}}).bind("mouseleave.button",function(){c.disabled||a(this).removeClass(f)}).bind("focus.button",function(){a(this).addClass("ui-state-focus")}).bind("blur.button",function(){a(this).removeClass("ui-state-focus")});d&&this.element.bind("change.button",function(){b.refresh()});if(this.type==="checkbox")this.buttonElement.bind("click.button",function(){if(c.disabled)return false;a(this).toggleClass("ui-state-active");
b.buttonElement.attr("aria-pressed",b.element[0].checked)});else if(this.type==="radio")this.buttonElement.bind("click.button",function(){if(c.disabled)return false;a(this).addClass("ui-state-active");b.buttonElement.attr("aria-pressed",true);var e=b.element[0];h(e).not(e).map(function(){return a(this).button("widget")[0]}).removeClass("ui-state-active").attr("aria-pressed",false)});else{this.buttonElement.bind("mousedown.button",function(){if(c.disabled)return false;a(this).addClass("ui-state-active");
g=this;a(document).one("mouseup",function(){g=null})}).bind("mouseup.button",function(){if(c.disabled)return false;a(this).removeClass("ui-state-active")}).bind("keydown.button",function(e){if(c.disabled)return false;if(e.keyCode==a.ui.keyCode.SPACE||e.keyCode==a.ui.keyCode.ENTER)a(this).addClass("ui-state-active")}).bind("keyup.button",function(){a(this).removeClass("ui-state-active")});this.buttonElement.is("a")&&this.buttonElement.keyup(function(e){e.keyCode===a.ui.keyCode.SPACE&&a(this).click()})}this._setOption("disabled",
c.disabled)},_determineButtonType:function(){this.type=this.element.is(":checkbox")?"checkbox":this.element.is(":radio")?"radio":this.element.is("input")?"input":"button";if(this.type==="checkbox"||this.type==="radio"){var b=this.element.parents().filter(":last"),c="label[for="+this.element.attr("id")+"]";this.buttonElement=b.find(c);if(!this.buttonElement.length){b=b.length?b.siblings():this.element.siblings();this.buttonElement=b.filter(c);if(!this.buttonElement.length)this.buttonElement=b.find(c)}this.element.addClass("ui-helper-hidden-accessible");
(b=this.element.is(":checked"))&&this.buttonElement.addClass("ui-state-active");this.buttonElement.attr("aria-pressed",b)}else this.buttonElement=this.element},widget:function(){return this.buttonElement},destroy:function(){this.element.removeClass("ui-helper-hidden-accessible");this.buttonElement.removeClass("ui-button ui-widget ui-state-default ui-corner-all ui-state-hover ui-state-active  ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only").removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html());
this.hasTitle||this.buttonElement.removeAttr("title");a.Widget.prototype.destroy.call(this)},_setOption:function(b,c){a.Widget.prototype._setOption.apply(this,arguments);if(b==="disabled")c?this.element.attr("disabled",true):this.element.removeAttr("disabled");this._resetButton()},refresh:function(){var b=this.element.is(":disabled");b!==this.options.disabled&&this._setOption("disabled",b);if(this.type==="radio")h(this.element[0]).each(function(){a(this).is(":checked")?a(this).button("widget").addClass("ui-state-active").attr("aria-pressed",
true):a(this).button("widget").removeClass("ui-state-active").attr("aria-pressed",false)});else if(this.type==="checkbox")this.element.is(":checked")?this.buttonElement.addClass("ui-state-active").attr("aria-pressed",true):this.buttonElement.removeClass("ui-state-active").attr("aria-pressed",false)},_resetButton:function(){if(this.type==="input")this.options.label&&this.element.val(this.options.label);else{var b=this.buttonElement.removeClass("ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only"),
c=a("<span></span>").addClass("ui-button-text").html(this.options.label).appendTo(b.empty()).text(),d=this.options.icons,f=d.primary&&d.secondary,e=[];if(d.primary||d.secondary){if(this.options.text)e.push("ui-button-text-icon"+(f?"s":d.primary?"-primary":"-secondary"));d.primary&&b.prepend("<span class='ui-button-icon-primary ui-icon "+d.primary+"'></span>");d.secondary&&b.append("<span class='ui-button-icon-secondary ui-icon "+d.secondary+"'></span>");if(!this.options.text){e.push(f?"ui-button-icons-only":
"ui-button-icon-only");this.hasTitle||b.attr("title",c)}}else e.push("ui-button-text-only");b.addClass(e.join(" "))}}});a.widget("ui.buttonset",{options:{items:":button, :submit, :reset, :checkbox, :radio, a, :data(button)"},_create:function(){this.element.addClass("ui-buttonset")},_init:function(){this.refresh()},_setOption:function(b,c){b==="disabled"&&this.buttons.button("option",b,c);a.Widget.prototype._setOption.apply(this,arguments)},refresh:function(){this.buttons=this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function(){return a(this).button("widget")[0]}).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass("ui-corner-left").end().filter(":last").addClass("ui-corner-right").end().end()},
destroy:function(){this.element.removeClass("ui-buttonset");this.buttons.map(function(){return a(this).button("widget")[0]}).removeClass("ui-corner-left ui-corner-right").end().button("destroy");a.Widget.prototype.destroy.call(this)}})})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Dialog 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Dialog
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 *  jquery.ui.button.js
 *	jquery.ui.draggable.js
 *	jquery.ui.mouse.js
 *	jquery.ui.position.js
 *	jquery.ui.resizable.js
 */
(function(c,j){var k={buttons:true,height:true,maxHeight:true,maxWidth:true,minHeight:true,minWidth:true,width:true},l={maxHeight:true,maxWidth:true,minHeight:true,minWidth:true};c.widget("ui.dialog",{options:{autoOpen:true,buttons:{},closeOnEscape:true,closeText:"close",dialogClass:"",draggable:true,hide:null,height:"auto",maxHeight:false,maxWidth:false,minHeight:150,minWidth:150,modal:false,position:{my:"center",at:"center",collision:"fit",using:function(a){var b=c(this).css(a).offset().top;b<0&&
c(this).css("top",a.top-b)}},resizable:true,show:null,stack:true,title:"",width:300,zIndex:1E3},_create:function(){this.originalTitle=this.element.attr("title");if(typeof this.originalTitle!=="string")this.originalTitle="";this.options.title=this.options.title||this.originalTitle;var a=this,b=a.options,d=b.title||"&#160;",e=c.ui.dialog.getTitleId(a.element),g=(a.uiDialog=c("<div></div>")).appendTo(document.body).hide().addClass("ui-dialog ui-widget ui-widget-content ui-corner-all "+b.dialogClass).css({zIndex:b.zIndex}).attr("tabIndex",
-1).css("outline",0).keydown(function(i){if(b.closeOnEscape&&i.keyCode&&i.keyCode===c.ui.keyCode.ESCAPE){a.close(i);i.preventDefault()}}).attr({role:"dialog","aria-labelledby":e}).mousedown(function(i){a.moveToTop(false,i)});a.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(g);var f=(a.uiDialogTitlebar=c("<div></div>")).addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(g),h=c('<a href="#"></a>').addClass("ui-dialog-titlebar-close ui-corner-all").attr("role",
"button").hover(function(){h.addClass("ui-state-hover")},function(){h.removeClass("ui-state-hover")}).focus(function(){h.addClass("ui-state-focus")}).blur(function(){h.removeClass("ui-state-focus")}).click(function(i){a.close(i);return false}).appendTo(f);(a.uiDialogTitlebarCloseText=c("<span></span>")).addClass("ui-icon ui-icon-closethick").text(b.closeText).appendTo(h);c("<span></span>").addClass("ui-dialog-title").attr("id",e).html(d).prependTo(f);if(c.isFunction(b.beforeclose)&&!c.isFunction(b.beforeClose))b.beforeClose=
b.beforeclose;f.find("*").add(f).disableSelection();b.draggable&&c.fn.draggable&&a._makeDraggable();b.resizable&&c.fn.resizable&&a._makeResizable();a._createButtons(b.buttons);a._isOpen=false;c.fn.bgiframe&&g.bgiframe()},_init:function(){this.options.autoOpen&&this.open()},destroy:function(){var a=this;a.overlay&&a.overlay.destroy();a.uiDialog.hide();a.element.unbind(".dialog").removeData("dialog").removeClass("ui-dialog-content ui-widget-content").hide().appendTo("body");a.uiDialog.remove();a.originalTitle&&
a.element.attr("title",a.originalTitle);return a},widget:function(){return this.uiDialog},close:function(a){var b=this,d,e;if(false!==b._trigger("beforeClose",a)){b.overlay&&b.overlay.destroy();b.uiDialog.unbind("keypress.ui-dialog");b._isOpen=false;if(b.options.hide)b.uiDialog.hide(b.options.hide,function(){b._trigger("close",a)});else{b.uiDialog.hide();b._trigger("close",a)}c.ui.dialog.overlay.resize();if(b.options.modal){d=0;c(".ui-dialog").each(function(){if(this!==b.uiDialog[0]){e=c(this).css("z-index");
isNaN(e)||(d=Math.max(d,e))}});c.ui.dialog.maxZ=d}return b}},isOpen:function(){return this._isOpen},moveToTop:function(a,b){var d=this,e=d.options;if(e.modal&&!a||!e.stack&&!e.modal)return d._trigger("focus",b);if(e.zIndex>c.ui.dialog.maxZ)c.ui.dialog.maxZ=e.zIndex;if(d.overlay){c.ui.dialog.maxZ+=1;d.overlay.$el.css("z-index",c.ui.dialog.overlay.maxZ=c.ui.dialog.maxZ)}a={scrollTop:d.element.attr("scrollTop"),scrollLeft:d.element.attr("scrollLeft")};c.ui.dialog.maxZ+=1;d.uiDialog.css("z-index",c.ui.dialog.maxZ);
d.element.attr(a);d._trigger("focus",b);return d},open:function(){if(!this._isOpen){var a=this,b=a.options,d=a.uiDialog;a.overlay=b.modal?new c.ui.dialog.overlay(a):null;a._size();a._position(b.position);d.show(b.show);a.moveToTop(true);b.modal&&d.bind("keypress.ui-dialog",function(e){if(e.keyCode===c.ui.keyCode.TAB){var g=c(":tabbable",this),f=g.filter(":first");g=g.filter(":last");if(e.target===g[0]&&!e.shiftKey){f.focus(1);return false}else if(e.target===f[0]&&e.shiftKey){g.focus(1);return false}}});
c(a.element.find(":tabbable").get().concat(d.find(".ui-dialog-buttonpane :tabbable").get().concat(d.get()))).eq(0).focus();a._isOpen=true;a._trigger("open");return a}},_createButtons:function(a){var b=this,d=false,e=c("<div></div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"),g=c("<div></div>").addClass("ui-dialog-buttonset").appendTo(e);b.uiDialog.find(".ui-dialog-buttonpane").remove();typeof a==="object"&&a!==null&&c.each(a,function(){return!(d=true)});if(d){c.each(a,function(f,
h){h=c.isFunction(h)?{click:h,text:f}:h;f=c('<button type="button"></button>').attr(h,true).unbind("click").click(function(){h.click.apply(b.element[0],arguments)}).appendTo(g);c.fn.button&&f.button()});e.appendTo(b.uiDialog)}},_makeDraggable:function(){function a(f){return{position:f.position,offset:f.offset}}var b=this,d=b.options,e=c(document),g;b.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function(f,h){g=
d.height==="auto"?"auto":c(this).height();c(this).height(c(this).height()).addClass("ui-dialog-dragging");b._trigger("dragStart",f,a(h))},drag:function(f,h){b._trigger("drag",f,a(h))},stop:function(f,h){d.position=[h.position.left-e.scrollLeft(),h.position.top-e.scrollTop()];c(this).removeClass("ui-dialog-dragging").height(g);b._trigger("dragStop",f,a(h));c.ui.dialog.overlay.resize()}})},_makeResizable:function(a){function b(f){return{originalPosition:f.originalPosition,originalSize:f.originalSize,
position:f.position,size:f.size}}a=a===j?this.options.resizable:a;var d=this,e=d.options,g=d.uiDialog.css("position");a=typeof a==="string"?a:"n,e,s,w,se,sw,ne,nw";d.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:d.element,maxWidth:e.maxWidth,maxHeight:e.maxHeight,minWidth:e.minWidth,minHeight:d._minHeight(),handles:a,start:function(f,h){c(this).addClass("ui-dialog-resizing");d._trigger("resizeStart",f,b(h))},resize:function(f,h){d._trigger("resize",f,b(h))},stop:function(f,
h){c(this).removeClass("ui-dialog-resizing");e.height=c(this).height();e.width=c(this).width();d._trigger("resizeStop",f,b(h));c.ui.dialog.overlay.resize()}}).css("position",g).find(".ui-resizable-se").addClass("ui-icon ui-icon-grip-diagonal-se")},_minHeight:function(){var a=this.options;return a.height==="auto"?a.minHeight:Math.min(a.minHeight,a.height)},_position:function(a){var b=[],d=[0,0],e;if(a){if(typeof a==="string"||typeof a==="object"&&"0"in a){b=a.split?a.split(" "):[a[0],a[1]];if(b.length===
1)b[1]=b[0];c.each(["left","top"],function(g,f){if(+b[g]===b[g]){d[g]=b[g];b[g]=f}});a={my:b.join(" "),at:b.join(" "),offset:d.join(" ")}}a=c.extend({},c.ui.dialog.prototype.options.position,a)}else a=c.ui.dialog.prototype.options.position;(e=this.uiDialog.is(":visible"))||this.uiDialog.show();this.uiDialog.css({top:0,left:0}).position(c.extend({of:window},a));e||this.uiDialog.hide()},_setOptions:function(a){var b=this,d={},e=false;c.each(a,function(g,f){b._setOption(g,f);if(g in k)e=true;if(g in
l)d[g]=f});e&&this._size();this.uiDialog.is(":data(resizable)")&&this.uiDialog.resizable("option",d)},_setOption:function(a,b){var d=this,e=d.uiDialog;switch(a){case "beforeclose":a="beforeClose";break;case "buttons":d._createButtons(b);break;case "closeText":d.uiDialogTitlebarCloseText.text(""+b);break;case "dialogClass":e.removeClass(d.options.dialogClass).addClass("ui-dialog ui-widget ui-widget-content ui-corner-all "+b);break;case "disabled":b?e.addClass("ui-dialog-disabled"):e.removeClass("ui-dialog-disabled");
break;case "draggable":var g=e.is(":data(draggable)");g&&!b&&e.draggable("destroy");!g&&b&&d._makeDraggable();break;case "position":d._position(b);break;case "resizable":(g=e.is(":data(resizable)"))&&!b&&e.resizable("destroy");g&&typeof b==="string"&&e.resizable("option","handles",b);!g&&b!==false&&d._makeResizable(b);break;case "title":c(".ui-dialog-title",d.uiDialogTitlebar).html(""+(b||"&#160;"));break}c.Widget.prototype._setOption.apply(d,arguments)},_size:function(){var a=this.options,b,d,e=
this.uiDialog.is(":visible");this.element.show().css({width:"auto",minHeight:0,height:0});if(a.minWidth>a.width)a.width=a.minWidth;b=this.uiDialog.css({height:"auto",width:a.width}).height();d=Math.max(0,a.minHeight-b);if(a.height==="auto")if(c.support.minHeight)this.element.css({minHeight:d,height:"auto"});else{this.uiDialog.show();a=this.element.css("height","auto").height();e||this.uiDialog.hide();this.element.height(Math.max(a,d))}else this.element.height(Math.max(a.height-b,0));this.uiDialog.is(":data(resizable)")&&
this.uiDialog.resizable("option","minHeight",this._minHeight())}});c.extend(c.ui.dialog,{version:"1.8.11",uuid:0,maxZ:0,getTitleId:function(a){a=a.attr("id");if(!a){this.uuid+=1;a=this.uuid}return"ui-dialog-title-"+a},overlay:function(a){this.$el=c.ui.dialog.overlay.create(a)}});c.extend(c.ui.dialog.overlay,{instances:[],oldInstances:[],maxZ:0,events:c.map("focus,mousedown,mouseup,keydown,keypress,click".split(","),function(a){return a+".dialog-overlay"}).join(" "),create:function(a){if(this.instances.length===
0){setTimeout(function(){c.ui.dialog.overlay.instances.length&&c(document).bind(c.ui.dialog.overlay.events,function(d){if(c(d.target).zIndex()<c.ui.dialog.overlay.maxZ)return false})},1);c(document).bind("keydown.dialog-overlay",function(d){if(a.options.closeOnEscape&&d.keyCode&&d.keyCode===c.ui.keyCode.ESCAPE){a.close(d);d.preventDefault()}});c(window).bind("resize.dialog-overlay",c.ui.dialog.overlay.resize)}var b=(this.oldInstances.pop()||c("<div></div>").addClass("ui-widget-overlay")).appendTo(document.body).css({width:this.width(),
height:this.height()});c.fn.bgiframe&&b.bgiframe();this.instances.push(b);return b},destroy:function(a){var b=c.inArray(a,this.instances);b!=-1&&this.oldInstances.push(this.instances.splice(b,1)[0]);this.instances.length===0&&c([document,window]).unbind(".dialog-overlay");a.remove();var d=0;c.each(this.instances,function(){d=Math.max(d,this.css("z-index"))});this.maxZ=d},height:function(){var a,b;if(c.browser.msie&&c.browser.version<7){a=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight);
b=Math.max(document.documentElement.offsetHeight,document.body.offsetHeight);return a<b?c(window).height()+"px":a+"px"}else return c(document).height()+"px"},width:function(){var a,b;if(c.browser.msie&&c.browser.version<7){a=Math.max(document.documentElement.scrollWidth,document.body.scrollWidth);b=Math.max(document.documentElement.offsetWidth,document.body.offsetWidth);return a<b?c(window).width()+"px":a+"px"}else return c(document).width()+"px"},resize:function(){var a=c([]);c.each(c.ui.dialog.overlay.instances,
function(){a=a.add(this)});a.css({width:0,height:0}).css({width:c.ui.dialog.overlay.width(),height:c.ui.dialog.overlay.height()})}});c.extend(c.ui.dialog.overlay.prototype,{destroy:function(){c.ui.dialog.overlay.destroy(this.$el)}})})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Slider 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Slider
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function(d){d.widget("ui.slider",d.ui.mouse,{widgetEventPrefix:"slide",options:{animate:false,distance:0,max:100,min:0,orientation:"horizontal",range:false,step:1,value:0,values:null},_create:function(){var b=this,a=this.options;this._mouseSliding=this._keySliding=false;this._animateOff=true;this._handleIndex=null;this._detectOrientation();this._mouseInit();this.element.addClass("ui-slider ui-slider-"+this.orientation+" ui-widget ui-widget-content ui-corner-all");a.disabled&&this.element.addClass("ui-slider-disabled ui-disabled");
this.range=d([]);if(a.range){if(a.range===true){this.range=d("<div></div>");if(!a.values)a.values=[this._valueMin(),this._valueMin()];if(a.values.length&&a.values.length!==2)a.values=[a.values[0],a.values[0]]}else this.range=d("<div></div>");this.range.appendTo(this.element).addClass("ui-slider-range");if(a.range==="min"||a.range==="max")this.range.addClass("ui-slider-range-"+a.range);this.range.addClass("ui-widget-header")}d(".ui-slider-handle",this.element).length===0&&d("<a href='#'></a>").appendTo(this.element).addClass("ui-slider-handle");
if(a.values&&a.values.length)for(;d(".ui-slider-handle",this.element).length<a.values.length;)d("<a href='#'></a>").appendTo(this.element).addClass("ui-slider-handle");this.handles=d(".ui-slider-handle",this.element).addClass("ui-state-default ui-corner-all");this.handle=this.handles.eq(0);this.handles.add(this.range).filter("a").click(function(c){c.preventDefault()}).hover(function(){a.disabled||d(this).addClass("ui-state-hover")},function(){d(this).removeClass("ui-state-hover")}).focus(function(){if(a.disabled)d(this).blur();
else{d(".ui-slider .ui-state-focus").removeClass("ui-state-focus");d(this).addClass("ui-state-focus")}}).blur(function(){d(this).removeClass("ui-state-focus")});this.handles.each(function(c){d(this).data("index.ui-slider-handle",c)});this.handles.keydown(function(c){var e=true,f=d(this).data("index.ui-slider-handle"),h,g,i;if(!b.options.disabled){switch(c.keyCode){case d.ui.keyCode.HOME:case d.ui.keyCode.END:case d.ui.keyCode.PAGE_UP:case d.ui.keyCode.PAGE_DOWN:case d.ui.keyCode.UP:case d.ui.keyCode.RIGHT:case d.ui.keyCode.DOWN:case d.ui.keyCode.LEFT:e=
false;if(!b._keySliding){b._keySliding=true;d(this).addClass("ui-state-active");h=b._start(c,f);if(h===false)return}break}i=b.options.step;h=b.options.values&&b.options.values.length?(g=b.values(f)):(g=b.value());switch(c.keyCode){case d.ui.keyCode.HOME:g=b._valueMin();break;case d.ui.keyCode.END:g=b._valueMax();break;case d.ui.keyCode.PAGE_UP:g=b._trimAlignValue(h+(b._valueMax()-b._valueMin())/5);break;case d.ui.keyCode.PAGE_DOWN:g=b._trimAlignValue(h-(b._valueMax()-b._valueMin())/5);break;case d.ui.keyCode.UP:case d.ui.keyCode.RIGHT:if(h===
b._valueMax())return;g=b._trimAlignValue(h+i);break;case d.ui.keyCode.DOWN:case d.ui.keyCode.LEFT:if(h===b._valueMin())return;g=b._trimAlignValue(h-i);break}b._slide(c,f,g);return e}}).keyup(function(c){var e=d(this).data("index.ui-slider-handle");if(b._keySliding){b._keySliding=false;b._stop(c,e);b._change(c,e);d(this).removeClass("ui-state-active")}});this._refreshValue();this._animateOff=false},destroy:function(){this.handles.remove();this.range.remove();this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-slider-disabled ui-widget ui-widget-content ui-corner-all").removeData("slider").unbind(".slider");
this._mouseDestroy();return this},_mouseCapture:function(b){var a=this.options,c,e,f,h,g;if(a.disabled)return false;this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()};this.elementOffset=this.element.offset();c=this._normValueFromMouse({x:b.pageX,y:b.pageY});e=this._valueMax()-this._valueMin()+1;h=this;this.handles.each(function(i){var j=Math.abs(c-h.values(i));if(e>j){e=j;f=d(this);g=i}});if(a.range===true&&this.values(1)===a.min){g+=1;f=d(this.handles[g])}if(this._start(b,
g)===false)return false;this._mouseSliding=true;h._handleIndex=g;f.addClass("ui-state-active").focus();a=f.offset();this._clickOffset=!d(b.target).parents().andSelf().is(".ui-slider-handle")?{left:0,top:0}:{left:b.pageX-a.left-f.width()/2,top:b.pageY-a.top-f.height()/2-(parseInt(f.css("borderTopWidth"),10)||0)-(parseInt(f.css("borderBottomWidth"),10)||0)+(parseInt(f.css("marginTop"),10)||0)};this.handles.hasClass("ui-state-hover")||this._slide(b,g,c);return this._animateOff=true},_mouseStart:function(){return true},
_mouseDrag:function(b){var a=this._normValueFromMouse({x:b.pageX,y:b.pageY});this._slide(b,this._handleIndex,a);return false},_mouseStop:function(b){this.handles.removeClass("ui-state-active");this._mouseSliding=false;this._stop(b,this._handleIndex);this._change(b,this._handleIndex);this._clickOffset=this._handleIndex=null;return this._animateOff=false},_detectOrientation:function(){this.orientation=this.options.orientation==="vertical"?"vertical":"horizontal"},_normValueFromMouse:function(b){var a;
if(this.orientation==="horizontal"){a=this.elementSize.width;b=b.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)}else{a=this.elementSize.height;b=b.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)}a=b/a;if(a>1)a=1;if(a<0)a=0;if(this.orientation==="vertical")a=1-a;b=this._valueMax()-this._valueMin();return this._trimAlignValue(this._valueMin()+a*b)},_start:function(b,a){var c={handle:this.handles[a],value:this.value()};if(this.options.values&&this.options.values.length){c.value=
this.values(a);c.values=this.values()}return this._trigger("start",b,c)},_slide:function(b,a,c){var e;if(this.options.values&&this.options.values.length){e=this.values(a?0:1);if(this.options.values.length===2&&this.options.range===true&&(a===0&&c>e||a===1&&c<e))c=e;if(c!==this.values(a)){e=this.values();e[a]=c;b=this._trigger("slide",b,{handle:this.handles[a],value:c,values:e});this.values(a?0:1);b!==false&&this.values(a,c,true)}}else if(c!==this.value()){b=this._trigger("slide",b,{handle:this.handles[a],
value:c});b!==false&&this.value(c)}},_stop:function(b,a){var c={handle:this.handles[a],value:this.value()};if(this.options.values&&this.options.values.length){c.value=this.values(a);c.values=this.values()}this._trigger("stop",b,c)},_change:function(b,a){if(!this._keySliding&&!this._mouseSliding){var c={handle:this.handles[a],value:this.value()};if(this.options.values&&this.options.values.length){c.value=this.values(a);c.values=this.values()}this._trigger("change",b,c)}},value:function(b){if(arguments.length){this.options.value=
this._trimAlignValue(b);this._refreshValue();this._change(null,0)}return this._value()},values:function(b,a){var c,e,f;if(arguments.length>1){this.options.values[b]=this._trimAlignValue(a);this._refreshValue();this._change(null,b)}if(arguments.length)if(d.isArray(arguments[0])){c=this.options.values;e=arguments[0];for(f=0;f<c.length;f+=1){c[f]=this._trimAlignValue(e[f]);this._change(null,f)}this._refreshValue()}else return this.options.values&&this.options.values.length?this._values(b):this.value();
else return this._values()},_setOption:function(b,a){var c,e=0;if(d.isArray(this.options.values))e=this.options.values.length;d.Widget.prototype._setOption.apply(this,arguments);switch(b){case "disabled":if(a){this.handles.filter(".ui-state-focus").blur();this.handles.removeClass("ui-state-hover");this.handles.attr("disabled","disabled");this.element.addClass("ui-disabled")}else{this.handles.removeAttr("disabled");this.element.removeClass("ui-disabled")}break;case "orientation":this._detectOrientation();
this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-"+this.orientation);this._refreshValue();break;case "value":this._animateOff=true;this._refreshValue();this._change(null,0);this._animateOff=false;break;case "values":this._animateOff=true;this._refreshValue();for(c=0;c<e;c+=1)this._change(null,c);this._animateOff=false;break}},_value:function(){var b=this.options.value;return b=this._trimAlignValue(b)},_values:function(b){var a,c;if(arguments.length){a=this.options.values[b];
return a=this._trimAlignValue(a)}else{a=this.options.values.slice();for(c=0;c<a.length;c+=1)a[c]=this._trimAlignValue(a[c]);return a}},_trimAlignValue:function(b){if(b<=this._valueMin())return this._valueMin();if(b>=this._valueMax())return this._valueMax();var a=this.options.step>0?this.options.step:1,c=(b-this._valueMin())%a;alignValue=b-c;if(Math.abs(c)*2>=a)alignValue+=c>0?a:-a;return parseFloat(alignValue.toFixed(5))},_valueMin:function(){return this.options.min},_valueMax:function(){return this.options.max},
_refreshValue:function(){var b=this.options.range,a=this.options,c=this,e=!this._animateOff?a.animate:false,f,h={},g,i,j,l;if(this.options.values&&this.options.values.length)this.handles.each(function(k){f=(c.values(k)-c._valueMin())/(c._valueMax()-c._valueMin())*100;h[c.orientation==="horizontal"?"left":"bottom"]=f+"%";d(this).stop(1,1)[e?"animate":"css"](h,a.animate);if(c.options.range===true)if(c.orientation==="horizontal"){if(k===0)c.range.stop(1,1)[e?"animate":"css"]({left:f+"%"},a.animate);
if(k===1)c.range[e?"animate":"css"]({width:f-g+"%"},{queue:false,duration:a.animate})}else{if(k===0)c.range.stop(1,1)[e?"animate":"css"]({bottom:f+"%"},a.animate);if(k===1)c.range[e?"animate":"css"]({height:f-g+"%"},{queue:false,duration:a.animate})}g=f});else{i=this.value();j=this._valueMin();l=this._valueMax();f=l!==j?(i-j)/(l-j)*100:0;h[c.orientation==="horizontal"?"left":"bottom"]=f+"%";this.handle.stop(1,1)[e?"animate":"css"](h,a.animate);if(b==="min"&&this.orientation==="horizontal")this.range.stop(1,
1)[e?"animate":"css"]({width:f+"%"},a.animate);if(b==="max"&&this.orientation==="horizontal")this.range[e?"animate":"css"]({width:100-f+"%"},{queue:false,duration:a.animate});if(b==="min"&&this.orientation==="vertical")this.range.stop(1,1)[e?"animate":"css"]({height:f+"%"},a.animate);if(b==="max"&&this.orientation==="vertical")this.range[e?"animate":"css"]({height:100-f+"%"},{queue:false,duration:a.animate})}}});d.extend(d.ui.slider,{version:"1.8.11"})})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Tabs 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Tabs
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 */
(function(d,p){function u(){return++v}function w(){return++x}var v=0,x=0;d.widget("ui.tabs",{options:{add:null,ajaxOptions:null,cache:false,cookie:null,collapsible:false,disable:null,disabled:[],enable:null,event:"click",fx:null,idPrefix:"ui-tabs-",load:null,panelTemplate:"<div></div>",remove:null,select:null,show:null,spinner:"<em>Loading&#8230;</em>",tabTemplate:"<li><a href='#{href}'><span>#{label}</span></a></li>"},_create:function(){this._tabify(true)},_setOption:function(b,e){if(b=="selected")this.options.collapsible&&
e==this.options.selected||this.select(e);else{this.options[b]=e;this._tabify()}},_tabId:function(b){return b.title&&b.title.replace(/\s/g,"_").replace(/[^\w\u00c0-\uFFFF-]/g,"")||this.options.idPrefix+u()},_sanitizeSelector:function(b){return b.replace(/:/g,"\\:")},_cookie:function(){var b=this.cookie||(this.cookie=this.options.cookie.name||"ui-tabs-"+w());return d.cookie.apply(null,[b].concat(d.makeArray(arguments)))},_ui:function(b,e){return{tab:b,panel:e,index:this.anchors.index(b)}},_cleanup:function(){this.lis.filter(".ui-state-processing").removeClass("ui-state-processing").find("span:data(label.tabs)").each(function(){var b=
d(this);b.html(b.data("label.tabs")).removeData("label.tabs")})},_tabify:function(b){function e(g,f){g.css("display","");!d.support.opacity&&f.opacity&&g[0].style.removeAttribute("filter")}var a=this,c=this.options,h=/^#.+/;this.list=this.element.find("ol,ul").eq(0);this.lis=d(" > li:has(a[href])",this.list);this.anchors=this.lis.map(function(){return d("a",this)[0]});this.panels=d([]);this.anchors.each(function(g,f){var i=d(f).attr("href"),l=i.split("#")[0],q;if(l&&(l===location.toString().split("#")[0]||
(q=d("base")[0])&&l===q.href)){i=f.hash;f.href=i}if(h.test(i))a.panels=a.panels.add(a.element.find(a._sanitizeSelector(i)));else if(i&&i!=="#"){d.data(f,"href.tabs",i);d.data(f,"load.tabs",i.replace(/#.*$/,""));i=a._tabId(f);f.href="#"+i;f=a.element.find("#"+i);if(!f.length){f=d(c.panelTemplate).attr("id",i).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").insertAfter(a.panels[g-1]||a.list);f.data("destroy.tabs",true)}a.panels=a.panels.add(f)}else c.disabled.push(g)});if(b){this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all");
this.list.addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all");this.lis.addClass("ui-state-default ui-corner-top");this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom");if(c.selected===p){location.hash&&this.anchors.each(function(g,f){if(f.hash==location.hash){c.selected=g;return false}});if(typeof c.selected!=="number"&&c.cookie)c.selected=parseInt(a._cookie(),10);if(typeof c.selected!=="number"&&this.lis.filter(".ui-tabs-selected").length)c.selected=
this.lis.index(this.lis.filter(".ui-tabs-selected"));c.selected=c.selected||(this.lis.length?0:-1)}else if(c.selected===null)c.selected=-1;c.selected=c.selected>=0&&this.anchors[c.selected]||c.selected<0?c.selected:0;c.disabled=d.unique(c.disabled.concat(d.map(this.lis.filter(".ui-state-disabled"),function(g){return a.lis.index(g)}))).sort();d.inArray(c.selected,c.disabled)!=-1&&c.disabled.splice(d.inArray(c.selected,c.disabled),1);this.panels.addClass("ui-tabs-hide");this.lis.removeClass("ui-tabs-selected ui-state-active");
if(c.selected>=0&&this.anchors.length){a.element.find(a._sanitizeSelector(a.anchors[c.selected].hash)).removeClass("ui-tabs-hide");this.lis.eq(c.selected).addClass("ui-tabs-selected ui-state-active");a.element.queue("tabs",function(){a._trigger("show",null,a._ui(a.anchors[c.selected],a.element.find(a._sanitizeSelector(a.anchors[c.selected].hash))[0]))});this.load(c.selected)}d(window).bind("unload",function(){a.lis.add(a.anchors).unbind(".tabs");a.lis=a.anchors=a.panels=null})}else c.selected=this.lis.index(this.lis.filter(".ui-tabs-selected"));
this.element[c.collapsible?"addClass":"removeClass"]("ui-tabs-collapsible");c.cookie&&this._cookie(c.selected,c.cookie);b=0;for(var j;j=this.lis[b];b++)d(j)[d.inArray(b,c.disabled)!=-1&&!d(j).hasClass("ui-tabs-selected")?"addClass":"removeClass"]("ui-state-disabled");c.cache===false&&this.anchors.removeData("cache.tabs");this.lis.add(this.anchors).unbind(".tabs");if(c.event!=="mouseover"){var k=function(g,f){f.is(":not(.ui-state-disabled)")&&f.addClass("ui-state-"+g)},n=function(g,f){f.removeClass("ui-state-"+
g)};this.lis.bind("mouseover.tabs",function(){k("hover",d(this))});this.lis.bind("mouseout.tabs",function(){n("hover",d(this))});this.anchors.bind("focus.tabs",function(){k("focus",d(this).closest("li"))});this.anchors.bind("blur.tabs",function(){n("focus",d(this).closest("li"))})}var m,o;if(c.fx)if(d.isArray(c.fx)){m=c.fx[0];o=c.fx[1]}else m=o=c.fx;var r=o?function(g,f){d(g).closest("li").addClass("ui-tabs-selected ui-state-active");f.hide().removeClass("ui-tabs-hide").animate(o,o.duration||"normal",
function(){e(f,o);a._trigger("show",null,a._ui(g,f[0]))})}:function(g,f){d(g).closest("li").addClass("ui-tabs-selected ui-state-active");f.removeClass("ui-tabs-hide");a._trigger("show",null,a._ui(g,f[0]))},s=m?function(g,f){f.animate(m,m.duration||"normal",function(){a.lis.removeClass("ui-tabs-selected ui-state-active");f.addClass("ui-tabs-hide");e(f,m);a.element.dequeue("tabs")})}:function(g,f){a.lis.removeClass("ui-tabs-selected ui-state-active");f.addClass("ui-tabs-hide");a.element.dequeue("tabs")};
this.anchors.bind(c.event+".tabs",function(){var g=this,f=d(g).closest("li"),i=a.panels.filter(":not(.ui-tabs-hide)"),l=a.element.find(a._sanitizeSelector(g.hash));if(f.hasClass("ui-tabs-selected")&&!c.collapsible||f.hasClass("ui-state-disabled")||f.hasClass("ui-state-processing")||a.panels.filter(":animated").length||a._trigger("select",null,a._ui(this,l[0]))===false){this.blur();return false}c.selected=a.anchors.index(this);a.abort();if(c.collapsible)if(f.hasClass("ui-tabs-selected")){c.selected=
-1;c.cookie&&a._cookie(c.selected,c.cookie);a.element.queue("tabs",function(){s(g,i)}).dequeue("tabs");this.blur();return false}else if(!i.length){c.cookie&&a._cookie(c.selected,c.cookie);a.element.queue("tabs",function(){r(g,l)});a.load(a.anchors.index(this));this.blur();return false}c.cookie&&a._cookie(c.selected,c.cookie);if(l.length){i.length&&a.element.queue("tabs",function(){s(g,i)});a.element.queue("tabs",function(){r(g,l)});a.load(a.anchors.index(this))}else throw"jQuery UI Tabs: Mismatching fragment identifier.";
d.browser.msie&&this.blur()});this.anchors.bind("click.tabs",function(){return false})},_getIndex:function(b){if(typeof b=="string")b=this.anchors.index(this.anchors.filter("[href$="+b+"]"));return b},destroy:function(){var b=this.options;this.abort();this.element.unbind(".tabs").removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible").removeData("tabs");this.list.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all");this.anchors.each(function(){var e=
d.data(this,"href.tabs");if(e)this.href=e;var a=d(this).unbind(".tabs");d.each(["href","load","cache"],function(c,h){a.removeData(h+".tabs")})});this.lis.unbind(".tabs").add(this.panels).each(function(){d.data(this,"destroy.tabs")?d(this).remove():d(this).removeClass("ui-state-default ui-corner-top ui-tabs-selected ui-state-active ui-state-hover ui-state-focus ui-state-disabled ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide")});b.cookie&&this._cookie(null,b.cookie);return this},add:function(b,
e,a){if(a===p)a=this.anchors.length;var c=this,h=this.options;e=d(h.tabTemplate.replace(/#\{href\}/g,b).replace(/#\{label\}/g,e));b=!b.indexOf("#")?b.replace("#",""):this._tabId(d("a",e)[0]);e.addClass("ui-state-default ui-corner-top").data("destroy.tabs",true);var j=c.element.find("#"+b);j.length||(j=d(h.panelTemplate).attr("id",b).data("destroy.tabs",true));j.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide");if(a>=this.lis.length){e.appendTo(this.list);j.appendTo(this.list[0].parentNode)}else{e.insertBefore(this.lis[a]);
j.insertBefore(this.panels[a])}h.disabled=d.map(h.disabled,function(k){return k>=a?++k:k});this._tabify();if(this.anchors.length==1){h.selected=0;e.addClass("ui-tabs-selected ui-state-active");j.removeClass("ui-tabs-hide");this.element.queue("tabs",function(){c._trigger("show",null,c._ui(c.anchors[0],c.panels[0]))});this.load(0)}this._trigger("add",null,this._ui(this.anchors[a],this.panels[a]));return this},remove:function(b){b=this._getIndex(b);var e=this.options,a=this.lis.eq(b).remove(),c=this.panels.eq(b).remove();
if(a.hasClass("ui-tabs-selected")&&this.anchors.length>1)this.select(b+(b+1<this.anchors.length?1:-1));e.disabled=d.map(d.grep(e.disabled,function(h){return h!=b}),function(h){return h>=b?--h:h});this._tabify();this._trigger("remove",null,this._ui(a.find("a")[0],c[0]));return this},enable:function(b){b=this._getIndex(b);var e=this.options;if(d.inArray(b,e.disabled)!=-1){this.lis.eq(b).removeClass("ui-state-disabled");e.disabled=d.grep(e.disabled,function(a){return a!=b});this._trigger("enable",null,
this._ui(this.anchors[b],this.panels[b]));return this}},disable:function(b){b=this._getIndex(b);var e=this.options;if(b!=e.selected){this.lis.eq(b).addClass("ui-state-disabled");e.disabled.push(b);e.disabled.sort();this._trigger("disable",null,this._ui(this.anchors[b],this.panels[b]))}return this},select:function(b){b=this._getIndex(b);if(b==-1)if(this.options.collapsible&&this.options.selected!=-1)b=this.options.selected;else return this;this.anchors.eq(b).trigger(this.options.event+".tabs");return this},
load:function(b){b=this._getIndex(b);var e=this,a=this.options,c=this.anchors.eq(b)[0],h=d.data(c,"load.tabs");this.abort();if(!h||this.element.queue("tabs").length!==0&&d.data(c,"cache.tabs"))this.element.dequeue("tabs");else{this.lis.eq(b).addClass("ui-state-processing");if(a.spinner){var j=d("span",c);j.data("label.tabs",j.html()).html(a.spinner)}this.xhr=d.ajax(d.extend({},a.ajaxOptions,{url:h,success:function(k,n){e.element.find(e._sanitizeSelector(c.hash)).html(k);e._cleanup();a.cache&&d.data(c,
"cache.tabs",true);e._trigger("load",null,e._ui(e.anchors[b],e.panels[b]));try{a.ajaxOptions.success(k,n)}catch(m){}},error:function(k,n){e._cleanup();e._trigger("load",null,e._ui(e.anchors[b],e.panels[b]));try{a.ajaxOptions.error(k,n,b,c)}catch(m){}}}));e.element.dequeue("tabs");return this}},abort:function(){this.element.queue([]);this.panels.stop(false,true);this.element.queue("tabs",this.element.queue("tabs").splice(-2,2));if(this.xhr){this.xhr.abort();delete this.xhr}this._cleanup();return this},
url:function(b,e){this.anchors.eq(b).removeData("cache.tabs").data("load.tabs",e);return this},length:function(){return this.anchors.length}});d.extend(d.ui.tabs,{version:"1.8.11"});d.extend(d.ui.tabs.prototype,{rotation:null,rotate:function(b,e){var a=this,c=this.options,h=a._rotate||(a._rotate=function(j){clearTimeout(a.rotation);a.rotation=setTimeout(function(){var k=c.selected;a.select(++k<a.anchors.length?k:0)},b);j&&j.stopPropagation()});e=a._unrotate||(a._unrotate=!e?function(j){j.clientX&&
a.rotate(null)}:function(){t=c.selected;h()});if(b){this.element.bind("tabsshow",h);this.anchors.bind(c.event+".tabs",e);h()}else{clearTimeout(a.rotation);this.element.unbind("tabsshow",h);this.anchors.unbind(c.event+".tabs",e);delete this._rotate;delete this._unrotate}return this}})})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Datepicker 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Datepicker
 *
 * Depends:
 *	jquery.ui.core.js
 */
(function(d,A){function K(){this.debug=false;this._curInst=null;this._keyEvent=false;this._disabledInputs=[];this._inDialog=this._datepickerShowing=false;this._mainDivId="ui-datepicker-div";this._inlineClass="ui-datepicker-inline";this._appendClass="ui-datepicker-append";this._triggerClass="ui-datepicker-trigger";this._dialogClass="ui-datepicker-dialog";this._disableClass="ui-datepicker-disabled";this._unselectableClass="ui-datepicker-unselectable";this._currentClass="ui-datepicker-current-day";this._dayOverClass=
"ui-datepicker-days-cell-over";this.regional=[];this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su",
"Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:false,showMonthAfterYear:false,yearSuffix:""};this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:false,hideIfNoPrevNext:false,navigationAsDateFormat:false,gotoCurrent:false,changeMonth:false,changeYear:false,yearRange:"c-10:c+10",showOtherMonths:false,selectOtherMonths:false,showWeek:false,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",
minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:true,showButtonPanel:false,autoSize:false};d.extend(this._defaults,this.regional[""]);this.dpDiv=d('<div id="'+this._mainDivId+'" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')}function F(a,b){d.extend(a,b);for(var c in b)if(b[c]==
null||b[c]==A)a[c]=b[c];return a}d.extend(d.ui,{datepicker:{version:"1.8.11"}});var y=(new Date).getTime();d.extend(K.prototype,{markerClassName:"hasDatepicker",log:function(){this.debug&&console.log.apply("",arguments)},_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(a){F(this._defaults,a||{});return this},_attachDatepicker:function(a,b){var c=null;for(var e in this._defaults){var f=a.getAttribute("date:"+e);if(f){c=c||{};try{c[e]=eval(f)}catch(h){c[e]=f}}}e=a.nodeName.toLowerCase();
f=e=="div"||e=="span";if(!a.id){this.uuid+=1;a.id="dp"+this.uuid}var i=this._newInst(d(a),f);i.settings=d.extend({},b||{},c||{});if(e=="input")this._connectDatepicker(a,i);else f&&this._inlineDatepicker(a,i)},_newInst:function(a,b){return{id:a[0].id.replace(/([^A-Za-z0-9_-])/g,"\\\\$1"),input:a,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:b,dpDiv:!b?this.dpDiv:d('<div class="'+this._inlineClass+' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')}},
_connectDatepicker:function(a,b){var c=d(a);b.append=d([]);b.trigger=d([]);if(!c.hasClass(this.markerClassName)){this._attachments(c,b);c.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp).bind("setData.datepicker",function(e,f,h){b.settings[f]=h}).bind("getData.datepicker",function(e,f){return this._get(b,f)});this._autoSize(b);d.data(a,"datepicker",b)}},_attachments:function(a,b){var c=this._get(b,"appendText"),e=this._get(b,"isRTL");b.append&&
b.append.remove();if(c){b.append=d('<span class="'+this._appendClass+'">'+c+"</span>");a[e?"before":"after"](b.append)}a.unbind("focus",this._showDatepicker);b.trigger&&b.trigger.remove();c=this._get(b,"showOn");if(c=="focus"||c=="both")a.focus(this._showDatepicker);if(c=="button"||c=="both"){c=this._get(b,"buttonText");var f=this._get(b,"buttonImage");b.trigger=d(this._get(b,"buttonImageOnly")?d("<img/>").addClass(this._triggerClass).attr({src:f,alt:c,title:c}):d('<button type="button"></button>').addClass(this._triggerClass).html(f==
""?c:d("<img/>").attr({src:f,alt:c,title:c})));a[e?"before":"after"](b.trigger);b.trigger.click(function(){d.datepicker._datepickerShowing&&d.datepicker._lastInput==a[0]?d.datepicker._hideDatepicker():d.datepicker._showDatepicker(a[0]);return false})}},_autoSize:function(a){if(this._get(a,"autoSize")&&!a.inline){var b=new Date(2009,11,20),c=this._get(a,"dateFormat");if(c.match(/[DM]/)){var e=function(f){for(var h=0,i=0,g=0;g<f.length;g++)if(f[g].length>h){h=f[g].length;i=g}return i};b.setMonth(e(this._get(a,
c.match(/MM/)?"monthNames":"monthNamesShort")));b.setDate(e(this._get(a,c.match(/DD/)?"dayNames":"dayNamesShort"))+20-b.getDay())}a.input.attr("size",this._formatDate(a,b).length)}},_inlineDatepicker:function(a,b){var c=d(a);if(!c.hasClass(this.markerClassName)){c.addClass(this.markerClassName).append(b.dpDiv).bind("setData.datepicker",function(e,f,h){b.settings[f]=h}).bind("getData.datepicker",function(e,f){return this._get(b,f)});d.data(a,"datepicker",b);this._setDate(b,this._getDefaultDate(b),
true);this._updateDatepicker(b);this._updateAlternate(b);b.dpDiv.show()}},_dialogDatepicker:function(a,b,c,e,f){a=this._dialogInst;if(!a){this.uuid+=1;this._dialogInput=d('<input type="text" id="'+("dp"+this.uuid)+'" style="position: absolute; top: -100px; width: 0px; z-index: -10;"/>');this._dialogInput.keydown(this._doKeyDown);d("body").append(this._dialogInput);a=this._dialogInst=this._newInst(this._dialogInput,false);a.settings={};d.data(this._dialogInput[0],"datepicker",a)}F(a.settings,e||{});
b=b&&b.constructor==Date?this._formatDate(a,b):b;this._dialogInput.val(b);this._pos=f?f.length?f:[f.pageX,f.pageY]:null;if(!this._pos)this._pos=[document.documentElement.clientWidth/2-100+(document.documentElement.scrollLeft||document.body.scrollLeft),document.documentElement.clientHeight/2-150+(document.documentElement.scrollTop||document.body.scrollTop)];this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px");a.settings.onSelect=c;this._inDialog=true;this.dpDiv.addClass(this._dialogClass);
this._showDatepicker(this._dialogInput[0]);d.blockUI&&d.blockUI(this.dpDiv);d.data(this._dialogInput[0],"datepicker",a);return this},_destroyDatepicker:function(a){var b=d(a),c=d.data(a,"datepicker");if(b.hasClass(this.markerClassName)){var e=a.nodeName.toLowerCase();d.removeData(a,"datepicker");if(e=="input"){c.append.remove();c.trigger.remove();b.removeClass(this.markerClassName).unbind("focus",this._showDatepicker).unbind("keydown",this._doKeyDown).unbind("keypress",this._doKeyPress).unbind("keyup",
this._doKeyUp)}else if(e=="div"||e=="span")b.removeClass(this.markerClassName).empty()}},_enableDatepicker:function(a){var b=d(a),c=d.data(a,"datepicker");if(b.hasClass(this.markerClassName)){var e=a.nodeName.toLowerCase();if(e=="input"){a.disabled=false;c.trigger.filter("button").each(function(){this.disabled=false}).end().filter("img").css({opacity:"1.0",cursor:""})}else if(e=="div"||e=="span")b.children("."+this._inlineClass).children().removeClass("ui-state-disabled");this._disabledInputs=d.map(this._disabledInputs,
function(f){return f==a?null:f})}},_disableDatepicker:function(a){var b=d(a),c=d.data(a,"datepicker");if(b.hasClass(this.markerClassName)){var e=a.nodeName.toLowerCase();if(e=="input"){a.disabled=true;c.trigger.filter("button").each(function(){this.disabled=true}).end().filter("img").css({opacity:"0.5",cursor:"default"})}else if(e=="div"||e=="span")b.children("."+this._inlineClass).children().addClass("ui-state-disabled");this._disabledInputs=d.map(this._disabledInputs,function(f){return f==a?null:
f});this._disabledInputs[this._disabledInputs.length]=a}},_isDisabledDatepicker:function(a){if(!a)return false;for(var b=0;b<this._disabledInputs.length;b++)if(this._disabledInputs[b]==a)return true;return false},_getInst:function(a){try{return d.data(a,"datepicker")}catch(b){throw"Missing instance data for this datepicker";}},_optionDatepicker:function(a,b,c){var e=this._getInst(a);if(arguments.length==2&&typeof b=="string")return b=="defaults"?d.extend({},d.datepicker._defaults):e?b=="all"?d.extend({},
e.settings):this._get(e,b):null;var f=b||{};if(typeof b=="string"){f={};f[b]=c}if(e){this._curInst==e&&this._hideDatepicker();var h=this._getDateDatepicker(a,true),i=this._getMinMaxDate(e,"min"),g=this._getMinMaxDate(e,"max");F(e.settings,f);if(i!==null&&f.dateFormat!==A&&f.minDate===A)e.settings.minDate=this._formatDate(e,i);if(g!==null&&f.dateFormat!==A&&f.maxDate===A)e.settings.maxDate=this._formatDate(e,g);this._attachments(d(a),e);this._autoSize(e);this._setDateDatepicker(a,h);this._updateDatepicker(e)}},
_changeDatepicker:function(a,b,c){this._optionDatepicker(a,b,c)},_refreshDatepicker:function(a){(a=this._getInst(a))&&this._updateDatepicker(a)},_setDateDatepicker:function(a,b){if(a=this._getInst(a)){this._setDate(a,b);this._updateDatepicker(a);this._updateAlternate(a)}},_getDateDatepicker:function(a,b){(a=this._getInst(a))&&!a.inline&&this._setDateFromField(a,b);return a?this._getDate(a):null},_doKeyDown:function(a){var b=d.datepicker._getInst(a.target),c=true,e=b.dpDiv.is(".ui-datepicker-rtl");
b._keyEvent=true;if(d.datepicker._datepickerShowing)switch(a.keyCode){case 9:d.datepicker._hideDatepicker();c=false;break;case 13:c=d("td."+d.datepicker._dayOverClass+":not(."+d.datepicker._currentClass+")",b.dpDiv);c[0]?d.datepicker._selectDay(a.target,b.selectedMonth,b.selectedYear,c[0]):d.datepicker._hideDatepicker();return false;case 27:d.datepicker._hideDatepicker();break;case 33:d.datepicker._adjustDate(a.target,a.ctrlKey?-d.datepicker._get(b,"stepBigMonths"):-d.datepicker._get(b,"stepMonths"),
"M");break;case 34:d.datepicker._adjustDate(a.target,a.ctrlKey?+d.datepicker._get(b,"stepBigMonths"):+d.datepicker._get(b,"stepMonths"),"M");break;case 35:if(a.ctrlKey||a.metaKey)d.datepicker._clearDate(a.target);c=a.ctrlKey||a.metaKey;break;case 36:if(a.ctrlKey||a.metaKey)d.datepicker._gotoToday(a.target);c=a.ctrlKey||a.metaKey;break;case 37:if(a.ctrlKey||a.metaKey)d.datepicker._adjustDate(a.target,e?+1:-1,"D");c=a.ctrlKey||a.metaKey;if(a.originalEvent.altKey)d.datepicker._adjustDate(a.target,a.ctrlKey?
-d.datepicker._get(b,"stepBigMonths"):-d.datepicker._get(b,"stepMonths"),"M");break;case 38:if(a.ctrlKey||a.metaKey)d.datepicker._adjustDate(a.target,-7,"D");c=a.ctrlKey||a.metaKey;break;case 39:if(a.ctrlKey||a.metaKey)d.datepicker._adjustDate(a.target,e?-1:+1,"D");c=a.ctrlKey||a.metaKey;if(a.originalEvent.altKey)d.datepicker._adjustDate(a.target,a.ctrlKey?+d.datepicker._get(b,"stepBigMonths"):+d.datepicker._get(b,"stepMonths"),"M");break;case 40:if(a.ctrlKey||a.metaKey)d.datepicker._adjustDate(a.target,
+7,"D");c=a.ctrlKey||a.metaKey;break;default:c=false}else if(a.keyCode==36&&a.ctrlKey)d.datepicker._showDatepicker(this);else c=false;if(c){a.preventDefault();a.stopPropagation()}},_doKeyPress:function(a){var b=d.datepicker._getInst(a.target);if(d.datepicker._get(b,"constrainInput")){b=d.datepicker._possibleChars(d.datepicker._get(b,"dateFormat"));var c=String.fromCharCode(a.charCode==A?a.keyCode:a.charCode);return a.ctrlKey||a.metaKey||c<" "||!b||b.indexOf(c)>-1}},_doKeyUp:function(a){a=d.datepicker._getInst(a.target);
if(a.input.val()!=a.lastVal)try{if(d.datepicker.parseDate(d.datepicker._get(a,"dateFormat"),a.input?a.input.val():null,d.datepicker._getFormatConfig(a))){d.datepicker._setDateFromField(a);d.datepicker._updateAlternate(a);d.datepicker._updateDatepicker(a)}}catch(b){d.datepicker.log(b)}return true},_showDatepicker:function(a){a=a.target||a;if(a.nodeName.toLowerCase()!="input")a=d("input",a.parentNode)[0];if(!(d.datepicker._isDisabledDatepicker(a)||d.datepicker._lastInput==a)){var b=d.datepicker._getInst(a);
d.datepicker._curInst&&d.datepicker._curInst!=b&&d.datepicker._curInst.dpDiv.stop(true,true);var c=d.datepicker._get(b,"beforeShow");F(b.settings,c?c.apply(a,[a,b]):{});b.lastVal=null;d.datepicker._lastInput=a;d.datepicker._setDateFromField(b);if(d.datepicker._inDialog)a.value="";if(!d.datepicker._pos){d.datepicker._pos=d.datepicker._findPos(a);d.datepicker._pos[1]+=a.offsetHeight}var e=false;d(a).parents().each(function(){e|=d(this).css("position")=="fixed";return!e});if(e&&d.browser.opera){d.datepicker._pos[0]-=
document.documentElement.scrollLeft;d.datepicker._pos[1]-=document.documentElement.scrollTop}c={left:d.datepicker._pos[0],top:d.datepicker._pos[1]};d.datepicker._pos=null;b.dpDiv.empty();b.dpDiv.css({position:"absolute",display:"block",top:"-1000px"});d.datepicker._updateDatepicker(b);c=d.datepicker._checkOffset(b,c,e);b.dpDiv.css({position:d.datepicker._inDialog&&d.blockUI?"static":e?"fixed":"absolute",display:"none",left:c.left+"px",top:c.top+"px"});if(!b.inline){c=d.datepicker._get(b,"showAnim");
var f=d.datepicker._get(b,"duration"),h=function(){d.datepicker._datepickerShowing=true;var i=b.dpDiv.find("iframe.ui-datepicker-cover");if(i.length){var g=d.datepicker._getBorders(b.dpDiv);i.css({left:-g[0],top:-g[1],width:b.dpDiv.outerWidth(),height:b.dpDiv.outerHeight()})}};b.dpDiv.zIndex(d(a).zIndex()+1);d.effects&&d.effects[c]?b.dpDiv.show(c,d.datepicker._get(b,"showOptions"),f,h):b.dpDiv[c||"show"](c?f:null,h);if(!c||!f)h();b.input.is(":visible")&&!b.input.is(":disabled")&&b.input.focus();d.datepicker._curInst=
b}}},_updateDatepicker:function(a){var b=this,c=d.datepicker._getBorders(a.dpDiv);a.dpDiv.empty().append(this._generateHTML(a));var e=a.dpDiv.find("iframe.ui-datepicker-cover");e.length&&e.css({left:-c[0],top:-c[1],width:a.dpDiv.outerWidth(),height:a.dpDiv.outerHeight()});a.dpDiv.find("button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a").bind("mouseout",function(){d(this).removeClass("ui-state-hover");this.className.indexOf("ui-datepicker-prev")!=-1&&d(this).removeClass("ui-datepicker-prev-hover");
this.className.indexOf("ui-datepicker-next")!=-1&&d(this).removeClass("ui-datepicker-next-hover")}).bind("mouseover",function(){if(!b._isDisabledDatepicker(a.inline?a.dpDiv.parent()[0]:a.input[0])){d(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");d(this).addClass("ui-state-hover");this.className.indexOf("ui-datepicker-prev")!=-1&&d(this).addClass("ui-datepicker-prev-hover");this.className.indexOf("ui-datepicker-next")!=-1&&d(this).addClass("ui-datepicker-next-hover")}}).end().find("."+
this._dayOverClass+" a").trigger("mouseover").end();c=this._getNumberOfMonths(a);e=c[1];e>1?a.dpDiv.addClass("ui-datepicker-multi-"+e).css("width",17*e+"em"):a.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");a.dpDiv[(c[0]!=1||c[1]!=1?"add":"remove")+"Class"]("ui-datepicker-multi");a.dpDiv[(this._get(a,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl");a==d.datepicker._curInst&&d.datepicker._datepickerShowing&&a.input&&a.input.is(":visible")&&!a.input.is(":disabled")&&
a.input[0]!=document.activeElement&&a.input.focus();if(a.yearshtml){var f=a.yearshtml;setTimeout(function(){f===a.yearshtml&&a.dpDiv.find("select.ui-datepicker-year:first").replaceWith(a.yearshtml);f=a.yearshtml=null},0)}},_getBorders:function(a){var b=function(c){return{thin:1,medium:2,thick:3}[c]||c};return[parseFloat(b(a.css("border-left-width"))),parseFloat(b(a.css("border-top-width")))]},_checkOffset:function(a,b,c){var e=a.dpDiv.outerWidth(),f=a.dpDiv.outerHeight(),h=a.input?a.input.outerWidth():
0,i=a.input?a.input.outerHeight():0,g=document.documentElement.clientWidth+d(document).scrollLeft(),j=document.documentElement.clientHeight+d(document).scrollTop();b.left-=this._get(a,"isRTL")?e-h:0;b.left-=c&&b.left==a.input.offset().left?d(document).scrollLeft():0;b.top-=c&&b.top==a.input.offset().top+i?d(document).scrollTop():0;b.left-=Math.min(b.left,b.left+e>g&&g>e?Math.abs(b.left+e-g):0);b.top-=Math.min(b.top,b.top+f>j&&j>f?Math.abs(f+i):0);return b},_findPos:function(a){for(var b=this._get(this._getInst(a),
"isRTL");a&&(a.type=="hidden"||a.nodeType!=1||d.expr.filters.hidden(a));)a=a[b?"previousSibling":"nextSibling"];a=d(a).offset();return[a.left,a.top]},_hideDatepicker:function(a){var b=this._curInst;if(!(!b||a&&b!=d.data(a,"datepicker")))if(this._datepickerShowing){a=this._get(b,"showAnim");var c=this._get(b,"duration"),e=function(){d.datepicker._tidyDialog(b);this._curInst=null};d.effects&&d.effects[a]?b.dpDiv.hide(a,d.datepicker._get(b,"showOptions"),c,e):b.dpDiv[a=="slideDown"?"slideUp":a=="fadeIn"?
"fadeOut":"hide"](a?c:null,e);a||e();if(a=this._get(b,"onClose"))a.apply(b.input?b.input[0]:null,[b.input?b.input.val():"",b]);this._datepickerShowing=false;this._lastInput=null;if(this._inDialog){this._dialogInput.css({position:"absolute",left:"0",top:"-100px"});if(d.blockUI){d.unblockUI();d("body").append(this.dpDiv)}}this._inDialog=false}},_tidyDialog:function(a){a.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")},_checkExternalClick:function(a){if(d.datepicker._curInst){a=
d(a.target);a[0].id!=d.datepicker._mainDivId&&a.parents("#"+d.datepicker._mainDivId).length==0&&!a.hasClass(d.datepicker.markerClassName)&&!a.hasClass(d.datepicker._triggerClass)&&d.datepicker._datepickerShowing&&!(d.datepicker._inDialog&&d.blockUI)&&d.datepicker._hideDatepicker()}},_adjustDate:function(a,b,c){a=d(a);var e=this._getInst(a[0]);if(!this._isDisabledDatepicker(a[0])){this._adjustInstDate(e,b+(c=="M"?this._get(e,"showCurrentAtPos"):0),c);this._updateDatepicker(e)}},_gotoToday:function(a){a=
d(a);var b=this._getInst(a[0]);if(this._get(b,"gotoCurrent")&&b.currentDay){b.selectedDay=b.currentDay;b.drawMonth=b.selectedMonth=b.currentMonth;b.drawYear=b.selectedYear=b.currentYear}else{var c=new Date;b.selectedDay=c.getDate();b.drawMonth=b.selectedMonth=c.getMonth();b.drawYear=b.selectedYear=c.getFullYear()}this._notifyChange(b);this._adjustDate(a)},_selectMonthYear:function(a,b,c){a=d(a);var e=this._getInst(a[0]);e._selectingMonthYear=false;e["selected"+(c=="M"?"Month":"Year")]=e["draw"+(c==
"M"?"Month":"Year")]=parseInt(b.options[b.selectedIndex].value,10);this._notifyChange(e);this._adjustDate(a)},_clickMonthYear:function(a){var b=this._getInst(d(a)[0]);b.input&&b._selectingMonthYear&&setTimeout(function(){b.input.focus()},0);b._selectingMonthYear=!b._selectingMonthYear},_selectDay:function(a,b,c,e){var f=d(a);if(!(d(e).hasClass(this._unselectableClass)||this._isDisabledDatepicker(f[0]))){f=this._getInst(f[0]);f.selectedDay=f.currentDay=d("a",e).html();f.selectedMonth=f.currentMonth=
b;f.selectedYear=f.currentYear=c;this._selectDate(a,this._formatDate(f,f.currentDay,f.currentMonth,f.currentYear))}},_clearDate:function(a){a=d(a);this._getInst(a[0]);this._selectDate(a,"")},_selectDate:function(a,b){a=this._getInst(d(a)[0]);b=b!=null?b:this._formatDate(a);a.input&&a.input.val(b);this._updateAlternate(a);var c=this._get(a,"onSelect");if(c)c.apply(a.input?a.input[0]:null,[b,a]);else a.input&&a.input.trigger("change");if(a.inline)this._updateDatepicker(a);else{this._hideDatepicker();
this._lastInput=a.input[0];typeof a.input[0]!="object"&&a.input.focus();this._lastInput=null}},_updateAlternate:function(a){var b=this._get(a,"altField");if(b){var c=this._get(a,"altFormat")||this._get(a,"dateFormat"),e=this._getDate(a),f=this.formatDate(c,e,this._getFormatConfig(a));d(b).each(function(){d(this).val(f)})}},noWeekends:function(a){a=a.getDay();return[a>0&&a<6,""]},iso8601Week:function(a){a=new Date(a.getTime());a.setDate(a.getDate()+4-(a.getDay()||7));var b=a.getTime();a.setMonth(0);
a.setDate(1);return Math.floor(Math.round((b-a)/864E5)/7)+1},parseDate:function(a,b,c){if(a==null||b==null)throw"Invalid arguments";b=typeof b=="object"?b.toString():b+"";if(b=="")return null;var e=(c?c.shortYearCutoff:null)||this._defaults.shortYearCutoff;e=typeof e!="string"?e:(new Date).getFullYear()%100+parseInt(e,10);for(var f=(c?c.dayNamesShort:null)||this._defaults.dayNamesShort,h=(c?c.dayNames:null)||this._defaults.dayNames,i=(c?c.monthNamesShort:null)||this._defaults.monthNamesShort,g=(c?
c.monthNames:null)||this._defaults.monthNames,j=c=-1,l=-1,u=-1,k=false,o=function(p){(p=z+1<a.length&&a.charAt(z+1)==p)&&z++;return p},m=function(p){var v=o(p);p=new RegExp("^\\d{1,"+(p=="@"?14:p=="!"?20:p=="y"&&v?4:p=="o"?3:2)+"}");p=b.substring(s).match(p);if(!p)throw"Missing number at position "+s;s+=p[0].length;return parseInt(p[0],10)},n=function(p,v,H){p=o(p)?H:v;for(v=0;v<p.length;v++)if(b.substr(s,p[v].length).toLowerCase()==p[v].toLowerCase()){s+=p[v].length;return v+1}throw"Unknown name at position "+
s;},r=function(){if(b.charAt(s)!=a.charAt(z))throw"Unexpected literal at position "+s;s++},s=0,z=0;z<a.length;z++)if(k)if(a.charAt(z)=="'"&&!o("'"))k=false;else r();else switch(a.charAt(z)){case "d":l=m("d");break;case "D":n("D",f,h);break;case "o":u=m("o");break;case "m":j=m("m");break;case "M":j=n("M",i,g);break;case "y":c=m("y");break;case "@":var w=new Date(m("@"));c=w.getFullYear();j=w.getMonth()+1;l=w.getDate();break;case "!":w=new Date((m("!")-this._ticksTo1970)/1E4);c=w.getFullYear();j=w.getMonth()+
1;l=w.getDate();break;case "'":if(o("'"))r();else k=true;break;default:r()}if(c==-1)c=(new Date).getFullYear();else if(c<100)c+=(new Date).getFullYear()-(new Date).getFullYear()%100+(c<=e?0:-100);if(u>-1){j=1;l=u;do{e=this._getDaysInMonth(c,j-1);if(l<=e)break;j++;l-=e}while(1)}w=this._daylightSavingAdjust(new Date(c,j-1,l));if(w.getFullYear()!=c||w.getMonth()+1!=j||w.getDate()!=l)throw"Invalid date";return w},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",
RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925))*24*60*60*1E7,formatDate:function(a,b,c){if(!b)return"";var e=(c?c.dayNamesShort:null)||this._defaults.dayNamesShort,f=(c?c.dayNames:null)||this._defaults.dayNames,h=(c?c.monthNamesShort:null)||this._defaults.monthNamesShort;c=(c?c.monthNames:null)||this._defaults.monthNames;var i=function(o){(o=k+1<a.length&&
a.charAt(k+1)==o)&&k++;return o},g=function(o,m,n){m=""+m;if(i(o))for(;m.length<n;)m="0"+m;return m},j=function(o,m,n,r){return i(o)?r[m]:n[m]},l="",u=false;if(b)for(var k=0;k<a.length;k++)if(u)if(a.charAt(k)=="'"&&!i("'"))u=false;else l+=a.charAt(k);else switch(a.charAt(k)){case "d":l+=g("d",b.getDate(),2);break;case "D":l+=j("D",b.getDay(),e,f);break;case "o":l+=g("o",(b.getTime()-(new Date(b.getFullYear(),0,0)).getTime())/864E5,3);break;case "m":l+=g("m",b.getMonth()+1,2);break;case "M":l+=j("M",
b.getMonth(),h,c);break;case "y":l+=i("y")?b.getFullYear():(b.getYear()%100<10?"0":"")+b.getYear()%100;break;case "@":l+=b.getTime();break;case "!":l+=b.getTime()*1E4+this._ticksTo1970;break;case "'":if(i("'"))l+="'";else u=true;break;default:l+=a.charAt(k)}return l},_possibleChars:function(a){for(var b="",c=false,e=function(h){(h=f+1<a.length&&a.charAt(f+1)==h)&&f++;return h},f=0;f<a.length;f++)if(c)if(a.charAt(f)=="'"&&!e("'"))c=false;else b+=a.charAt(f);else switch(a.charAt(f)){case "d":case "m":case "y":case "@":b+=
"0123456789";break;case "D":case "M":return null;case "'":if(e("'"))b+="'";else c=true;break;default:b+=a.charAt(f)}return b},_get:function(a,b){return a.settings[b]!==A?a.settings[b]:this._defaults[b]},_setDateFromField:function(a,b){if(a.input.val()!=a.lastVal){var c=this._get(a,"dateFormat"),e=a.lastVal=a.input?a.input.val():null,f,h;f=h=this._getDefaultDate(a);var i=this._getFormatConfig(a);try{f=this.parseDate(c,e,i)||h}catch(g){this.log(g);e=b?"":e}a.selectedDay=f.getDate();a.drawMonth=a.selectedMonth=
f.getMonth();a.drawYear=a.selectedYear=f.getFullYear();a.currentDay=e?f.getDate():0;a.currentMonth=e?f.getMonth():0;a.currentYear=e?f.getFullYear():0;this._adjustInstDate(a)}},_getDefaultDate:function(a){return this._restrictMinMax(a,this._determineDate(a,this._get(a,"defaultDate"),new Date))},_determineDate:function(a,b,c){var e=function(h){var i=new Date;i.setDate(i.getDate()+h);return i},f=function(h){try{return d.datepicker.parseDate(d.datepicker._get(a,"dateFormat"),h,d.datepicker._getFormatConfig(a))}catch(i){}var g=
(h.toLowerCase().match(/^c/)?d.datepicker._getDate(a):null)||new Date,j=g.getFullYear(),l=g.getMonth();g=g.getDate();for(var u=/([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,k=u.exec(h);k;){switch(k[2]||"d"){case "d":case "D":g+=parseInt(k[1],10);break;case "w":case "W":g+=parseInt(k[1],10)*7;break;case "m":case "M":l+=parseInt(k[1],10);g=Math.min(g,d.datepicker._getDaysInMonth(j,l));break;case "y":case "Y":j+=parseInt(k[1],10);g=Math.min(g,d.datepicker._getDaysInMonth(j,l));break}k=u.exec(h)}return new Date(j,
l,g)};if(b=(b=b==null||b===""?c:typeof b=="string"?f(b):typeof b=="number"?isNaN(b)?c:e(b):new Date(b.getTime()))&&b.toString()=="Invalid Date"?c:b){b.setHours(0);b.setMinutes(0);b.setSeconds(0);b.setMilliseconds(0)}return this._daylightSavingAdjust(b)},_daylightSavingAdjust:function(a){if(!a)return null;a.setHours(a.getHours()>12?a.getHours()+2:0);return a},_setDate:function(a,b,c){var e=!b,f=a.selectedMonth,h=a.selectedYear;b=this._restrictMinMax(a,this._determineDate(a,b,new Date));a.selectedDay=
a.currentDay=b.getDate();a.drawMonth=a.selectedMonth=a.currentMonth=b.getMonth();a.drawYear=a.selectedYear=a.currentYear=b.getFullYear();if((f!=a.selectedMonth||h!=a.selectedYear)&&!c)this._notifyChange(a);this._adjustInstDate(a);if(a.input)a.input.val(e?"":this._formatDate(a))},_getDate:function(a){return!a.currentYear||a.input&&a.input.val()==""?null:this._daylightSavingAdjust(new Date(a.currentYear,a.currentMonth,a.currentDay))},_generateHTML:function(a){var b=new Date;b=this._daylightSavingAdjust(new Date(b.getFullYear(),
b.getMonth(),b.getDate()));var c=this._get(a,"isRTL"),e=this._get(a,"showButtonPanel"),f=this._get(a,"hideIfNoPrevNext"),h=this._get(a,"navigationAsDateFormat"),i=this._getNumberOfMonths(a),g=this._get(a,"showCurrentAtPos"),j=this._get(a,"stepMonths"),l=i[0]!=1||i[1]!=1,u=this._daylightSavingAdjust(!a.currentDay?new Date(9999,9,9):new Date(a.currentYear,a.currentMonth,a.currentDay)),k=this._getMinMaxDate(a,"min"),o=this._getMinMaxDate(a,"max");g=a.drawMonth-g;var m=a.drawYear;if(g<0){g+=12;m--}if(o){var n=
this._daylightSavingAdjust(new Date(o.getFullYear(),o.getMonth()-i[0]*i[1]+1,o.getDate()));for(n=k&&n<k?k:n;this._daylightSavingAdjust(new Date(m,g,1))>n;){g--;if(g<0){g=11;m--}}}a.drawMonth=g;a.drawYear=m;n=this._get(a,"prevText");n=!h?n:this.formatDate(n,this._daylightSavingAdjust(new Date(m,g-j,1)),this._getFormatConfig(a));n=this._canAdjustMonth(a,-1,m,g)?'<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery_'+y+".datepicker._adjustDate('#"+a.id+"', -"+j+", 'M');\" title=\""+n+'"><span class="ui-icon ui-icon-circle-triangle-'+
(c?"e":"w")+'">'+n+"</span></a>":f?"":'<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+n+'"><span class="ui-icon ui-icon-circle-triangle-'+(c?"e":"w")+'">'+n+"</span></a>";var r=this._get(a,"nextText");r=!h?r:this.formatDate(r,this._daylightSavingAdjust(new Date(m,g+j,1)),this._getFormatConfig(a));f=this._canAdjustMonth(a,+1,m,g)?'<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery_'+y+".datepicker._adjustDate('#"+a.id+"', +"+j+", 'M');\" title=\""+r+'"><span class="ui-icon ui-icon-circle-triangle-'+
(c?"w":"e")+'">'+r+"</span></a>":f?"":'<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+r+'"><span class="ui-icon ui-icon-circle-triangle-'+(c?"w":"e")+'">'+r+"</span></a>";j=this._get(a,"currentText");r=this._get(a,"gotoCurrent")&&a.currentDay?u:b;j=!h?j:this.formatDate(j,r,this._getFormatConfig(a));h=!a.inline?'<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" onclick="DP_jQuery_'+y+'.datepicker._hideDatepicker();">'+this._get(a,
"closeText")+"</button>":"";e=e?'<div class="ui-datepicker-buttonpane ui-widget-content">'+(c?h:"")+(this._isInRange(a,r)?'<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" onclick="DP_jQuery_'+y+".datepicker._gotoToday('#"+a.id+"');\">"+j+"</button>":"")+(c?"":h)+"</div>":"";h=parseInt(this._get(a,"firstDay"),10);h=isNaN(h)?0:h;j=this._get(a,"showWeek");r=this._get(a,"dayNames");this._get(a,"dayNamesShort");var s=this._get(a,"dayNamesMin"),z=
this._get(a,"monthNames"),w=this._get(a,"monthNamesShort"),p=this._get(a,"beforeShowDay"),v=this._get(a,"showOtherMonths"),H=this._get(a,"selectOtherMonths");this._get(a,"calculateWeek");for(var L=this._getDefaultDate(a),I="",D=0;D<i[0];D++){for(var M="",E=0;E<i[1];E++){var N=this._daylightSavingAdjust(new Date(m,g,a.selectedDay)),t=" ui-corner-all",x="";if(l){x+='<div class="ui-datepicker-group';if(i[1]>1)switch(E){case 0:x+=" ui-datepicker-group-first";t=" ui-corner-"+(c?"right":"left");break;case i[1]-
1:x+=" ui-datepicker-group-last";t=" ui-corner-"+(c?"left":"right");break;default:x+=" ui-datepicker-group-middle";t="";break}x+='">'}x+='<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix'+t+'">'+(/all|left/.test(t)&&D==0?c?f:n:"")+(/all|right/.test(t)&&D==0?c?n:f:"")+this._generateMonthYearHeader(a,g,m,k,o,D>0||E>0,z,w)+'</div><table class="ui-datepicker-calendar"><thead><tr>';var B=j?'<th class="ui-datepicker-week-col">'+this._get(a,"weekHeader")+"</th>":"";for(t=0;t<7;t++){var q=
(t+h)%7;B+="<th"+((t+h+6)%7>=5?' class="ui-datepicker-week-end"':"")+'><span title="'+r[q]+'">'+s[q]+"</span></th>"}x+=B+"</tr></thead><tbody>";B=this._getDaysInMonth(m,g);if(m==a.selectedYear&&g==a.selectedMonth)a.selectedDay=Math.min(a.selectedDay,B);t=(this._getFirstDayOfMonth(m,g)-h+7)%7;B=l?6:Math.ceil((t+B)/7);q=this._daylightSavingAdjust(new Date(m,g,1-t));for(var O=0;O<B;O++){x+="<tr>";var P=!j?"":'<td class="ui-datepicker-week-col">'+this._get(a,"calculateWeek")(q)+"</td>";for(t=0;t<7;t++){var G=
p?p.apply(a.input?a.input[0]:null,[q]):[true,""],C=q.getMonth()!=g,J=C&&!H||!G[0]||k&&q<k||o&&q>o;P+='<td class="'+((t+h+6)%7>=5?" ui-datepicker-week-end":"")+(C?" ui-datepicker-other-month":"")+(q.getTime()==N.getTime()&&g==a.selectedMonth&&a._keyEvent||L.getTime()==q.getTime()&&L.getTime()==N.getTime()?" "+this._dayOverClass:"")+(J?" "+this._unselectableClass+" ui-state-disabled":"")+(C&&!v?"":" "+G[1]+(q.getTime()==u.getTime()?" "+this._currentClass:"")+(q.getTime()==b.getTime()?" ui-datepicker-today":
""))+'"'+((!C||v)&&G[2]?' title="'+G[2]+'"':"")+(J?"":' onclick="DP_jQuery_'+y+".datepicker._selectDay('#"+a.id+"',"+q.getMonth()+","+q.getFullYear()+', this);return false;"')+">"+(C&&!v?"&#xa0;":J?'<span class="ui-state-default">'+q.getDate()+"</span>":'<a class="ui-state-default'+(q.getTime()==b.getTime()?" ui-state-highlight":"")+(q.getTime()==u.getTime()?" ui-state-active":"")+(C?" ui-priority-secondary":"")+'" href="#">'+q.getDate()+"</a>")+"</td>";q.setDate(q.getDate()+1);q=this._daylightSavingAdjust(q)}x+=
P+"</tr>"}g++;if(g>11){g=0;m++}x+="</tbody></table>"+(l?"</div>"+(i[0]>0&&E==i[1]-1?'<div class="ui-datepicker-row-break"></div>':""):"");M+=x}I+=M}I+=e+(d.browser.msie&&parseInt(d.browser.version,10)<7&&!a.inline?'<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>':"");a._keyEvent=false;return I},_generateMonthYearHeader:function(a,b,c,e,f,h,i,g){var j=this._get(a,"changeMonth"),l=this._get(a,"changeYear"),u=this._get(a,"showMonthAfterYear"),k='<div class="ui-datepicker-title">',
o="";if(h||!j)o+='<span class="ui-datepicker-month">'+i[b]+"</span>";else{i=e&&e.getFullYear()==c;var m=f&&f.getFullYear()==c;o+='<select class="ui-datepicker-month" onchange="DP_jQuery_'+y+".datepicker._selectMonthYear('#"+a.id+"', this, 'M');\" onclick=\"DP_jQuery_"+y+".datepicker._clickMonthYear('#"+a.id+"');\">";for(var n=0;n<12;n++)if((!i||n>=e.getMonth())&&(!m||n<=f.getMonth()))o+='<option value="'+n+'"'+(n==b?' selected="selected"':"")+">"+g[n]+"</option>";o+="</select>"}u||(k+=o+(h||!(j&&
l)?"&#xa0;":""));a.yearshtml="";if(h||!l)k+='<span class="ui-datepicker-year">'+c+"</span>";else{g=this._get(a,"yearRange").split(":");var r=(new Date).getFullYear();i=function(s){s=s.match(/c[+-].*/)?c+parseInt(s.substring(1),10):s.match(/[+-].*/)?r+parseInt(s,10):parseInt(s,10);return isNaN(s)?r:s};b=i(g[0]);g=Math.max(b,i(g[1]||""));b=e?Math.max(b,e.getFullYear()):b;g=f?Math.min(g,f.getFullYear()):g;for(a.yearshtml+='<select class="ui-datepicker-year" onchange="DP_jQuery_'+y+".datepicker._selectMonthYear('#"+
a.id+"', this, 'Y');\" onclick=\"DP_jQuery_"+y+".datepicker._clickMonthYear('#"+a.id+"');\">";b<=g;b++)a.yearshtml+='<option value="'+b+'"'+(b==c?' selected="selected"':"")+">"+b+"</option>";a.yearshtml+="</select>";if(d.browser.mozilla)k+='<select class="ui-datepicker-year"><option value="'+c+'" selected="selected">'+c+"</option></select>";else{k+=a.yearshtml;a.yearshtml=null}}k+=this._get(a,"yearSuffix");if(u)k+=(h||!(j&&l)?"&#xa0;":"")+o;k+="</div>";return k},_adjustInstDate:function(a,b,c){var e=
a.drawYear+(c=="Y"?b:0),f=a.drawMonth+(c=="M"?b:0);b=Math.min(a.selectedDay,this._getDaysInMonth(e,f))+(c=="D"?b:0);e=this._restrictMinMax(a,this._daylightSavingAdjust(new Date(e,f,b)));a.selectedDay=e.getDate();a.drawMonth=a.selectedMonth=e.getMonth();a.drawYear=a.selectedYear=e.getFullYear();if(c=="M"||c=="Y")this._notifyChange(a)},_restrictMinMax:function(a,b){var c=this._getMinMaxDate(a,"min");a=this._getMinMaxDate(a,"max");b=c&&b<c?c:b;return b=a&&b>a?a:b},_notifyChange:function(a){var b=this._get(a,
"onChangeMonthYear");if(b)b.apply(a.input?a.input[0]:null,[a.selectedYear,a.selectedMonth+1,a])},_getNumberOfMonths:function(a){a=this._get(a,"numberOfMonths");return a==null?[1,1]:typeof a=="number"?[1,a]:a},_getMinMaxDate:function(a,b){return this._determineDate(a,this._get(a,b+"Date"),null)},_getDaysInMonth:function(a,b){return 32-this._daylightSavingAdjust(new Date(a,b,32)).getDate()},_getFirstDayOfMonth:function(a,b){return(new Date(a,b,1)).getDay()},_canAdjustMonth:function(a,b,c,e){var f=this._getNumberOfMonths(a);
c=this._daylightSavingAdjust(new Date(c,e+(b<0?b:f[0]*f[1]),1));b<0&&c.setDate(this._getDaysInMonth(c.getFullYear(),c.getMonth()));return this._isInRange(a,c)},_isInRange:function(a,b){var c=this._getMinMaxDate(a,"min");a=this._getMinMaxDate(a,"max");return(!c||b.getTime()>=c.getTime())&&(!a||b.getTime()<=a.getTime())},_getFormatConfig:function(a){var b=this._get(a,"shortYearCutoff");b=typeof b!="string"?b:(new Date).getFullYear()%100+parseInt(b,10);return{shortYearCutoff:b,dayNamesShort:this._get(a,
"dayNamesShort"),dayNames:this._get(a,"dayNames"),monthNamesShort:this._get(a,"monthNamesShort"),monthNames:this._get(a,"monthNames")}},_formatDate:function(a,b,c,e){if(!b){a.currentDay=a.selectedDay;a.currentMonth=a.selectedMonth;a.currentYear=a.selectedYear}b=b?typeof b=="object"?b:this._daylightSavingAdjust(new Date(e,c,b)):this._daylightSavingAdjust(new Date(a.currentYear,a.currentMonth,a.currentDay));return this.formatDate(this._get(a,"dateFormat"),b,this._getFormatConfig(a))}});d.fn.datepicker=
function(a){if(!this.length)return this;if(!d.datepicker.initialized){d(document).mousedown(d.datepicker._checkExternalClick).find("body").append(d.datepicker.dpDiv);d.datepicker.initialized=true}var b=Array.prototype.slice.call(arguments,1);if(typeof a=="string"&&(a=="isDisabled"||a=="getDate"||a=="widget"))return d.datepicker["_"+a+"Datepicker"].apply(d.datepicker,[this[0]].concat(b));if(a=="option"&&arguments.length==2&&typeof arguments[1]=="string")return d.datepicker["_"+a+"Datepicker"].apply(d.datepicker,
[this[0]].concat(b));return this.each(function(){typeof a=="string"?d.datepicker["_"+a+"Datepicker"].apply(d.datepicker,[this].concat(b)):d.datepicker._attachDatepicker(this,a)})};d.datepicker=new K;d.datepicker.initialized=false;d.datepicker.uuid=(new Date).getTime();d.datepicker.version="1.8.11";window["DP_jQuery_"+y]=d})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Progressbar 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Progressbar
 *
 * Depends:
 *   jquery.ui.core.js
 *   jquery.ui.widget.js
 */
(function(b,d){b.widget("ui.progressbar",{options:{value:0,max:100},min:0,_create:function(){this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({role:"progressbar","aria-valuemin":this.min,"aria-valuemax":this.options.max,"aria-valuenow":this._value()});this.valueDiv=b("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element);this.oldValue=this._value();this._refreshValue()},destroy:function(){this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
this.valueDiv.remove();b.Widget.prototype.destroy.apply(this,arguments)},value:function(a){if(a===d)return this._value();this._setOption("value",a);return this},_setOption:function(a,c){if(a==="value"){this.options.value=c;this._refreshValue();this._value()===this.options.max&&this._trigger("complete")}b.Widget.prototype._setOption.apply(this,arguments)},_value:function(){var a=this.options.value;if(typeof a!=="number")a=0;return Math.min(this.options.max,Math.max(this.min,a))},_percentage:function(){return 100*
this._value()/this.options.max},_refreshValue:function(){var a=this.value(),c=this._percentage();if(this.oldValue!==a){this.oldValue=a;this._trigger("change")}this.valueDiv.toggleClass("ui-corner-right",a===this.options.max).width(c.toFixed(0)+"%");this.element.attr("aria-valuenow",a)}});b.extend(b.ui.progressbar,{version:"1.8.11"})})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Effects 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Effects/
 */
jQuery.effects||function(f,j){function n(c){var a;if(c&&c.constructor==Array&&c.length==3)return c;if(a=/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(c))return[parseInt(a[1],10),parseInt(a[2],10),parseInt(a[3],10)];if(a=/rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(c))return[parseFloat(a[1])*2.55,parseFloat(a[2])*2.55,parseFloat(a[3])*2.55];if(a=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(c))return[parseInt(a[1],
16),parseInt(a[2],16),parseInt(a[3],16)];if(a=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(c))return[parseInt(a[1]+a[1],16),parseInt(a[2]+a[2],16),parseInt(a[3]+a[3],16)];if(/rgba\(0, 0, 0, 0\)/.exec(c))return o.transparent;return o[f.trim(c).toLowerCase()]}function s(c,a){var b;do{b=f.curCSS(c,a);if(b!=""&&b!="transparent"||f.nodeName(c,"body"))break;a="backgroundColor"}while(c=c.parentNode);return n(b)}function p(){var c=document.defaultView?document.defaultView.getComputedStyle(this,null):this.currentStyle,
a={},b,d;if(c&&c.length&&c[0]&&c[c[0]])for(var e=c.length;e--;){b=c[e];if(typeof c[b]=="string"){d=b.replace(/\-(\w)/g,function(g,h){return h.toUpperCase()});a[d]=c[b]}}else for(b in c)if(typeof c[b]==="string")a[b]=c[b];return a}function q(c){var a,b;for(a in c){b=c[a];if(b==null||f.isFunction(b)||a in t||/scrollbar/.test(a)||!/color/i.test(a)&&isNaN(parseFloat(b)))delete c[a]}return c}function u(c,a){var b={_:0},d;for(d in a)if(c[d]!=a[d])b[d]=a[d];return b}function k(c,a,b,d){if(typeof c=="object"){d=
a;b=null;a=c;c=a.effect}if(f.isFunction(a)){d=a;b=null;a={}}if(typeof a=="number"||f.fx.speeds[a]){d=b;b=a;a={}}if(f.isFunction(b)){d=b;b=null}a=a||{};b=b||a.duration;b=f.fx.off?0:typeof b=="number"?b:b in f.fx.speeds?f.fx.speeds[b]:f.fx.speeds._default;d=d||a.complete;return[c,a,b,d]}function m(c){if(!c||typeof c==="number"||f.fx.speeds[c])return true;if(typeof c==="string"&&!f.effects[c])return true;return false}f.effects={};f.each(["backgroundColor","borderBottomColor","borderLeftColor","borderRightColor",
"borderTopColor","borderColor","color","outlineColor"],function(c,a){f.fx.step[a]=function(b){if(!b.colorInit){b.start=s(b.elem,a);b.end=n(b.end);b.colorInit=true}b.elem.style[a]="rgb("+Math.max(Math.min(parseInt(b.pos*(b.end[0]-b.start[0])+b.start[0],10),255),0)+","+Math.max(Math.min(parseInt(b.pos*(b.end[1]-b.start[1])+b.start[1],10),255),0)+","+Math.max(Math.min(parseInt(b.pos*(b.end[2]-b.start[2])+b.start[2],10),255),0)+")"}});var o={aqua:[0,255,255],azure:[240,255,255],beige:[245,245,220],black:[0,
0,0],blue:[0,0,255],brown:[165,42,42],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgrey:[169,169,169],darkgreen:[0,100,0],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkviolet:[148,0,211],fuchsia:[255,0,255],gold:[255,215,0],green:[0,128,0],indigo:[75,0,130],khaki:[240,230,140],lightblue:[173,216,230],lightcyan:[224,255,255],lightgreen:[144,238,144],lightgrey:[211,
211,211],lightpink:[255,182,193],lightyellow:[255,255,224],lime:[0,255,0],magenta:[255,0,255],maroon:[128,0,0],navy:[0,0,128],olive:[128,128,0],orange:[255,165,0],pink:[255,192,203],purple:[128,0,128],violet:[128,0,128],red:[255,0,0],silver:[192,192,192],white:[255,255,255],yellow:[255,255,0],transparent:[255,255,255]},r=["add","remove","toggle"],t={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};f.effects.animateClass=function(c,a,b,
d){if(f.isFunction(b)){d=b;b=null}return this.queue("fx",function(){var e=f(this),g=e.attr("style")||" ",h=q(p.call(this)),l,v=e.attr("className");f.each(r,function(w,i){c[i]&&e[i+"Class"](c[i])});l=q(p.call(this));e.attr("className",v);e.animate(u(h,l),a,b,function(){f.each(r,function(w,i){c[i]&&e[i+"Class"](c[i])});if(typeof e.attr("style")=="object"){e.attr("style").cssText="";e.attr("style").cssText=g}else e.attr("style",g);d&&d.apply(this,arguments)});h=f.queue(this);l=h.splice(h.length-1,1)[0];
h.splice(1,0,l);f.dequeue(this)})};f.fn.extend({_addClass:f.fn.addClass,addClass:function(c,a,b,d){return a?f.effects.animateClass.apply(this,[{add:c},a,b,d]):this._addClass(c)},_removeClass:f.fn.removeClass,removeClass:function(c,a,b,d){return a?f.effects.animateClass.apply(this,[{remove:c},a,b,d]):this._removeClass(c)},_toggleClass:f.fn.toggleClass,toggleClass:function(c,a,b,d,e){return typeof a=="boolean"||a===j?b?f.effects.animateClass.apply(this,[a?{add:c}:{remove:c},b,d,e]):this._toggleClass(c,
a):f.effects.animateClass.apply(this,[{toggle:c},a,b,d])},switchClass:function(c,a,b,d,e){return f.effects.animateClass.apply(this,[{add:a,remove:c},b,d,e])}});f.extend(f.effects,{version:"1.8.11",save:function(c,a){for(var b=0;b<a.length;b++)a[b]!==null&&c.data("ec.storage."+a[b],c[0].style[a[b]])},restore:function(c,a){for(var b=0;b<a.length;b++)a[b]!==null&&c.css(a[b],c.data("ec.storage."+a[b]))},setMode:function(c,a){if(a=="toggle")a=c.is(":hidden")?"show":"hide";return a},getBaseline:function(c,
a){var b;switch(c[0]){case "top":b=0;break;case "middle":b=0.5;break;case "bottom":b=1;break;default:b=c[0]/a.height}switch(c[1]){case "left":c=0;break;case "center":c=0.5;break;case "right":c=1;break;default:c=c[1]/a.width}return{x:c,y:b}},createWrapper:function(c){if(c.parent().is(".ui-effects-wrapper"))return c.parent();var a={width:c.outerWidth(true),height:c.outerHeight(true),"float":c.css("float")},b=f("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",
border:"none",margin:0,padding:0});c.wrap(b);b=c.parent();if(c.css("position")=="static"){b.css({position:"relative"});c.css({position:"relative"})}else{f.extend(a,{position:c.css("position"),zIndex:c.css("z-index")});f.each(["top","left","bottom","right"],function(d,e){a[e]=c.css(e);if(isNaN(parseInt(a[e],10)))a[e]="auto"});c.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})}return b.css(a).show()},removeWrapper:function(c){if(c.parent().is(".ui-effects-wrapper"))return c.parent().replaceWith(c);
return c},setTransition:function(c,a,b,d){d=d||{};f.each(a,function(e,g){unit=c.cssUnit(g);if(unit[0]>0)d[g]=unit[0]*b+unit[1]});return d}});f.fn.extend({effect:function(c){var a=k.apply(this,arguments),b={options:a[1],duration:a[2],callback:a[3]};a=b.options.mode;var d=f.effects[c];if(f.fx.off||!d)return a?this[a](b.duration,b.callback):this.each(function(){b.callback&&b.callback.call(this)});return d.call(this,b)},_show:f.fn.show,show:function(c){if(m(c))return this._show.apply(this,arguments);
else{var a=k.apply(this,arguments);a[1].mode="show";return this.effect.apply(this,a)}},_hide:f.fn.hide,hide:function(c){if(m(c))return this._hide.apply(this,arguments);else{var a=k.apply(this,arguments);a[1].mode="hide";return this.effect.apply(this,a)}},__toggle:f.fn.toggle,toggle:function(c){if(m(c)||typeof c==="boolean"||f.isFunction(c))return this.__toggle.apply(this,arguments);else{var a=k.apply(this,arguments);a[1].mode="toggle";return this.effect.apply(this,a)}},cssUnit:function(c){var a=this.css(c),
b=[];f.each(["em","px","%","pt"],function(d,e){if(a.indexOf(e)>0)b=[parseFloat(a),e]});return b}});f.easing.jswing=f.easing.swing;f.extend(f.easing,{def:"easeOutQuad",swing:function(c,a,b,d,e){return f.easing[f.easing.def](c,a,b,d,e)},easeInQuad:function(c,a,b,d,e){return d*(a/=e)*a+b},easeOutQuad:function(c,a,b,d,e){return-d*(a/=e)*(a-2)+b},easeInOutQuad:function(c,a,b,d,e){if((a/=e/2)<1)return d/2*a*a+b;return-d/2*(--a*(a-2)-1)+b},easeInCubic:function(c,a,b,d,e){return d*(a/=e)*a*a+b},easeOutCubic:function(c,
a,b,d,e){return d*((a=a/e-1)*a*a+1)+b},easeInOutCubic:function(c,a,b,d,e){if((a/=e/2)<1)return d/2*a*a*a+b;return d/2*((a-=2)*a*a+2)+b},easeInQuart:function(c,a,b,d,e){return d*(a/=e)*a*a*a+b},easeOutQuart:function(c,a,b,d,e){return-d*((a=a/e-1)*a*a*a-1)+b},easeInOutQuart:function(c,a,b,d,e){if((a/=e/2)<1)return d/2*a*a*a*a+b;return-d/2*((a-=2)*a*a*a-2)+b},easeInQuint:function(c,a,b,d,e){return d*(a/=e)*a*a*a*a+b},easeOutQuint:function(c,a,b,d,e){return d*((a=a/e-1)*a*a*a*a+1)+b},easeInOutQuint:function(c,
a,b,d,e){if((a/=e/2)<1)return d/2*a*a*a*a*a+b;return d/2*((a-=2)*a*a*a*a+2)+b},easeInSine:function(c,a,b,d,e){return-d*Math.cos(a/e*(Math.PI/2))+d+b},easeOutSine:function(c,a,b,d,e){return d*Math.sin(a/e*(Math.PI/2))+b},easeInOutSine:function(c,a,b,d,e){return-d/2*(Math.cos(Math.PI*a/e)-1)+b},easeInExpo:function(c,a,b,d,e){return a==0?b:d*Math.pow(2,10*(a/e-1))+b},easeOutExpo:function(c,a,b,d,e){return a==e?b+d:d*(-Math.pow(2,-10*a/e)+1)+b},easeInOutExpo:function(c,a,b,d,e){if(a==0)return b;if(a==
e)return b+d;if((a/=e/2)<1)return d/2*Math.pow(2,10*(a-1))+b;return d/2*(-Math.pow(2,-10*--a)+2)+b},easeInCirc:function(c,a,b,d,e){return-d*(Math.sqrt(1-(a/=e)*a)-1)+b},easeOutCirc:function(c,a,b,d,e){return d*Math.sqrt(1-(a=a/e-1)*a)+b},easeInOutCirc:function(c,a,b,d,e){if((a/=e/2)<1)return-d/2*(Math.sqrt(1-a*a)-1)+b;return d/2*(Math.sqrt(1-(a-=2)*a)+1)+b},easeInElastic:function(c,a,b,d,e){c=1.70158;var g=0,h=d;if(a==0)return b;if((a/=e)==1)return b+d;g||(g=e*0.3);if(h<Math.abs(d)){h=d;c=g/4}else c=
g/(2*Math.PI)*Math.asin(d/h);return-(h*Math.pow(2,10*(a-=1))*Math.sin((a*e-c)*2*Math.PI/g))+b},easeOutElastic:function(c,a,b,d,e){c=1.70158;var g=0,h=d;if(a==0)return b;if((a/=e)==1)return b+d;g||(g=e*0.3);if(h<Math.abs(d)){h=d;c=g/4}else c=g/(2*Math.PI)*Math.asin(d/h);return h*Math.pow(2,-10*a)*Math.sin((a*e-c)*2*Math.PI/g)+d+b},easeInOutElastic:function(c,a,b,d,e){c=1.70158;var g=0,h=d;if(a==0)return b;if((a/=e/2)==2)return b+d;g||(g=e*0.3*1.5);if(h<Math.abs(d)){h=d;c=g/4}else c=g/(2*Math.PI)*Math.asin(d/
h);if(a<1)return-0.5*h*Math.pow(2,10*(a-=1))*Math.sin((a*e-c)*2*Math.PI/g)+b;return h*Math.pow(2,-10*(a-=1))*Math.sin((a*e-c)*2*Math.PI/g)*0.5+d+b},easeInBack:function(c,a,b,d,e,g){if(g==j)g=1.70158;return d*(a/=e)*a*((g+1)*a-g)+b},easeOutBack:function(c,a,b,d,e,g){if(g==j)g=1.70158;return d*((a=a/e-1)*a*((g+1)*a+g)+1)+b},easeInOutBack:function(c,a,b,d,e,g){if(g==j)g=1.70158;if((a/=e/2)<1)return d/2*a*a*(((g*=1.525)+1)*a-g)+b;return d/2*((a-=2)*a*(((g*=1.525)+1)*a+g)+2)+b},easeInBounce:function(c,
a,b,d,e){return d-f.easing.easeOutBounce(c,e-a,0,d,e)+b},easeOutBounce:function(c,a,b,d,e){return(a/=e)<1/2.75?d*7.5625*a*a+b:a<2/2.75?d*(7.5625*(a-=1.5/2.75)*a+0.75)+b:a<2.5/2.75?d*(7.5625*(a-=2.25/2.75)*a+0.9375)+b:d*(7.5625*(a-=2.625/2.75)*a+0.984375)+b},easeInOutBounce:function(c,a,b,d,e){if(a<e/2)return f.easing.easeInBounce(c,a*2,0,d,e)*0.5+b;return f.easing.easeOutBounce(c,a*2-e,0,d,e)*0.5+d*0.5+b}})}(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Effects Blind 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Effects/Blind
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function(b){b.effects.blind=function(c){return this.queue(function(){var a=b(this),g=["position","top","bottom","left","right"],f=b.effects.setMode(a,c.options.mode||"hide"),d=c.options.direction||"vertical";b.effects.save(a,g);a.show();var e=b.effects.createWrapper(a).css({overflow:"hidden"}),h=d=="vertical"?"height":"width";d=d=="vertical"?e.height():e.width();f=="show"&&e.css(h,0);var i={};i[h]=f=="show"?d:0;e.animate(i,c.duration,c.options.easing,function(){f=="hide"&&a.hide();b.effects.restore(a,
g);b.effects.removeWrapper(a);c.callback&&c.callback.apply(a[0],arguments);a.dequeue()})})}})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Effects Bounce 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Effects/Bounce
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function(e){e.effects.bounce=function(b){return this.queue(function(){var a=e(this),l=["position","top","bottom","left","right"],h=e.effects.setMode(a,b.options.mode||"effect"),d=b.options.direction||"up",c=b.options.distance||20,m=b.options.times||5,i=b.duration||250;/show|hide/.test(h)&&l.push("opacity");e.effects.save(a,l);a.show();e.effects.createWrapper(a);var f=d=="up"||d=="down"?"top":"left";d=d=="up"||d=="left"?"pos":"neg";c=b.options.distance||(f=="top"?a.outerHeight({margin:true})/3:a.outerWidth({margin:true})/
3);if(h=="show")a.css("opacity",0).css(f,d=="pos"?-c:c);if(h=="hide")c/=m*2;h!="hide"&&m--;if(h=="show"){var g={opacity:1};g[f]=(d=="pos"?"+=":"-=")+c;a.animate(g,i/2,b.options.easing);c/=2;m--}for(g=0;g<m;g++){var j={},k={};j[f]=(d=="pos"?"-=":"+=")+c;k[f]=(d=="pos"?"+=":"-=")+c;a.animate(j,i/2,b.options.easing).animate(k,i/2,b.options.easing);c=h=="hide"?c*2:c/2}if(h=="hide"){g={opacity:0};g[f]=(d=="pos"?"-=":"+=")+c;a.animate(g,i/2,b.options.easing,function(){a.hide();e.effects.restore(a,l);e.effects.removeWrapper(a);
b.callback&&b.callback.apply(this,arguments)})}else{j={};k={};j[f]=(d=="pos"?"-=":"+=")+c;k[f]=(d=="pos"?"+=":"-=")+c;a.animate(j,i/2,b.options.easing).animate(k,i/2,b.options.easing,function(){e.effects.restore(a,l);e.effects.removeWrapper(a);b.callback&&b.callback.apply(this,arguments)})}a.queue("fx",function(){a.dequeue()});a.dequeue()})}})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Effects Clip 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Effects/Clip
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function(b){b.effects.clip=function(e){return this.queue(function(){var a=b(this),i=["position","top","bottom","left","right","height","width"],f=b.effects.setMode(a,e.options.mode||"hide"),c=e.options.direction||"vertical";b.effects.save(a,i);a.show();var d=b.effects.createWrapper(a).css({overflow:"hidden"});d=a[0].tagName=="IMG"?d:a;var g={size:c=="vertical"?"height":"width",position:c=="vertical"?"top":"left"};c=c=="vertical"?d.height():d.width();if(f=="show"){d.css(g.size,0);d.css(g.position,
c/2)}var h={};h[g.size]=f=="show"?c:0;h[g.position]=f=="show"?0:c/2;d.animate(h,{queue:false,duration:e.duration,easing:e.options.easing,complete:function(){f=="hide"&&a.hide();b.effects.restore(a,i);b.effects.removeWrapper(a);e.callback&&e.callback.apply(a[0],arguments);a.dequeue()}})})}})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Effects Drop 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Effects/Drop
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function(c){c.effects.drop=function(d){return this.queue(function(){var a=c(this),h=["position","top","bottom","left","right","opacity"],e=c.effects.setMode(a,d.options.mode||"hide"),b=d.options.direction||"left";c.effects.save(a,h);a.show();c.effects.createWrapper(a);var f=b=="up"||b=="down"?"top":"left";b=b=="up"||b=="left"?"pos":"neg";var g=d.options.distance||(f=="top"?a.outerHeight({margin:true})/2:a.outerWidth({margin:true})/2);if(e=="show")a.css("opacity",0).css(f,b=="pos"?-g:g);var i={opacity:e==
"show"?1:0};i[f]=(e=="show"?b=="pos"?"+=":"-=":b=="pos"?"-=":"+=")+g;a.animate(i,{queue:false,duration:d.duration,easing:d.options.easing,complete:function(){e=="hide"&&a.hide();c.effects.restore(a,h);c.effects.removeWrapper(a);d.callback&&d.callback.apply(this,arguments);a.dequeue()}})})}})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Effects Explode 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Effects/Explode
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function(j){j.effects.explode=function(a){return this.queue(function(){var c=a.options.pieces?Math.round(Math.sqrt(a.options.pieces)):3,d=a.options.pieces?Math.round(Math.sqrt(a.options.pieces)):3;a.options.mode=a.options.mode=="toggle"?j(this).is(":visible")?"hide":"show":a.options.mode;var b=j(this).show().css("visibility","hidden"),g=b.offset();g.top-=parseInt(b.css("marginTop"),10)||0;g.left-=parseInt(b.css("marginLeft"),10)||0;for(var h=b.outerWidth(true),i=b.outerHeight(true),e=0;e<c;e++)for(var f=
0;f<d;f++)b.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-f*(h/d),top:-e*(i/c)}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:h/d,height:i/c,left:g.left+f*(h/d)+(a.options.mode=="show"?(f-Math.floor(d/2))*(h/d):0),top:g.top+e*(i/c)+(a.options.mode=="show"?(e-Math.floor(c/2))*(i/c):0),opacity:a.options.mode=="show"?0:1}).animate({left:g.left+f*(h/d)+(a.options.mode=="show"?0:(f-Math.floor(d/2))*(h/d)),top:g.top+
e*(i/c)+(a.options.mode=="show"?0:(e-Math.floor(c/2))*(i/c)),opacity:a.options.mode=="show"?1:0},a.duration||500);setTimeout(function(){a.options.mode=="show"?b.css({visibility:"visible"}):b.css({visibility:"visible"}).hide();a.callback&&a.callback.apply(b[0]);b.dequeue();j("div.ui-effects-explode").remove()},a.duration||500)})}})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Effects Fade 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Effects/Fade
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function(b){b.effects.fade=function(a){return this.queue(function(){var c=b(this),d=b.effects.setMode(c,a.options.mode||"hide");c.animate({opacity:d},{queue:false,duration:a.duration,easing:a.options.easing,complete:function(){a.callback&&a.callback.apply(this,arguments);c.dequeue()}})})}})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Effects Fold 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Effects/Fold
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function(c){c.effects.fold=function(a){return this.queue(function(){var b=c(this),j=["position","top","bottom","left","right"],d=c.effects.setMode(b,a.options.mode||"hide"),g=a.options.size||15,h=!!a.options.horizFirst,k=a.duration?a.duration/2:c.fx.speeds._default/2;c.effects.save(b,j);b.show();var e=c.effects.createWrapper(b).css({overflow:"hidden"}),f=d=="show"!=h,l=f?["width","height"]:["height","width"];f=f?[e.width(),e.height()]:[e.height(),e.width()];var i=/([0-9]+)%/.exec(g);if(i)g=parseInt(i[1],
10)/100*f[d=="hide"?0:1];if(d=="show")e.css(h?{height:0,width:g}:{height:g,width:0});h={};i={};h[l[0]]=d=="show"?f[0]:g;i[l[1]]=d=="show"?f[1]:0;e.animate(h,k,a.options.easing).animate(i,k,a.options.easing,function(){d=="hide"&&b.hide();c.effects.restore(b,j);c.effects.removeWrapper(b);a.callback&&a.callback.apply(b[0],arguments);b.dequeue()})})}})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Effects Highlight 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Effects/Highlight
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function(b){b.effects.highlight=function(c){return this.queue(function(){var a=b(this),e=["backgroundImage","backgroundColor","opacity"],d=b.effects.setMode(a,c.options.mode||"show"),f={backgroundColor:a.css("backgroundColor")};if(d=="hide")f.opacity=0;b.effects.save(a,e);a.show().css({backgroundImage:"none",backgroundColor:c.options.color||"#ffff99"}).animate(f,{queue:false,duration:c.duration,easing:c.options.easing,complete:function(){d=="hide"&&a.hide();b.effects.restore(a,e);d=="show"&&!b.support.opacity&&
this.style.removeAttribute("filter");c.callback&&c.callback.apply(this,arguments);a.dequeue()}})})}})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Effects Pulsate 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Effects/Pulsate
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function(d){d.effects.pulsate=function(a){return this.queue(function(){var b=d(this),c=d.effects.setMode(b,a.options.mode||"show");times=(a.options.times||5)*2-1;duration=a.duration?a.duration/2:d.fx.speeds._default/2;isVisible=b.is(":visible");animateTo=0;if(!isVisible){b.css("opacity",0).show();animateTo=1}if(c=="hide"&&isVisible||c=="show"&&!isVisible)times--;for(c=0;c<times;c++){b.animate({opacity:animateTo},duration,a.options.easing);animateTo=(animateTo+1)%2}b.animate({opacity:animateTo},duration,
a.options.easing,function(){animateTo==0&&b.hide();a.callback&&a.callback.apply(this,arguments)});b.queue("fx",function(){b.dequeue()}).dequeue()})}})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Effects Scale 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Effects/Scale
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function(c){c.effects.puff=function(b){return this.queue(function(){var a=c(this),e=c.effects.setMode(a,b.options.mode||"hide"),g=parseInt(b.options.percent,10)||150,h=g/100,i={height:a.height(),width:a.width()};c.extend(b.options,{fade:true,mode:e,percent:e=="hide"?g:100,from:e=="hide"?i:{height:i.height*h,width:i.width*h}});a.effect("scale",b.options,b.duration,b.callback);a.dequeue()})};c.effects.scale=function(b){return this.queue(function(){var a=c(this),e=c.extend(true,{},b.options),g=c.effects.setMode(a,
b.options.mode||"effect"),h=parseInt(b.options.percent,10)||(parseInt(b.options.percent,10)==0?0:g=="hide"?0:100),i=b.options.direction||"both",f=b.options.origin;if(g!="effect"){e.origin=f||["middle","center"];e.restore=true}f={height:a.height(),width:a.width()};a.from=b.options.from||(g=="show"?{height:0,width:0}:f);h={y:i!="horizontal"?h/100:1,x:i!="vertical"?h/100:1};a.to={height:f.height*h.y,width:f.width*h.x};if(b.options.fade){if(g=="show"){a.from.opacity=0;a.to.opacity=1}if(g=="hide"){a.from.opacity=
1;a.to.opacity=0}}e.from=a.from;e.to=a.to;e.mode=g;a.effect("size",e,b.duration,b.callback);a.dequeue()})};c.effects.size=function(b){return this.queue(function(){var a=c(this),e=["position","top","bottom","left","right","width","height","overflow","opacity"],g=["position","top","bottom","left","right","overflow","opacity"],h=["width","height","overflow"],i=["fontSize"],f=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],k=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],
p=c.effects.setMode(a,b.options.mode||"effect"),n=b.options.restore||false,m=b.options.scale||"both",l=b.options.origin,j={height:a.height(),width:a.width()};a.from=b.options.from||j;a.to=b.options.to||j;if(l){l=c.effects.getBaseline(l,j);a.from.top=(j.height-a.from.height)*l.y;a.from.left=(j.width-a.from.width)*l.x;a.to.top=(j.height-a.to.height)*l.y;a.to.left=(j.width-a.to.width)*l.x}var d={from:{y:a.from.height/j.height,x:a.from.width/j.width},to:{y:a.to.height/j.height,x:a.to.width/j.width}};
if(m=="box"||m=="both"){if(d.from.y!=d.to.y){e=e.concat(f);a.from=c.effects.setTransition(a,f,d.from.y,a.from);a.to=c.effects.setTransition(a,f,d.to.y,a.to)}if(d.from.x!=d.to.x){e=e.concat(k);a.from=c.effects.setTransition(a,k,d.from.x,a.from);a.to=c.effects.setTransition(a,k,d.to.x,a.to)}}if(m=="content"||m=="both")if(d.from.y!=d.to.y){e=e.concat(i);a.from=c.effects.setTransition(a,i,d.from.y,a.from);a.to=c.effects.setTransition(a,i,d.to.y,a.to)}c.effects.save(a,n?e:g);a.show();c.effects.createWrapper(a);
a.css("overflow","hidden").css(a.from);if(m=="content"||m=="both"){f=f.concat(["marginTop","marginBottom"]).concat(i);k=k.concat(["marginLeft","marginRight"]);h=e.concat(f).concat(k);a.find("*[width]").each(function(){child=c(this);n&&c.effects.save(child,h);var o={height:child.height(),width:child.width()};child.from={height:o.height*d.from.y,width:o.width*d.from.x};child.to={height:o.height*d.to.y,width:o.width*d.to.x};if(d.from.y!=d.to.y){child.from=c.effects.setTransition(child,f,d.from.y,child.from);
child.to=c.effects.setTransition(child,f,d.to.y,child.to)}if(d.from.x!=d.to.x){child.from=c.effects.setTransition(child,k,d.from.x,child.from);child.to=c.effects.setTransition(child,k,d.to.x,child.to)}child.css(child.from);child.animate(child.to,b.duration,b.options.easing,function(){n&&c.effects.restore(child,h)})})}a.animate(a.to,{queue:false,duration:b.duration,easing:b.options.easing,complete:function(){a.to.opacity===0&&a.css("opacity",a.from.opacity);p=="hide"&&a.hide();c.effects.restore(a,
n?e:g);c.effects.removeWrapper(a);b.callback&&b.callback.apply(this,arguments);a.dequeue()}})})}})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Effects Shake 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Effects/Shake
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function(d){d.effects.shake=function(a){return this.queue(function(){var b=d(this),j=["position","top","bottom","left","right"];d.effects.setMode(b,a.options.mode||"effect");var c=a.options.direction||"left",e=a.options.distance||20,l=a.options.times||3,f=a.duration||a.options.duration||140;d.effects.save(b,j);b.show();d.effects.createWrapper(b);var g=c=="up"||c=="down"?"top":"left",h=c=="up"||c=="left"?"pos":"neg";c={};var i={},k={};c[g]=(h=="pos"?"-=":"+=")+e;i[g]=(h=="pos"?"+=":"-=")+e*2;k[g]=
(h=="pos"?"-=":"+=")+e*2;b.animate(c,f,a.options.easing);for(e=1;e<l;e++)b.animate(i,f,a.options.easing).animate(k,f,a.options.easing);b.animate(i,f,a.options.easing).animate(c,f/2,a.options.easing,function(){d.effects.restore(b,j);d.effects.removeWrapper(b);a.callback&&a.callback.apply(this,arguments)});b.queue("fx",function(){b.dequeue()});b.dequeue()})}})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Effects Slide 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Effects/Slide
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function(c){c.effects.slide=function(d){return this.queue(function(){var a=c(this),h=["position","top","bottom","left","right"],f=c.effects.setMode(a,d.options.mode||"show"),b=d.options.direction||"left";c.effects.save(a,h);a.show();c.effects.createWrapper(a).css({overflow:"hidden"});var g=b=="up"||b=="down"?"top":"left";b=b=="up"||b=="left"?"pos":"neg";var e=d.options.distance||(g=="top"?a.outerHeight({margin:true}):a.outerWidth({margin:true}));if(f=="show")a.css(g,b=="pos"?isNaN(e)?"-"+e:-e:e);
var i={};i[g]=(f=="show"?b=="pos"?"+=":"-=":b=="pos"?"-=":"+=")+e;a.animate(i,{queue:false,duration:d.duration,easing:d.options.easing,complete:function(){f=="hide"&&a.hide();c.effects.restore(a,h);c.effects.removeWrapper(a);d.callback&&d.callback.apply(this,arguments);a.dequeue()}})})}})(jQuery);
;/*
 * Note: While Microsoft is not the author of this file, Microsoft is
 * offering you a license subject to the terms of the Microsoft Software
 * License Terms for Microsoft ASP.NET Model View Controller 3.
 * Microsoft reserves all other rights. The notices below are provided
 * for informational purposes only and are not the license terms under
 * which Microsoft distributed this file.
 *
 * jQuery UI Effects Transfer 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 *
 * http://docs.jquery.com/UI/Effects/Transfer
 *
 * Depends:
 *	jquery.effects.core.js
 */
(function(e){e.effects.transfer=function(a){return this.queue(function(){var b=e(this),c=e(a.options.to),d=c.offset();c={top:d.top,left:d.left,height:c.innerHeight(),width:c.innerWidth()};d=b.offset();var f=e('<div class="ui-effects-transfer"></div>').appendTo(document.body).addClass(a.options.className).css({top:d.top,left:d.left,height:b.innerHeight(),width:b.innerWidth(),position:"absolute"}).animate(c,a.duration,a.options.easing,function(){f.remove();a.callback&&a.callback.apply(b[0],arguments);
b.dequeue()})})}})(jQuery);
;
"use strict";
/**
 * @class elFinder - file manager for web
 *
 * @author Dmitry (dio) Levashov
 **/
window.elFinder = function(node, opts) {
    this.time('load');

    var self = this,

        /**
		 * Node on which elfinder creating
		 *
		 * @type jQuery
		 **/
        node = $(node),

        /**
		 * Store node contents.
		 *
		 * @see this.destroy
		 * @type jQuery
		 **/
        prevContent = $('<div/>').append(node.contents()),

        /**
		 * Store node inline styles
		 *
		 * @see this.destroy
		 * @type String
		 **/
        prevStyle = node.attr('style'),

        /**
		 * Instance ID. Required to get/set cookie
		 *
		 * @type String
		 **/
        id = node.attr('id') || '',

        /**
		 * Events namespace
		 *
		 * @type String
		 **/
        namespace = 'elfinder-' + (id || Math.random().toString().substr(2, 7)),

        /**
		 * Mousedown event
		 *
		 * @type String
		 **/
        mousedown = 'mousedown.' + namespace,

        /**
		 * Keydown event
		 *
		 * @type String
		 **/
        keydown = 'keydown.' + namespace,

        /**
		 * Keypress event
		 *
		 * @type String
		 **/
        keypress = 'keypress.' + namespace,

        /**
		 * Is shortcuts/commands enabled
		 *
		 * @type Boolean
		 **/
        enabled = true,

        /**
		 * Store enabled value before ajax requiest
		 *
		 * @type Boolean
		 **/
        prevEnabled = true,

        /**
		 * List of build-in events which mapped into methods with same names
		 *
		 * @type Array
		 **/
        events = ['enable', 'disable', 'load', 'open', 'reload', 'select', 'add', 'remove', 'change', 'dblclick', 'getfile', 'lockfiles', 'unlockfiles', 'dragstart', 'dragstop'],

        /**
		 * Rules to validate data from backend
		 *
		 * @type Object
		 **/
        rules = {},

        /**
		 * Current working directory hash
		 *
		 * @type String
		 **/
        cwd = '',

        /**
		 * Current working directory options
		 *
		 * @type Object
		 **/
        cwdOptions = {
            path: '',
            url: '',
            tmbUrl: '',
            disabled: [],
            separator: '/',
            archives: [],
            extract: [],
            copyOverwrite: true,
            tmb: false // old API
        },

        /**
		 * Files/dirs cache
		 *
		 * @type Object
		 **/
        files = {},

        /**
		 * Selected files hashes
		 *
		 * @type Array
		 **/
        selected = [],

        /**
		 * Events listeners
		 *
		 * @type Object
		 **/
        listeners = {},

        /**
		 * Shortcuts
		 *
		 * @type Object
		 **/
        shortcuts = {},

        /**
		 * Buffer for copied files
		 *
		 * @type Array
		 **/
        clipboard = [],

        /**
		 * Copied/cuted files hashes
		 * Prevent from remove its from cache.
		 * Required for dispaly correct files names in error messages
		 *
		 * @type Array
		 **/
        remember = [],

        /**
		 * Queue for 'open' requests
		 *
		 * @type Array
		 **/
        queue = [],

        /**
		 * Net drivers names
		 *
		 * @type Array
		 **/
        netDrivers = [],

        /**
		 * Commands prototype
		 *
		 * @type Object
		 **/
        base = new self.command(self),

        /**
		 * elFinder node width
		 *
		 * @type String
		 * @default "auto"
		 **/
        width = 'auto',

        /**
		 * elFinder node height
		 *
		 * @type Number
		 * @default 400
		 **/
        height = 400,

        beeper = $(document.createElement('audio')).hide().appendTo('body')[0],

        syncInterval,

        open = function(data) {
            if (data.init) {
                // init - reset cache
                files = {};
            } else {
                // remove only files from prev cwd
                for (var i in files) {
                    if (files.hasOwnProperty(i)
                        && files[i].mime != 'directory'
                        && files[i].phash == cwd
                        && $.inArray(i, remember) === -1) {
                        delete files[i];
                    }
                }
            }

            cwd = data.cwd.hash;
            cache(data.files);
            if (!files[cwd]) {
                cache([data.cwd]);
            }
            self.lastDir(cwd);
        },

        /**
		 * Store info about files/dirs in "files" object.
		 *
		 * @param  Array  files
		 * @return void
		 **/
        cache = function(data) {
            var l = data.length, f;

            while (l--) {
                f = data[l];
                if (f.name && f.hash && f.mime) {
                    if (!f.phash) {
                        var name = 'volume_' + f.name,
                            i18 = self.i18n(name);

                        if (name != i18) {
                            f.i18 = i18;
                        }
                    }
                    files[f.hash] = f;
                }
            }
        },

        /**
		 * Exec shortcut
		 *
		 * @param  jQuery.Event  keydown/keypress event
		 * @return void
		 */
        execShortcut = function(e) {
            var code = e.keyCode,
                ctrlKey = !!(e.ctrlKey || e.metaKey);

            if (enabled) {

                $.each(shortcuts, function(i, shortcut) {
                    if (shortcut.type == e.type
                        && shortcut.keyCode == code
                        && shortcut.shiftKey == e.shiftKey
                        && shortcut.ctrlKey == ctrlKey
                        && shortcut.altKey == e.altKey) {
                        e.preventDefault();
                        e.stopPropagation();
                        shortcut.callback(e, self);
                        self.debug('shortcut-exec', i + ' : ' + shortcut.description);
                    }
                });

                // prevent tab out of elfinder
                if (code == 9 && !$(e.target).is(':input')) {
                    e.preventDefault();
                }

            }
        },
        date = new Date(),
        utc,
        i18n;


    /**
	 * Protocol version
	 *
	 * @type String
	 **/
    this.api = null;

    /**
	 * elFinder use new api
	 *
	 * @type Boolean
	 **/
    this.newAPI = false;

    /**
	 * elFinder use old api
	 *
	 * @type Boolean
	 **/
    this.oldAPI = false;

    /**
	 * User os. Required to bind native shortcuts for open/rename
	 *
	 * @type String
	 **/
    this.OS = navigator.userAgent.indexOf('Mac') !== -1 ? 'mac' : navigator.userAgent.indexOf('Win') !== -1 ? 'win' : 'other';

    /**
	 * User browser UA.
	 * jQuery.browser: version deprecated: 1.3, removed: 1.9
	 *
	 * @type Object
	 **/
    this.UA = (function() {
        var webkit;
        try {
            webkit = !document.uniqueID && !window.opera && !window.sidebar && window.localStorage && typeof window.orientation == "undefined";
        } catch (ex) {
            webkit = false;
            window.console && window.console.log && window.console.log(ex);
        }
        return {
            // Browser IE <= IE 6
            ltIE6: typeof window.addEventListener == "undefined" && typeof document.documentElement.style.maxHeight == "undefined",
            // Browser IE <= IE 7
            ltIE7: typeof window.addEventListener == "undefined" && typeof document.querySelectorAll == "undefined",
            // Browser IE <= IE 8
            ltIE8: typeof window.addEventListener == "undefined" && typeof document.getElementsByClassName == "undefined",
            IE: document.uniqueID,
            Firefox: window.sidebar,
            Opera: window.opera,
            Webkit: webkit,
            Chrome: webkit && window.chrome,
            Safari: webkit && !window.chrome,
            Mobile: typeof window.orientation != "undefined"
        };
    })();

    /**
	 * Configuration options
	 *
	 * @type Object
	 **/
    this.options = $.extend(true, {}, this._options, opts || {});

    if (opts.ui) {
        this.options.ui = opts.ui;
    }

    if (opts.commands) {
        this.options.commands = opts.commands;
    }

    if (opts.uiOptions && opts.uiOptions.toolbar) {
        this.options.uiOptions.toolbar = opts.uiOptions.toolbar;
    }

    //For columns
    if (opts.uiOptions && opts.uiOptions.cwd && opts.uiOptions.cwd.listView && opts.uiOptions.cwd.listView.columns) {
        this.options.uiOptions.cwd.listView.columns = opts.uiOptions.cwd.listView.columns;
    }
    if (opts.uiOptions && opts.uiOptions.cwd && opts.uiOptions.cwd.listView && opts.uiOptions.cwd.listView.columnsCustomName) {
        this.options.uiOptions.cwd.listView.columnsCustomName = opts.uiOptions.cwd.listView.columnsCustomName;
    }

    $.extend(this.options.contextmenu, opts.contextmenu);


    /**
	 * Ajax request type
	 *
	 * @type String
	 * @default "get"
	 **/
    this.requestType = /^(get|post)$/i.test(this.options.requestType) ? this.options.requestType.toLowerCase() : 'get',

        /**
	 * Any data to send across every ajax request
	 *
	 * @type Object
	 * @default {}
	 **/
        this.customData = $.isPlainObject(this.options.customData) ? this.options.customData : {};

    /**
	 * ID. Required to create unique cookie name
	 *
	 * @type String
	 **/
    this.id = id;

    /**
	 * URL to upload files
	 *
	 * @type String
	 **/
    this.uploadURL = opts.urlUpload || opts.url;

    /**
	 * Events namespace
	 *
	 * @type String
	 **/
    this.namespace = namespace;

    /**
	 * Interface language
	 *
	 * @type String
	 * @default "en"
	 **/
    this.lang = this.i18[this.options.lang] && this.i18[this.options.lang].messages ? this.options.lang : 'en';

    i18n = this.lang == 'en'
        ? this.i18['en']
        : $.extend(true, {}, this.i18['en'], this.i18[this.lang]);

    /**
	 * Interface direction
	 *
	 * @type String
	 * @default "ltr"
	 **/
    this.direction = i18n.direction;

    /**
	 * i18 messages
	 *
	 * @type Object
	 **/
    this.messages = i18n.messages;

    /**
	 * Date/time format
	 *
	 * @type String
	 * @default "m.d.Y"
	 **/
    this.dateFormat = this.options.dateFormat || i18n.dateFormat;

    /**
	 * Date format like "Yesterday 10:20:12"
	 *
	 * @type String
	 * @default "{day} {time}"
	 **/
    this.fancyFormat = this.options.fancyDateFormat || i18n.fancyDateFormat;

    /**
	 * Today timestamp
	 *
	 * @type Number
	 **/
    this.today = (new Date(date.getFullYear(), date.getMonth(), date.getDate())).getTime() / 1000;

    /**
	 * Yesterday timestamp
	 *
	 * @type Number
	 **/
    this.yesterday = this.today - 86400;

    utc = this.options.UTCDate ? 'UTC' : '';

    this.getHours = 'get' + utc + 'Hours';
    this.getMinutes = 'get' + utc + 'Minutes';
    this.getSeconds = 'get' + utc + 'Seconds';
    this.getDate = 'get' + utc + 'Date';
    this.getDay = 'get' + utc + 'Day';
    this.getMonth = 'get' + utc + 'Month';
    this.getFullYear = 'get' + utc + 'FullYear';

    /**
	 * Css classes 
	 *
	 * @type String
	 **/
    this.cssClass = 'ui-helper-reset ui-helper-clearfix ui-widget ui-widget-content ui-corner-all elfinder elfinder-' + (this.direction == 'rtl' ? 'rtl' : 'ltr') + ' ' + this.options.cssClass;

    /**
	 * Method to store/fetch data
	 *
	 * @type Function
	 **/
    this.storage = (function() {
        try {
            return 'localStorage' in window && window['localStorage'] !== null ? self.localStorage : self.cookie;
        } catch (e) {
            return self.cookie;
        }
    })();

    this.viewType = this.storage('view') || this.options.defaultView || 'icons';

    this.sortType = this.storage('sortType') || this.options.sortType || 'name';

    this.sortOrder = this.storage('sortOrder') || this.options.sortOrder || 'asc';

    this.sortStickFolders = this.storage('sortStickFolders');

    if (this.sortStickFolders === null) {
        this.sortStickFolders = !!this.options.sortStickFolders;
    } else {
        this.sortStickFolders = !!this.sortStickFolders;
    }

    this.sortRules = $.extend(true, {}, this._sortRules, this.options.sortsRules);

    $.each(this.sortRules, function(name, method) {
        if (typeof method != 'function') {
            delete self.sortRules[name];
        }
    });

    this.compare = $.proxy(this.compare, this);

    /**
	 * Delay in ms before open notification dialog
	 *
	 * @type Number
	 * @default 500
	 **/
    this.notifyDelay = this.options.notifyDelay > 0 ? parseInt(this.options.notifyDelay) : 500;

    /**
	 * Base draggable options
	 *
	 * @type Object
	 **/
    this.draggable = {
        appendTo: 'body',
        addClasses: true,
        delay: 30,
        distance: 8,
        revert: true,
        refreshPositions: true,
        cursor: 'move',
        cursorAt: { left: 50, top: 47 },
        drag: function(e, ui) {
            if (!ui.helper.data('locked')) {
                ui.helper.toggleClass('elfinder-drag-helper-plus', e.shiftKey || e.ctrlKey || e.metaKey);
            }
        },
        start: function(e, ui) {
            var targets = $.map(ui.helper.data('files') || [], function(h) { return h || null; }),
                cnt,
                h;
            cnt = targets.length;
            while (cnt--) {
                h = targets[cnt];
                if (files[h].locked) {
                    ui.helper.addClass('elfinder-drag-helper-plus').data('locked', true);
                    break;
                }
            }
        },
        stop: function() { self.trigger('focus').trigger('dragstop'); },
        helper: function(e, ui) {
            var element = this.id ? $(this) : $(this).parents('[id]:first'),
                helper = $('<div class="elfinder-drag-helper"><span class="elfinder-drag-helper-icon-plus"/></div>'),
                icon = function(mime) { return '<div class="elfinder-cwd-icon ' + self.mime2class(mime) + ' ui-corner-all"/>'; },
                hashes,
                l;

            self.trigger('dragstart', { target: element[0], originalEvent: e });

            hashes = element.is('.' + self.res('class', 'cwdfile'))
                ? self.selected()
                : [self.navId2Hash(element.attr('id'))];

            helper.append(icon(files[hashes[0]].mime)).data('files', hashes).data('locked', false);

            if ((l = hashes.length) > 1) {
                helper.append(icon(files[hashes[l - 1]].mime) + '<span class="elfinder-drag-num">' + l + '</span>');
            }

            return helper;
        }
    };

    /**
	 * Base droppable options
	 *
	 * @type Object
	 **/
    this.droppable = {
        // greedy     : true,
        tolerance: 'pointer',
        accept: '.elfinder-cwd-file-wrapper,.elfinder-navbar-dir,.elfinder-cwd-file',
        hoverClass: this.res('class', 'adroppable'),
        drop: function(e, ui) {
            var dst = $(this),
                targets = $.map(ui.helper.data('files') || [], function(h) { return h || null; }),
                result = [],
                c = 'class',
                cnt,
                hash,
                i,
                h;

            if (dst.is('.' + self.res(c, 'cwd'))) {
                hash = cwd;
            } else if (dst.is('.' + self.res(c, 'cwdfile'))) {
                hash = dst.attr('id');
            } else if (dst.is('.' + self.res(c, 'navdir'))) {
                hash = self.navId2Hash(dst.attr('id'));
            }

            cnt = targets.length;

            while (cnt--) {
                h = targets[cnt];
                // ignore drop into itself or in own location
                h != hash && files[h].phash != hash && result.push(h);
            }

            if (result.length) {
                ui.helper.hide();
                self.clipboard(result, !(e.ctrlKey || e.shiftKey || e.metaKey || ui.helper.data('locked')));
                self.exec('paste', hash);
                self.trigger('drop', { files: targets });

            }
        }
    };

    /**
	 * Return true if filemanager is active
	 *
	 * @return Boolean
	 **/
    this.enabled = function() {
        return node.is(':visible') && enabled;
    }; /**
	 * Return true if filemanager is visible
	 *
	 * @return Boolean
	 **/
    this.visible = function() {
        return node.is(':visible');
    }; /**
	 * Return root dir hash for current working directory
	 * 
	 * @return String
	 */
    this.root = function(hash) {
        var dir = files[hash || cwd], i;

        while (dir && dir.phash) {
            dir = files[dir.phash];
        }
        if (dir) {
            return dir.hash;
        }

        while (i in files && files.hasOwnProperty(i)) {
            dir = files[i];
            if (!dir.phash && !dir.mime == 'directory' && dir.read) {
                return dir.hash;
            }
        }

        return '';
    }; /**
	 * Return current working directory info
	 * 
	 * @return Object
	 */
    this.cwd = function() {
        return files[cwd] || {};
    }; /**
	 * Return required cwd option
	 * 
	 * @param  String  option name
	 * @return mixed
	 */
    this.option = function(name) {
        return cwdOptions[name] || '';
    }; /**
	 * Return file data from current dir or tree by it's hash
	 * 
	 * @param  String  file hash
	 * @return Object
	 */
    this.file = function(hash) {
        return files[hash];
    };

    /**
	 * Return all cached files
	 * 
	 * @return Array
	 */
    this.files = function() {
        return $.extend(true, {}, files);
    }; /**
	 * Return list of file parents hashes include file hash
	 * 
	 * @param  String  file hash
	 * @return Array
	 */
    this.parents = function(hash) {
        var parents = [],
            dir;

        while ((dir = this.file(hash))) {
            parents.unshift(dir.hash);
            hash = dir.phash;
        }
        return parents;
    };
    this.path2array = function(hash, i18) {
        var file,
            path = [];

        while (hash && (file = files[hash]) && file.hash) {
            path.unshift(i18 && file.i18 ? file.i18 : file.name);
            hash = file.phash;
        }

        return path;
    }; /**
	 * Return file path
	 * 
	 * @param  Object  file
	 * @return String
	 */
    this.path = function(hash, i18) {
        return files[hash] && files[hash].path
            ? files[hash].path
            : this.path2array(hash, i18).join(cwdOptions.separator);
    }; /**
	 * Return file url if set
	 * 
	 * @param  Object  file
	 * @return String
	 */
    this.url = function(hash) {
        var file = files[hash];

        if (!file || !file.read) {
            return '';
        }

        if (file.url) {
            return file.url;
        }

        if (cwdOptions.url) {
            return cwdOptions.url + $.map(this.path2array(hash), function(n) { return encodeURIComponent(n); }).slice(1).join('/');
        }

        var params = $.extend({}, this.customData, {
            cmd: 'file',
            target: file.hash
        });
        if (this.oldAPI) {
            params.cmd = 'open';
            params.current = file.phash;
        }
        return this.options.url + (this.options.url.indexOf('?') === -1 ? '?' : '&') + $.param(params, true);
    }; /**
	 * Return thumbnail url
	 * 
	 * @param  String  file hash
	 * @return String
	 */
    this.tmb = function(hash) {
        var file = files[hash],
            url = file && file.tmb && file.tmb != 1 ? cwdOptions['tmbUrl'] + file.tmb : '';

        if (url && (this.UA.Opera || this.UA.IE)) {
            url += '?_=' + new Date().getTime();
        }
        return url;
    }; /**
	 * Return selected files hashes
	 *
	 * @return Array
	 **/
    this.selected = function() {
        return selected.slice(0);
    }; /**
	 * Return selected files info
	 * 
	 * @return Array
	 */
    this.selectedFiles = function() {
        return $.map(selected, function(hash) { return files[hash] ? $.extend({}, files[hash]) : null; });
    };

    /**
	 * Return true if file with required name existsin required folder
	 * 
	 * @param  String  file name
	 * @param  String  parent folder hash
	 * @return Boolean
	 */
    this.fileByName = function(name, phash) {
        var hash;

        for (hash in files) {
            if (files.hasOwnProperty(hash) && files[hash].phash == phash && files[hash].name == name) {
                return files[hash];
            }
        }
    };

    /**
	 * Valid data for required command based on rules
	 * 
	 * @param  String  command name
	 * @param  Object  cammand's data
	 * @return Boolean
	 */
    this.validResponse = function(cmd, data) {
        return data.error || this.rules[this.rules[cmd] ? cmd : 'defaults'](data);
    }; /**
	 * Proccess ajax request.
	 * Fired events :
	 * @example
	 * @return $.Deferred
	 */
    this.request = function(options) {
        var self = this,
            o = this.options,
            dfrd = $.Deferred(),
            // request data
            data = $.extend({}, o.customData, { mimes: o.onlyMimes }, options.data || options),
            // command name
            cmd = data.cmd,
            // call default fail callback (display error dialog) ?
            deffail = !(options.preventDefault || options.preventFail),
            // call default success callback ?
            defdone = !(options.preventDefault || options.preventDone),
            // options for notify dialog
            notify = $.extend({}, options.notify),
            // do not normalize data - return as is
            raw = !!options.raw,
            // sync files on request fail
            syncOnFail = options.syncOnFail,
            // open notify dialog timeout		
            timeout,
            // request options
            options = $.extend({
                url: o.url,
                async: true,
                type: this.requestType,
                dataType: 'json',
                cache: false,
                // timeout  : 100,
                data: data
            }, options.options || {}),
            /**
			 * Default success handler. 
			 * Call default data handlers and fire event with command name.
			 *
			 * @param Object  normalized response data
			 * @return void
			 **/
            done = function(data) {

                data.warning && self.error(data.warning);

                cmd == 'open' && open($.extend(true, {}, data));

                // fire some event to update cache/ui
                data.removed && data.removed.length && self.remove(data);
                data.added && data.added.length && self.add(data);
                data.changed && data.changed.length && self.change(data);

                // fire event with command name
                self.trigger(cmd, data);

                // force update content
                data.sync && self.sync();
            },
            /**
			 * Request error handler. Reject dfrd with correct error message.
			 *
			 * @param jqxhr  request object
			 * @param String request status
			 * @return void
			 **/
            error = function(xhr, status) {
                var error;

                switch (status) {
                case 'abort':
                    error = xhr.quiet ? '' : ['errConnect', 'errAbort'];
                    break;
                case 'timeout':
                    error = ['errConnect', 'errTimeout'];
                    break;
                case 'parsererror':
                    error = ['errResponse', 'errDataNotJSON'];
                    break;
                default:
                    if (xhr.status == 403) {
                        error = ['errConnect', 'errAccess'];
                    } else if (xhr.status == 404) {
                        error = ['errConnect', 'errNotFound'];
                    } else {
                        error = 'errConnect';
                    }
                }

                dfrd.reject(error, xhr, status);
            },
            /**
			 * Request success handler. Valid response data and reject/resolve dfrd.
			 *
			 * @param Object  response data
			 * @param String request status
			 * @return void
			 **/
            success = function(response) {
                if (raw) {
                    return dfrd.resolve(response);
                }

                if (!response) {
                    return dfrd.reject(['errResponse', 'errDataEmpty'], xhr);
                } else if (!$.isPlainObject(response)) {
                    return dfrd.reject(['errResponse', 'errDataNotJSON'], xhr);
                } else if (response.error) {
                    if (response.redurl) {
                        if (self.isModal) {
                            if (parent.Master && parent.Master.goUrl) {
                                parent.Master.goUrl(response.redurl);
                            }
                        } else {
                            window.location.href = response.redurl;
                        }
                        return dfrd.reject();
                    }
                    if (response.log) {
                        window.console && window.console.log && window.console.log(response.log);
                        return dfrd.reject(response.error);
                    }
                    return dfrd.reject(response.error);
                } else if (!self.validResponse(cmd, response)) {
                    return dfrd.reject('errResponse', xhr);
                }

                response = self.normalize(response);

                if (!self.api) {
                    self.api = response.api || 1;
                    self.newAPI = self.api >= 2;
                    self.oldAPI = !self.newAPI;
                }

                if (response.options) {
                    cwdOptions = $.extend({}, cwdOptions, response.options);
                }

                if (response.netDrivers) {
                    self.netDrivers = response.netDrivers;
                }

                dfrd.resolve(response);
                response.debug && self.debug('backend-debug', response.debug);
            },
            xhr,
            _xhr;

        defdone && dfrd.done(done);
        dfrd.fail(function(error) {
            if (error) {
                deffail ? self.error(error) : self.debug('error', self.i18n(error));
            }
        });
        if (!cmd) {
            return dfrd.reject('errCmdReq');
        }

        if (syncOnFail) {
            dfrd.fail(function(error) {
                error && self.sync();
            });
        }

        if (notify.type && notify.cnt) {
            timeout = setTimeout(function() {
                self.notify(notify);
                dfrd.always(function() {
                    notify.cnt = -(parseInt(notify.cnt) || 0);
                    self.notify(notify);
                });
            }, self.notifyDelay);
            dfrd.always(function() {
                clearTimeout(timeout);
            });
        }

        // quiet abort not completed "open" requests
        if (cmd == 'open') {
            while ((_xhr = queue.pop())) {
                if (_xhr.state() == 'pending') {
                    _xhr.quiet = true;
                    _xhr.abort();
                }
            }
        }

        delete options.preventFail;
        xhr = this.transport.send(options).fail(error).done(success);

        // this.transport.send(options)

        // add "open" xhr into queue
        if (cmd == 'open') {
            queue.unshift(xhr);
            dfrd.always(function() {
                var ndx = $.inArray(xhr, queue);

                ndx !== -1 && queue.splice(ndx, 1);
            });
        }

        return dfrd;
    };

    /**
	 * Compare current files cache with new files and return diff
	 * 
	 * @param  Array  new files
	 * @return Object
	 */
    this.diff = function(incoming) {
        var raw = {},
            added = [],
            removed = [],
            changed = [],
            isChanged = function(hash) {
                var l = changed.length;

                while (l--) {
                    if (changed[l].hash == hash) {
                        return true;
                    }
                }
            };

        $.each(incoming, function(i, f) {
            raw[f.hash] = f;
        });

        // find removed
        $.each(files, function(hash, f) {
            !raw[hash] && removed.push(hash);
        });

        // compare files
        $.each(raw, function(hash, file) {
            var origin = files[hash];

            if (!origin) {
                added.push(file);
            } else {
                $.each(file, function(prop) {
                    if (file[prop] != origin[prop]) {
                        changed.push(file);
                        return false;
                    }
                });
            }
        });

        // parents of removed dirs mark as changed (required for tree correct work)
        $.each(removed, function(i, hash) {
            var file = files[hash],
                phash = file.phash;

            if (phash
                && file.mime == 'directory'
                && $.inArray(phash, removed) === -1
                && raw[phash]
                && !isChanged(phash)) {
                changed.push(raw[phash]);
            }
        });

        return {
            added: added,
            removed: removed,
            changed: changed
        };
    }; /**
	 * Sync content
	 * 
	 * @return jQuery.Deferred
	 */
    this.sync = function() {
        var self = this,
            dfrd = $.Deferred().done(function() { self.trigger('sync'); }),
            opts1 = {
                data: { cmd: 'open', init: 1, target: cwd, tree: this.ui.tree ? 1 : 0 },
                preventDefault: true
            },
            opts2 = {
                data: { cmd: 'tree', target: (cwd == this.root()) ? cwd : this.file(cwd).phash },
                preventDefault: true
            };

        $.when(
                this.request(opts1),
                this.request(opts2)
            )
            .fail(function(error) {
                dfrd.reject(error);
                error && self.request({
                    data: { cmd: 'open', target: self.lastDir(''), tree: 1, init: 1 },
                    notify: { type: 'open', cnt: 1, hideCnt: true },
                    preventDefault: true
                });
            })
            .done(function(odata, pdata) {
                var diff = self.diff(odata.files.concat(pdata && pdata.tree ? pdata.tree : []));

                diff.added.push(odata.cwd);
                diff.removed.length && self.remove(diff);
                diff.added.length && self.add(diff);
                diff.changed.length && self.change(diff);
                return dfrd.resolve(diff);
            });

        return dfrd;
    };
    this.upload = function(files, notUpload, dublicateIndexes) {
        return this.transport.upload(files, this, notUpload, dublicateIndexes);
    }; /**
	 * Attach listener to events
	 * To bind to multiply events at once, separate events names by space
	 * 
	 * @param  String  event(s) name(s)
	 * @param  Object  event handler
	 * @return elFinder
	 */
    this.bind = function(event, callback) {
        var i;

        if (typeof (callback) == 'function') {
            event = ('' + event).toLowerCase().split(/\s+/);

            for (i = 0; i < event.length; i++) {
                if (listeners[event[i]] === void (0)) {
                    listeners[event[i]] = [];
                }
                listeners[event[i]].push(callback);
            }
        }
        return this;
    };

    /**
	 * Remove event listener if exists
	 *
	 * @param  String    event name
	 * @param  Function  callback
	 * @return elFinder
	 */
    this.unbind = function(event, callback) {
        var l = listeners[('' + event).toLowerCase()] || [],
            i = l.indexOf(callback);

        i > -1 && l.splice(i, 1);
        //delete callback; // need this?
        callback = null;
        return this;
    };

    /**
	 * Fire event - send notification to all event listeners
	 *
	 * @param  String   event type
	 * @param  Object   data to send across event
	 * @return elFinder
	 */
    this.trigger = function(event, data) {
        var event = event.toLowerCase(),
            handlers = listeners[event] || [],
            i,
            j;

        this.debug('event-' + event, data);
        if (handlers.length) {
            event = $.Event(event);

            for (i = 0; i < handlers.length; i++) {
                // to avoid data modifications. remember about "sharing" passing arguments in js :) 
                event.data = $.extend(true, {}, data);

                try {
                    if (handlers[i](event, this) === false
                        || event.isDefaultPrevented()) {
                        this.debug('event-stoped', event.type);
                        break;
                    }
                } catch (ex) {
                    window.console && window.console.log && window.console.log(ex);
                }

            }
        }
        return this;
    }; /**
	 * Bind keybord shortcut to keydown event
	 *
	 * @example
	 *    elfinder.shortcut({ 
	 *       pattern : 'ctrl+a', 
	 *       description : 'Select all files', 
	 *       callback : function(e) { ... }, 
	 *       keypress : true|false (bind to keypress instead of keydown) 
	 *    })
	 *
	 * @param  Object  shortcut config
	 * @return elFinder
	 */
    this.shortcut = function(s) {
        var patterns, pattern, code, i, parts;

        if (this.options.allowShortcuts && s.pattern && $.isFunction(s.callback)) {
            patterns = s.pattern.toUpperCase().split(/\s+/);

            for (i = 0; i < patterns.length; i++) {
                pattern = patterns[i];
                parts = pattern.split('+');
                code = (code = parts.pop()).length == 1
                    ? code > 0 ? code : code.charCodeAt(0)
                    : $.ui.keyCode[code];

                if (code && !shortcuts[pattern]) {
                    shortcuts[pattern] = {
                        keyCode: code,
                        altKey: $.inArray('ALT', parts) != -1,
                        ctrlKey: $.inArray('CTRL', parts) != -1,
                        shiftKey: $.inArray('SHIFT', parts) != -1,
                        type: s.type || 'keydown',
                        callback: s.callback,
                        description: s.description,
                        pattern: pattern
                    };
                }
            }
        }
        return this;
    }; /**
	 * Registered shortcuts
	 *
	 * @type Object
	 **/
    this.shortcuts = function() {
        var ret = [];

        $.each(shortcuts, function(i, s) {
            ret.push([s.pattern, self.i18n(s.description)]);
        });
        return ret;
    };

    /**
	 * Get/set clipboard content.
	 * Return new clipboard content.
	 *
	 * @example
	 *   this.clipboard([]) - clean clipboard
	 *   this.clipboard([{...}, {...}], true) - put 2 files in clipboard and mark it as cutted
	 * 
	 * @param  Array    new files hashes
	 * @param  Boolean  cut files?
	 * @return Array
	 */
    this.clipboard = function(hashes, cut) {
        var map = function() { return $.map(clipboard, function(f) { return f.hash; }); };
        if (hashes !== void (0)) {
            clipboard.length && this.trigger('unlockfiles', { files: map() });
            remember = [];

            clipboard = $.map(hashes || [], function(hash) {
                var file = files[hash];
                if (file) {

                    remember.push(hash);

                    return {
                        hash: hash,
                        phash: file.phash,
                        name: file.name,
                        mime: file.mime,
                        read: file.read,
                        locked: file.locked,
                        cut: !!cut
                    };
                }
                return null;
            });
            this.trigger('changeclipboard', { clipboard: clipboard.slice(0, clipboard.length) });
            cut && this.trigger('lockfiles', { files: map() });
        }

        // return copy of clipboard instead of refrence
        return clipboard.slice(0, clipboard.length);
    }; /**
	 * Return true if command enabled
	 * 
	 * @param  String  command name
	 * @return Boolean
	 */
    this.isCommandEnabled = function(name) {
        return this._commands[name] ? $.inArray(name, cwdOptions.disabled) === -1 : false;
    }; /**
	 * Exec command and return result;
	 *
	 * @param  String         command name
	 * @param  String|Array   usualy files hashes
	 * @param  String|Array   command options
	 * @return $.Deferred
	 */
    this.exec = function(cmd, files, opts) {
        return this._commands[cmd] && this.isCommandEnabled(cmd)
            ? this._commands[cmd].exec(files, opts)
            : $.Deferred().reject('No such command');
    }; /**
	 * Create and return dialog.
	 *
	 * @param  String|DOMElement  dialog content
	 * @param  Object             dialog options
	 * @return jQuery
	 */
    this.dialog = function(content, options) {
        return $('<div/>').append(content).appendTo(node).elfindercryptxdialog(options);
        //return $('<div/>').append(content).appendTo(node).elfinderdialog(options);
    }; /**
	 * Return UI widget or node
	 *
	 * @param  String  ui name
	 * @return jQuery
	 */
    this.getUI = function(ui) {
        return this.ui[ui] || node;
    };
    this.command = function(name) {
        return name === void (0) ? this._commands : this._commands[name];
    }; /**
	 * Resize elfinder node
	 * 
	 * @param  String|Number  width
	 * @param  Number         height
	 * @return void
	 */
    this.resize = function(w, h) {
        node.css('width', w).height(h).trigger('resize');
        this.trigger('resize', {
            width: node.width(),
            height: node.height()
        });
    }; /**
	 * Restore elfinder node size
	 * 
	 * @return elFinder
	 */
    this.restoreSize = function() {
        this.resize(width, height);
    };
    this.show = function() {
        node.show();
        this.enable().trigger('show');
    };
    this.hide = function() {
        this.disable().trigger('hide');
        node.hide();
    }; /**
	 * Destroy this elFinder instance
	 *
	 * @return void
	 **/
    this.destroy = function() {
        if (node && node[0].elfinder) {
            this.trigger('destroy').disable();
            listeners = {};
            shortcuts = {};
            $(document).add(node).unbind('.' + this.namespace);
            self.trigger = function() {};
            node.children().remove();
            node.append(prevContent.contents()).removeClass(this.cssClass).attr('style', prevStyle);
            node[0].elfinder = null;
            if (syncInterval) {
                clearInterval(syncInterval);
            }
        }
    }; /*************  init stuffs  ****************/

    // check jquery ui
    if (!($.fn.selectable && $.fn.draggable && $.fn.droppable)) {
        return alert(this.i18n('errJqui'));
    }

    // check node
    if (!node.length) {
        return alert(this.i18n('errNode'));
    }
    // check connector url
    if (!this.options.url) {
        return alert(this.i18n('errURL'));
    }

    $.extend($.ui.keyCode, {
        'F1': 112,
        'F2': 113,
        'F3': 114,
        'F4': 115,
        'F5': 116,
        'F6': 117,
        'F7': 118,
        'F8': 119,
        'F9': 120
    });

    this.dragUpload = false;
    this.xhrUpload = (typeof XMLHttpRequestUpload != 'undefined' || typeof XMLHttpRequestEventTarget != 'undefined') && typeof File != 'undefined' && typeof FormData != 'undefined';

    // configure transport object
    this.transport = {};
    if (typeof (this.options.transport) == 'object') {
        this.transport = this.options.transport;
        if (typeof (this.transport.init) == 'function') {
            this.transport.init(this);
        }
    }

    if (typeof (this.transport.send) != 'function') {
        this.transport.send = function(opts) { return $.ajax(opts); };
    }

    if (this.transport.upload == 'iframe') {
        this.transport.upload = $.proxy(this.uploads.iframe, this);
    } else if (typeof (this.transport.upload) == 'function') {
        this.dragUpload = !!this.options.dragUploadAllow;
    } else if (this.xhrUpload && !!this.options.dragUploadAllow) {
        this.transport.upload = $.proxy(this.uploads.xhr, this);
        this.dragUpload = true;
    } else {
        this.transport.upload = $.proxy(this.uploads.iframe, this);
    }

    /**
	 * Alias for this.trigger('error', {error : 'message'})
	 *
	 * @param  String  error message
	 * @return elFinder
	 **/
    this.error = function() {
        var arg = arguments[0];
        return arguments.length == 1 && typeof (arg) == 'function'
            ? self.bind('error', arg)
            : self.trigger('error', { error: arg });
    }; // create bind/trigger aliases for build-in events
    $.each(['enable', 'disable', 'load', 'open', 'reload', 'select', 'add', 'remove', 'change', 'dblclick', 'getfile', 'lockfiles', 'unlockfiles', 'dragstart', 'dragstop', 'search', 'searchend', 'viewchange'], function(i, name) {
        self[name] = function() {
            var arg = arguments[0];
            return arguments.length == 1 && typeof (arg) == 'function'
                ? self.bind(name, arg)
                : self.trigger(name, $.isPlainObject(arg) ? arg : {});
        };
    });

    // bind core event handlers
    this
        .enable(function() {
            if (!enabled && self.visible() && self.ui.overlay.is(':hidden')) {
                enabled = true;
                $('texarea:focus, input:focus, button').blur();
                node.removeClass('elfinder-disabled');
            }
        })
        .disable(function() {
            prevEnabled = enabled;
            enabled = false;
            node.addClass('elfinder-disabled');
        })
        .open(function() {
            selected = [];
        })
        .select(function(e) {
            selected = $.map(e.data.selected || e.data.value || [], function(hash) { return files[hash] ? hash : null; });
        })
        .error(function(e) {
            var opts = {
                cssClass: 'elfinder-dialog-error',
                title: self.i18n(self.i18n('error')),
                resizable: false,
                destroyOnClose: true,
                buttons: {}
            };

            opts.buttons[self.i18n(self.i18n('btnClose'))] = function() {
                //$(this).elfinderdialog('close');
                $(this).elfindercryptxdialog('close');
            };

            self.dialog('<div class="error"><span>' + self.i18n(e.data.error) + '</span></div></div>', opts);
            //self.dialog('<span class="elfinder-dialog-icon elfinder-dialog-icon-error"/>'+self.i18n(e.data.error), opts);
        })
        .bind('tree parents', function(e) {
            cache(e.data.tree || []);
        })
        .bind('tmb', function(e) {
            $.each(e.data.images || [], function(hash, tmb) {
                if (files[hash]) {
                    files[hash].tmb = tmb;
                }
            });
        })
        .add(function(e) {
            cache(e.data.added || []);
        })
        .change(function(e) {
            $.each(e.data.changed || [], function(i, file) {
                var hash = file.hash;
                if ((files[hash].width && !file.width) || (files[hash].height && !file.height)) {
                    files[hash].width = undefined;
                    files[hash].height = undefined;
                }
                files[hash] = files[hash] ? $.extend(files[hash], file) : file;
            });
        })
        .remove(function(e) {
            var removed = e.data.removed || [],
                l = removed.length,
                rm = function(hash) {
                    var file = files[hash];
                    if (file) {
                        if (file.mime == 'directory' && file.dirs) {
                            $.each(files, function(h, f) {
                                f.phash == hash && rm(h);
                            });
                        }
                        delete files[hash];
                    }
                };

            while (l--) {
                rm(removed[l]);
            }

        })
        .bind('search', function(e) {
            cache(e.data.files);
        })
        .bind('rm', function(e) {
            var play = beeper.canPlayType && beeper.canPlayType('audio/wav; codecs="1"');

            play && play != '' && play != 'no' && $(beeper).html('<source src="./sounds/rm.wav" type="audio/wav">')[0].play();
        });

    // bind external event handlers
    $.each(this.options.handlers, function(event, callback) {
        self.bind(event, callback);
    });

    /**
	 * History object. Store visited folders
	 *
	 * @type Object
	 **/
    this.history = new this.history(this);

    // in getFileCallback set - change default actions on double click/enter/ctrl+enter
    if (typeof (this.options.getFileCallback) == 'function' && this.commands.getfile) {
        this.bind('dblclick', function(e) {
            e.preventDefault();
            self.exec('getfile').fail(function() {
                self.exec('open');
            });
        });
        this.shortcut({
                pattern: 'enter',
                description: this.i18n('cmdgetfile'),
                callback: function() { self.exec('getfile').fail(function() { self.exec(self.OS == 'mac' ? 'rename' : 'open'); }); }
            })
            .shortcut({
                pattern: 'ctrl+enter',
                description: this.i18n(this.OS == 'mac' ? 'cmdrename' : 'cmdopen'),
                callback: function() { self.exec(self.OS == 'mac' ? 'rename' : 'open'); }
            });

    }

    /**
	 * Loaded commands
	 *
	 * @type Object
	 **/
    this._commands = {};

    if (!$.isArray(this.options.commands)) {
        this.options.commands = [];
    }
    // check required commands
    $.each(['open', 'reload', 'back', 'forward', 'up', 'home', 'info', 'quicklook', 'getfile', 'help'], function(i, cmd) {
        $.inArray(cmd, self.options.commands) === -1 && self.options.commands.push(cmd);
    });

    // load commands
    $.each(this.options.commands, function(i, name) {
        var cmd = self.commands[name];
        if ($.isFunction(cmd) && !self._commands[name]) {
            cmd.prototype = base;
            self._commands[name] = new cmd();
            self._commands[name].setup(name, self.options.commandsOptions[name] || {});
        }
    });

    // prepare node
    node.addClass(this.cssClass)
        .bind(mousedown, function() {
            !enabled && self.enable();
        });

    /**
	 * UI nodes
	 *
	 * @type Object
	 **/
    this.ui = {
        // container for nav panel and current folder container
        workzone: $('<div/>').appendTo(node).elfinderworkzone(this),
        // container for folders tree / places
        navbar: $('<div/>').appendTo(node).elfindernavbar(this, this.options.uiOptions.navbar || {}),
        // contextmenu
        contextmenu: $('<div/>').appendTo(node).elfindercontextmenu(this),
        // overlay
        overlay: $('<div/>').appendTo(node).elfinderoverlay({
            show: function() { self.disable(); },
            hide: function() { prevEnabled && self.enable(); }
        }),
        // current folder container
        cwd: $('<div/>').appendTo(node).elfindercwd(this, this.options.uiOptions.cwd || {}),
        // notification dialog window
        notify: this.dialog('', {
            cssClass: 'elfinder-dialog-notify',
            position: { top: '12px', right: '12px' },
            resizable: false,
            autoOpen: false,
            title: '&nbsp;',
            width: 280
        }),
        statusbar: $('<div class="ui-widget-header ui-helper-clearfix ui-corner-bottom elfinder-statusbar"/>').hide().appendTo(node)
    }; // load required ui
    $.each(this.options.ui || [], function(i, ui) {
        var name = 'elfinder' + ui,
            opts = self.options.uiOptions[ui] || {};

        if (!self.ui[ui] && $.fn[name]) {
            self.ui[ui] = $('<' + (opts.tag || 'div') + '/>').appendTo(node)[name](self, opts);
        }
    });


// store instance in node
    node[0].elfinder = this;

    // make node resizable
    this.options.resizable
        && $.fn.resizable
        && node.resizable({
            handles: 'se',
            minWidth: 300,
            minHeight: 200
        });

    if (this.options.width) {
        width = this.options.width;
    }

    if (this.options.height) {
        height = parseInt(this.options.height);
    }

    // update size	
    self.resize(width, height);

    // attach events to document
    $(document)
        // disable elfinder on click outside elfinder
        .bind('click.' + this.namespace, function(e) {
            //enabled && !$(e.target).closest(node).length && self.disable();
        })
        // exec shortcuts
        .bind(keydown + ' ' + keypress, execShortcut);

    // attach events to window
    self.options.useBrowserHistory && $(window)
        .on('popstate', function(ev) {
            var target = ev.originalEvent.state && ev.originalEvent.state.thash;
            target && !$.isEmptyObject(self.files()) && self.request({
                data: { cmd: 'open', target: target, onhistory: 1 },
                notify: { type: 'open', cnt: 1, hideCnt: true },
                syncOnFail: true
            });
        });

    var openData = { cmd: 'open', target: self.startDir(), init: 1, tree: this.ui.tree ? 1 : 0, isReceivedMail: 0, isModal: self.GetModalStatus() };
    if (self.GetReceivedMailId()) {
        openData.isReceivedMail = 1;
    }

    // send initial request and start to pray >_<
    this.trigger('init')
        .request({
            data: openData,
            preventDone: true,
            notify: { type: 'open', cnt: 1, hideCnt: true },
            freeze: true
        })
        .fail(function() {
            self.trigger('fail').disable().lastDir('');
            listeners = {};
            shortcuts = {};
            $(document).add(node).unbind('.' + this.namespace);
            self.trigger = function() {};
        })
        .done(function(data) {
            self.load().debug('api', self.api);
            data = $.extend(true, {}, data);
            open(data);
            self.trigger('open', data);
            if (self.GetReceivedMailId()) {
                self.trigger('received');
            }
        });

    // update ui's size after init
    this.one('load', function() {
        node.trigger('resize');
        if (self.options.sync > 1000) {
            syncInterval = setInterval(function() {
                self.sync();
            }, self.options.sync);
        }

    });

    this.one('filter', function(e) {
        files = {};
        cwd = e.data.cwd.hash;
        cache(e.data.files);
        if (!files[cwd]) {
            cache([e.data.cwd]);
        }
        self.lastDir(cwd);
    });

    // self.timeEnd('load'); 
};

function qs(key) {
    key = key.replace(/[*+?^$.\[\]{}()|\\\/]/g, "\\$&"); // escape RegEx meta chars
    var match = location.search.match(new RegExp("[?&]" + key + "=([^&]+)(&|$)"));
    return match && decodeURIComponent(match[1].replace(/\+/g, " "));
}

/**
 * Prototype
 * 
 * @type  Object
 */
elFinder.prototype = {
    getExtension: function(filename) {
        return (/[.]/.exec(filename)) ? /[^.]+$/.exec(filename) : undefined;
    },

    isModal: false,

    blockMultiSelection: false,

    MasterUrl: '/master/index',

    res: function(type, id) {
        return this.resources[type] && this.resources[type][id];
    },

    /**
	 * Internationalization object
	 * 
	 * @type  Object
	 */
    i18: {
        en: {
            translator: '',
            language: 'English',
            direction: 'ltr',
            dateFormat: 'd.m.Y H:i',
            fancyDateFormat: '$1 H:i',
            messages: {}
        },
        months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
        monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],

        days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        daysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
    },

    /**
	 * File mimetype to kind mapping
	 * 
	 * @type  Object
	 */
    kinds: {
        'unknown': 'Unknown',
        'directory': 'Folder',
        'symlink': 'Alias',
        'symlink-broken': 'AliasBroken',
        'application/x-empty': 'TextPlain',
        'application/postscript': 'Postscript',
        'application/vnd.ms-office': 'MsOffice',
        'application/vnd.ms-word': 'MsWord',
        'application/msword': 'MsWord',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'MsWord',
        'application/vnd.ms-word.document.macroEnabled.12': 'MsWord',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.template': 'MsWord',
        'application/vnd.ms-word.template.macroEnabled.12': 'MsWord',
        'application/x-docx': 'MsWord',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'MsExcel',
        'application/vnd.ms-excel': 'MsExcel',
        'application/vnd.ms-excel.sheet.macroEnabled.12': 'MsExcel',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.template': 'MsExcel',
        'application/vnd.ms-excel.template.macroEnabled.12': 'MsExcel',
        'application/vnd.ms-excel.sheet.binary.macroEnabled.12': 'MsExcel',
        'application/vnd.ms-excel.addin.macroEnabled.12': 'MsExcel',
        'application/vnd.ms-powerpoint': 'MsPP',
        'application/vnd.openxmlformats-officedocument.presentationml.presentation': 'MsPP',
        'application/vnd.ms-powerpoint.presentation.macroEnabled.12': 'MsPP',
        'application/vnd.openxmlformats-officedocument.presentationml.slideshow': 'MsPP',
        'application/vnd.ms-powerpoint.slideshow.macroEnabled.12': 'MsPP',
        'application/vnd.openxmlformats-officedocument.presentationml.template': 'MsPP',
        'application/vnd.ms-powerpoint.template.macroEnabled.12': 'MsPP',
        'application/vnd.ms-powerpoint.addin.macroEnabled.12': 'MsPP',
        'application/vnd.openxmlformats-officedocument.presentationml.slide': 'MsPP',
        'application/vnd.ms-powerpoint.slide.macroEnabled.12': 'MsPP',
        'application/pdf': 'PDF',
        'application/xml': 'XML',
        'application/vnd.oasis.opendocument.text': 'OO',
        'application/vnd.oasis.opendocument.text-template': 'OO',
        'application/vnd.oasis.opendocument.text-web': 'OO',
        'application/vnd.oasis.opendocument.text-master': 'OO',
        'application/vnd.oasis.opendocument.graphics': 'OO',
        'application/vnd.oasis.opendocument.graphics-template': 'OO',
        'application/vnd.oasis.opendocument.presentation': 'OO',
        'application/vnd.oasis.opendocument.presentation-template': 'OO',
        'application/vnd.oasis.opendocument.spreadsheet': 'OO',
        'application/vnd.oasis.opendocument.spreadsheet-template': 'OO',
        'application/vnd.oasis.opendocument.chart': 'OO',
        'application/vnd.oasis.opendocument.formula': 'OO',
        'application/vnd.oasis.opendocument.database': 'OO',
        'application/vnd.oasis.opendocument.image': 'OO',
        'application/vnd.openofficeorg.extension': 'OO',
        'application/x-shockwave-flash': 'AppFlash',
        'application/flash-video': 'FlashVideo',
        'application/x-bittorrent': 'Torrent',
        'application/javascript': 'JS',
        'application/rtf': 'RTF',
        'application/rtfd': 'RTF',
        'application/x-font-ttf': 'TTF',
        'application/x-font-otf': 'OTF',
        'application/x-rpm': 'RPM',
        'application/x-web-config': 'TextPlain',
        'application/xhtml+xml': 'HTML',
        'application/docbook+xml': 'DOCBOOK',
        'application/x-awk': 'AWK',
        'application/x-gzip': 'GZIP',
        'application/x-bzip2': 'BZIP',
        'application/zip': 'ZIP',
        'application/x-zip': 'ZIP',
        'application/x-rar': 'RAR',
        'application/x-tar': 'TAR',
        'application/x-7z-compressed': '7z',
        'application/x-compressed-tar': 'archive',
        'application/x-archive': 'archive',
        'application/x-jar': 'JAR',
        'application/vnd.sun.xml.writer.template': 'STW',
        'text/plain': 'TextPlain',
        'text/x-php': 'PHP',
        'text/html': 'HTML',
        'text/javascript': 'JS',
        'text/css': 'CSS',
        'text/rtf': 'RTF',
        'text/rtfd': 'RTF',
        'text/x-c': 'C',
        'text/x-csrc': 'C',
        'text/x-chdr': 'CHeader',
        'text/x-c++': 'CPP',
        'text/x-c++src': 'CPP',
        'text/x-c++hdr': 'CPPHeader',
        'text/x-shellscript': 'Shell',
        'application/x-csh': 'Shell',
        'text/x-python': 'Python',
        'text/x-java': 'Java',
        'text/x-java-source': 'Java',
        'text/x-ruby': 'Ruby',
        'text/x-perl': 'Perl',
        'text/x-sql': 'SQL',
        'text/xml': 'XML',
        'text/x-comma-separated-values': 'CSV',
        'image/x-ms-bmp': 'BMP',
        'image/jpeg': 'JPEG',
        'image/gif': 'GIF',
        'image/png': 'PNG',
        'image/tiff': 'TIFF',
        'image/x-targa': 'TGA',
        'image/vnd.adobe.photoshop': 'PSD',
        'image/xbm': 'XBITMAP',
        'image/pxm': 'PXM',
        'image/x-icn': 'ICON',
        'image/x-icon': 'ICON',
        'image/x-cr2': 'CR2',
        'image/bmp': 'BMP',
        'image/x-pic': 'PIC',
        'image/x-cdr': 'CDR',
        'audio/mpeg': 'AudioMPEG',
        'audio/midi': 'AudioMIDI',
        'audio/ogg': 'AudioOGG',
        'audio/mp4': 'AudioMPEG4',
        'audio/x-m4a': 'AudioMPEG4',
        'audio/wav': 'AudioWAV',
        'audio/x-wave': 'WAVE',
        'audio/x-m4r': 'M4R',
        'audio/x-aac': 'AAC',
        'audio/x-wma': 'WMA',
        'audio/x-mp2': 'MP2',
        'audio/x-dls': 'DLS',
        'audio/x-m4b': 'M4B',
        'audio/x-wav': 'WAV',
        'audio/x-mp1': 'MP1',
        'audio/x-mp3-playlist': 'AudioPlaylist',
        'video/x-dv': 'VideoDV',
        'video/mp4': 'VideoMPEG4',
        'video/mpeg': 'VideoMPEG',
        'video/x-msvideo': 'VideoAVI',
        'video/quicktime': 'VideoMOV',
        'video/x-ms-wmv': 'VideoWM',
        'video/x-flv': 'VideoFlash',
        'video/x-matroska': 'VideoMKV',
        'video/ogg': 'VideoOGG',
        'video/3gpp': '3GP',
        'video/x-mp4': 'MP4',
        'video/x-ms-asf': 'ASF',
        'video/x-amv': 'AMV',
        'video/x-aaf': 'AAF',
        'video/x-mpeg4': 'MPEG4',
        'video/x-xvid': 'XVID',
        'application/pgp-signature': 'Sign',
        'application/crypt': 'Crypt',
        'application/signcrypt': 'SignCrypt',
        'application/x-x509-ca-cert': 'Cert'
    },

    /**
	 * Ajax request data validation rules
	 * 
	 * @type  Object
	 */
    rules: {
        defaults: function(data) {
            if (!data
                || (data.added && !$.isArray(data.added))
                || (data.removed && !$.isArray(data.removed))
                || (data.changed && !$.isArray(data.changed))) {
                return false;
            }
            return true;
        },
        open: function(data) { return data && data.cwd && data.files && $.isPlainObject(data.cwd) && $.isArray(data.files); },
        tree: function(data) { return data && data.tree && $.isArray(data.tree); },
        parents: function(data) { return data && data.tree && $.isArray(data.tree); },
        tmb: function(data) { return data && data.images && ($.isPlainObject(data.images) || $.isArray(data.images)); },
        upload: function(data) { return data && ($.isPlainObject(data.added) || $.isArray(data.added)); },
        search: function(data) { return data && data.files && $.isArray(data.files); }
    },


/**
	 * Commands costructors
	 *
	 * @type Object
	 */
    commands: {},

    parseUploadData: function(text) {
        var data;

        if (!$.trim(text)) {
            return { error: ['errResponse', 'errDataEmpty'] };
        }

        try {
            data = $.parseJSON(text);
        } catch (e) {
            return { error: ['errResponse', 'errDataNotJSON'] };
        }

        if (!this.validResponse('upload', data)) {
            return { error: ['errResponse'] };
        }
        data = this.normalize(data);
        data.removed = $.map(data.added || [], function(f) { return f.hash; });
        return data;

    },

    iframeCnt: 0,

    uploads: {
        // upload transport using iframe
        iframe: function(data, fm) {
            var self = fm ? fm : this,
                input = data.input,
                dfrd = $.Deferred()
                    .fail(function(error) {
                        error && self.error(error);
                    })
                    .done(function(data) {
                        data.warning && self.error(data.warning);
                        data.removed && self.remove(data);
                        data.added && self.add(data);
                        data.changed && self.change(data);
                        self.trigger('upload', data);
                        data.sync && self.sync();
                    }),
                name = 'iframe-' + self.namespace + (++self.iframeCnt),
                form = $('<form action="' + self.uploadURL + '" method="post" enctype="multipart/form-data" encoding="multipart/form-data" target="' + name + '" style="display:none"><input type="hidden" name="cmd" value="upload" /></form>'),
                msie = this.UA.IE,
                // clear timeouts, close notification dialog, remove form/iframe
                onload = function() {
                    abortto && clearTimeout(abortto);
                    notifyto && clearTimeout(notifyto);
                    notify && self.notify({ type: 'upload', cnt: -cnt });

                    setTimeout(function() {
                        msie && $('<iframe src="javascript:false;"/>').appendTo(form);
                        form.remove();
                        iframe.remove();
                    }, 100);
                },
                iframe = $('<iframe src="' + (msie ? 'javascript:false;' : 'about:blank') + '" name="' + name + '" style="position:absolute;left:-1000px;top:-1000px" />')
                    .bind('load', function() {
                        iframe.unbind('load')
                            .bind('load', function() {
                                var data = self.parseUploadData(iframe.contents().text());

                                onload();
                                data.error ? dfrd.reject(data.error) : dfrd.resolve(data);
                            });

                        // notify dialog
                        notifyto = setTimeout(function() {
                            notify = true;
                            self.notify({ type: 'upload', cnt: cnt });
                        }, self.options.notifyDelay);

                        // emulate abort on timeout
                        if (self.options.iframeTimeout > 0) {
                            abortto = setTimeout(function() {
                                onload();
                                dfrd.reject([errors.connect, errors.timeout]);
                            }, self.options.iframeTimeout);
                        }

                        form.submit();
                    }),
                cnt,
                notify,
                notifyto,
                abortto;

            if (input && $(input).is(':file') && $(input).val()) {
                form.append(input);
            } else {
                return dfrd.reject();
            }

            cnt = input.files ? input.files.length : 1;

            form.append('<input type="hidden" name="' + (self.newAPI ? 'target' : 'current') + '" value="' + self.cwd().hash + '"/>')
                .append('<input type="hidden" name="html" value="1"/>')
                .append($(input).attr('name', 'upload[]'));

            $.each(self.options.onlyMimes || [], function(i, mime) {
                form.append('<input type="hidden" name="mimes[]" value="' + mime + '"/>');
            });

            $.each(self.options.customData, function(key, val) {
                form.append('<input type="hidden" name="' + key + '" value="' + val + '"/>');
            });

            form.appendTo('body');
            iframe.appendTo('body');

            return dfrd;
        },
        // upload transport using XMLHttpRequest
        //	xhr : function(data, fm,notUploadFilesIndex) { 
        //		var self   = fm ? fm : this,
        //			dfrd   = $.Deferred()
        //				.fail(function(error) {
        //					error && self.error(error);
        //				})
        //				.done(function(data) {
        //					data.warning && self.error(data.warning);
        //					data.removed && self.remove(data);
        //					data.added   && self.add(data);
        //					data.changed && self.change(data);
        // 					self.trigger('upload', data);
        //					data.sync && self.sync();
        //				})
        //				.always(function() {
        //					notifyto && clearTimeout(notifyto);
        //					notify && self.notify({type : 'upload', cnt : -cnt, progress : 100*cnt});
        //				}),
        //			xhr         = new XMLHttpRequest(),
        //			formData    = new FormData(),
        //			files       = data.input ? data.input.files : data.files, 
        //			cnt         = files.length,
        //			loaded      = 5,
        //			notify      = false,
        //			startNotify = function() {
        //				return setTimeout(function() {
        //					notify = true;
        //					self.notify({type : 'upload', cnt : cnt, progress : loaded*cnt});
        //				}, self.options.notifyDelay);
        //			},
        //			notifyto;

        //		if (!cnt) {
        //			return dfrd.reject();
        //		}

        //		xhr.addEventListener('error', function() {
        //			dfrd.reject('errConnect');
        //		}, false);

        //		xhr.addEventListener('abort', function() {
        //			dfrd.reject(['errConnect', 'errAbort']);
        //		}, false);

        //		xhr.addEventListener('load', function() {
        //			var status = xhr.status, data;

        //			if (status > 500) {
        //				return dfrd.reject('errResponse');
        //			}
        //			if (status != 200) {
        //				return dfrd.reject('errConnect');
        //			}
        //			if (xhr.readyState != 4) {
        //				return dfrd.reject(['errConnect', 'errTimeout']); // am i right?
        //			}
        //			if (!xhr.responseText) {
        //				return dfrd.reject(['errResponse', 'errDataEmpty']);
        //			}

        //			data = self.parseUploadData(xhr.responseText);
        //			if (data.redurl) {
        //			    if (self.isModal) {
        //			        if (parent.Master && parent.Master.goUrl) {
        //			            parent.Master.goUrl(data.redurl);
        //			        }
        //			    } else {
        //			        window.location.href = data.redurl;
        //			    }
        //			    dfrd.reject();
        //			}else data.error ? dfrd.reject(data.error) : dfrd.resolve(data);
        //		}, false);

        //		xhr.upload.addEventListener('progress', function(e) {
        //			var prev = loaded, curr;

        //			if (e.lengthComputable) {

        //				curr = parseInt(e.loaded*100 / e.total);

        //				// to avoid strange bug in safari (not in chrome) with drag&drop.
        //				// bug: macos finder opened in any folder,
        //				// reset safari cache (option+command+e), reload elfinder page,
        //				// drop file from finder
        //				// on first attempt request starts (progress callback called ones) but never ends.
        //				// any next drop - successfull.
        //				if (curr > 0 && !notifyto) {
        //					notifyto = startNotify();
        //				}

        //				if (curr - prev > 4) {
        //					loaded = curr;
        //					notify && self.notify({type : 'upload', cnt : 0, progress : (loaded - prev)*cnt});
        //				}
        //			}
        //		}, false);


        //		xhr.open('POST', self.uploadURL, true);
        //		formData.append('cmd', 'upload');
        //		//formData.append('notUploadFilesIndex', notUploadFilesIndex);
        //		formData.append(self.newAPI ? 'target' : 'current', self.cwd().hash);
        //		$.each(self.options.customData, function(key, val) {
        //			formData.append(key, val);
        //		});
        //		$.each(self.options.onlyMimes, function(i, mime) {
        //			formData.append('mimes['+i+']', mime);
        //		});

        //		$.each(files, function(i, file) {
        //			formData.append('upload[]', file);
        //		});

        //		xhr.onreadystatechange = function() {
        //			if (xhr.readyState == 4 && xhr.status == 0) {
        //				// ff bug while send zero sized file
        //				// for safari - send directory
        //				dfrd.reject(['errConnect', 'errAbort']);
        //			}
        //		}

        //		xhr.send(formData);

        //		if (!this.UA.Safari || !data.files) {
        //			notifyto = startNotify();
        //		}

        //		return dfrd;
        //	}
        //},
        xhr: function(data, fm, notUploadFilesIndex, dublicateIndexes) {
            var self = fm ? fm : this,
                files = data.input ? data.input.files : data.files,
                cnt = files.length,
                notify = false,
                addWithNewIndex = false,
                startNotify = function() {
                    return setTimeout(function() {
                        notify = true;
                        self.notify({ type: 'upload', cnt: 1 });
                    }, self.options.notifyDelay);
                },
                notifyto;

            if (!cnt) {
                return dfrd.reject();
            }

            for (var i = 0; i < cnt; i++) {
                var dfrd = $.Deferred()
                    .fail(function(error) {
                        error && self.error(error);
                    })
                    .done(function(data) {
                        data.warning && self.error(data.warning);
                        data.removed && self.remove(data);
                        data.added && self.add(data);
                        data.changed && self.change(data);
                        self.trigger('upload', data);
                        data.sync && self.sync();
                    })
                    .always(function() {
                        notifyto && clearTimeout(notifyto);
                        notify && self.notify({ type: 'upload', cnt: -1 });
                    });
                if (dublicateIndexes && $.inArray(i, dublicateIndexes) != -1)
                    addWithNewIndex = true;
                else
                    addWithNewIndex = false;
                if (notUploadFilesIndex && notUploadFilesIndex.length > 0) {
                    if ($.inArray(i.toString(), notUploadFilesIndex) == -1) {
                        this.loadstart(files[i], fm, dfrd, addWithNewIndex);
                        if (!this.UA.Safari || !data.files) {
                            notifyto = startNotify();
                        }
                    }
                } else {
                    this.loadstart(files[i], fm, dfrd, addWithNewIndex);
                    if (!this.UA.Safari || !data.files) {
                        notifyto = startNotify();
                    }
                }
            }
        }
    },

    loadstart: function(file, fm, dfrd, addWithNewIndex) {
        var self = fm ? fm : this,
            xhr = new XMLHttpRequest(),
            formData = new FormData();

        xhr.addEventListener('error', function() {
            dfrd.reject('errConnect');
        }, false);

        xhr.addEventListener('abort', function() {
            dfrd.reject(['errConnect', 'errAbort']);
        }, false);

        xhr.addEventListener('load', function() {
            var status = xhr.status, data;

            if (status > 500) {
                return dfrd.reject('errResponse');
            }
            if (status != 200) {
                return dfrd.reject('errConnect');
            }
            if (xhr.readyState != 4) {
                return dfrd.reject(['errConnect', 'errTimeout']); // am i right?
            }
            if (!xhr.responseText) {
                return dfrd.reject(['errResponse', 'errDataEmpty']);
            }

            data = self.parseUploadData(xhr.responseText);
            if (data.redurl) {
                if (self.isModal) {
                    if (parent.Master && parent.Master.goUrl) {
                        parent.Master.goUrl(data.redurl);
                    }
                } else {
                    window.location.href = data.redurl;
                }
                dfrd.reject();
            } else data.error ? dfrd.reject(data.error) : dfrd.resolve(data);
        }, false);

        xhr.open('POST', self.uploadURL, true);
        formData.append('cmd', 'upload');

        formData.append(self.newAPI ? 'target' : 'current', self.cwd().hash);
        $.each(self.options.customData, function(key, val) {
            formData.append(key, val);
        });
        $.each(self.options.onlyMimes, function(i, mime) {
            formData.append('mimes[' + i + ']', mime);
        });
        formData.append('addWithNewIndex', addWithNewIndex ? addWithNewIndex : false);
        formData.append('upload[]', file);

        xhr.onreadystatechange = function() {
            if (xhr.readyState == 4 && xhr.status == 0) {
                // ff bug while send zero sized file
                // for safari - send directory
                dfrd.reject(['errConnect', 'errAbort']);
            }
        };

        xhr.send(formData);
    },

    /**
	 * Bind callback to event(s) The callback is executed at most once per event.
	 * To bind to multiply events at once, separate events names by space
	 *
	 * @param  String    event name
	 * @param  Function  callback
	 * @return elFinder
	 */
    one: function(event, callback) {
        var self = this,
            h = $.proxy(callback, function(event) {
                setTimeout(function() { self.unbind(event.type, h); }, 3);
                return callback.apply(this, arguments);
            });
        return this.bind(event, h);
    },

    /**
	 * Set/get data into/from localStorage
	 *
	 * @param  String       key
	 * @param  String|void  value
	 * @return String
	 */
    localStorage: function(key, val) {
        var s = window.localStorage;

        key = 'elfinder-' + key + this.id;

        if (val === null) {
            console.log('remove', key);
            return s.removeItem(key);
        }

        if (val !== void (0)) {
            try {
                s.setItem(key, val);
            } catch (e) {
                s.clear();
                s.setItem(key, val);
            }
        }

        return s.getItem(key);
    },

    /**
	 * Get/set cookie
	 *
	 * @param  String       cookie name
	 * @param  String|void  cookie value
	 * @return String
	 */
    cookie: function(name, value) {
        var d, o, c, i;

        name = 'elfinder-' + name + this.id;

        if (value === void (0)) {
            if (document.cookie && document.cookie != '') {
                c = document.cookie.split(';');
                name += '=';
                for (i = 0; i < c.length; i++) {
                    c[i] = $.trim(c[i]);
                    if (c[i].substring(0, name.length) == name) {
                        return decodeURIComponent(c[i].substring(name.length));
                    }
                }
            }
            return '';
        }

        o = $.extend({}, this.options.cookie);
        if (value === null) {
            value = '';
            o.expires = -1;
        }
        if (typeof (o.expires) == 'number') {
            d = new Date();
            d.setTime(d.getTime() + (o.expires * 86400000));
            o.expires = d;
        }
        document.cookie = name + '=' + encodeURIComponent(value) + '; expires=' + o.expires.toUTCString() + (o.path ? '; path=' + o.path : '') + (o.domain ? '; domain=' + o.domain : '') + (o.secure ? '; secure' : '');
        return value;
    },

    /**
	 * Get start directory (by location.hash or last opened directory)
	 * 
	 * @return String
	 */
    startDir: function() {
        var locHash = window.location.hash;
        if (locHash && locHash.match(/^#elf_/)) {
            return locHash.replace(/^#elf_/, '');
        } else {
            return this.lastDir();
        }
    },

    GetReceivedMailId: function() {
        var href = window.location.href;
        var m = href.match('fileGroupSendId=([A-Fa-f0-9-]*)');
        if (m && m.length > 0) {
            return m[1];
        } else return undefined;
    },
    GetModalStatus: function() {
        var href = window.location.href;
        var m = href.match('ismodal');
        if (m && m.length > 0) {
            return 1;
        } else return 0;
    },

    /**
	 * Get/set last opened directory
	 * 
	 * @param  String|undefined  dir hash
	 * @return String
	 */
    lastDir: function(hash) {
        return this.options.rememberLastDir ? this.storage('lastdir', hash) : '';
    },

    /**
	 * Node for escape html entities in texts
	 * 
	 * @type jQuery
	 */
    _node: $('<span/>'),

    /**
	 * Replace not html-safe symbols to html entities
	 * 
	 * @param  String  text to escape
	 * @return String
	 */
    escape: function(name) {
        return this._node.text(name).html();
    },

    /**
	 * Cleanup ajax data.
	 * For old api convert data into new api format
	 * 
	 * @param  String  command name
	 * @param  Object  data from backend
	 * @return Object
	 */
    normalize: function(data) {
        var filter = function(file) {

            if (file && file.hash && file.name && file.mime) {
                if (file.mime == 'application/x-empty') {
                    file.mime = 'text/plain';
                }
                return file;
            }
            return null;
            return file && file.hash && file.name && file.mime ? file : null;
        };


        if (data.files) {
            data.files = $.map(data.files, filter);
        }
        if (data.tree) {
            data.tree = $.map(data.tree, filter);
        }
        if (data.added) {
            data.added = $.map(data.added, filter);
        }
        if (data.changed) {
            data.changed = $.map(data.changed, filter);
        }
        if (data.api) {
            data.init = true;
        }
        return data;
    },

    /**
	 * Update sort options
	 *
	 * @param {String} sort type
	 * @param {String} sort order
	 * @param {Boolean} show folder first
	 */
    setSort: function(type, order, stickFolders) {
        this.storage('sortType', (this.sortType = this.sortRules[type] ? type : 'name'));
        this.storage('sortOrder', (this.sortOrder = /asc|desc/.test(order) ? order : 'asc'));
        this.storage('sortStickFolders', (this.sortStickFolders = !!stickFolders) ? 1 : '');
        this.trigger('sortchange');
    },

    _sortRules: {
        name: function(file1, file2) { return file1.name.toLowerCase().localeCompare(file2.name.toLowerCase()); },
        size: function(file1, file2) {
            var size1 = parseInt(file1.size) || 0,
                size2 = parseInt(file2.size) || 0;

            return size1 == size2 ? 0 : size1 > size2 ? 1 : -1;
            return (parseInt(file1.size) || 0) > (parseInt(file2.size) || 0) ? 1 : -1;
        },
        kind: function(file1, file2) { return file1.mime.localeCompare(file2.mime); },
        date: function(file1, file2) {
            var date1 = file1.ts || file1.date,
                date2 = file2.ts || file2.date;

            return date1 == date2 ? 0 : date1 > date2 ? 1 : -1;
        }
    },

    /**
	 * Compare files based on elFinder.sort
	 *
	 * @param  Object  file
	 * @param  Object  file
	 * @return Number
	 */
    compare: function(file1, file2) {
        var self = this,
            type = self.sortType,
            asc = self.sortOrder == 'asc',
            stick = self.sortStickFolders,
            rules = self.sortRules,
            sort = rules[type],
            d1 = file1.mime == 'directory',
            d2 = file2.mime == 'directory',
            res;

        if (stick) {
            if (d1 && !d2) {
                return -1;
            } else if (!d1 && d2) {
                return 1;
            }
        }

        res = asc ? sort(file1, file2) : sort(file2, file1);

        return type != 'name' && res == 0
            ? res = asc ? rules.name(file1, file2) : rules.name(file2, file1)
            : res;
    },

    /**
	 * Sort files based on config
	 *
	 * @param  Array  files
	 * @return Array
	 */
    sortFiles: function(files) {
        return files.sort(this.compare);
    },

    /**
	 * Open notification dialog 
	 * and append/update message for required notification type.
	 *
	 * @param  Object  options
	 * @example  
	 * this.notify({
	 *    type : 'copy',
	 *    msg : 'Copy files', // not required for known types @see this.notifyType
	 *    cnt : 3,
	 *    hideCnt : false, // true for not show count
	 *    progress : 10 // progress bar percents (use cnt : 0 to update progress bar)
	 * })
	 * @return elFinder
	 */
    notify: function(opts) {

        var type = opts.type,
            msg = this.messages['ntf' + type] ? this.i18n('ntf' + type) : this.i18n('ntfsmth'),
            ndialog = this.ui.notify,
            notify = ndialog.children('.elfinder-notify-' + type),
            ntpl = '<div class="elfinder-notify elfinder-notify-{type}"><span class="elfinder-dialog-icon elfinder-dialog-icon-{type}"/> <div class="elfinder-notify-progressbar"><div class="elfinder-notify-progress"/></div><span class="elfinder-notify-msg">{msg}</span> <span class="elfinder-notify-cnt"/></div>',
            delta = opts.cnt,
            progress = opts.progress >= 0 && opts.progress <= 100 ? opts.progress : 0,
            cnt,
            total,
            prc;

        if (!type || type == 'add') {
            return this;
        }


        if (!notify.length) {
            notify = $(ntpl.replace(/\{type\}/g, type).replace(/\{msg\}/g, msg))
                .appendTo(ndialog)
                .data('cnt', 0);

            if (progress) {
                notify.data({ progress: 0, total: 0 });
            }
        }

        cnt = delta + parseInt(notify.data('cnt'));

        if (cnt > 0) {
            !opts.hideCnt && notify.children('.elfinder-notify-cnt').text('(' + cnt + ')');
            ndialog.is(':hidden') && ndialog.elfindercryptxdialog('open'); // ndialog.elfinderdialog('open');
            notify.data('cnt', cnt);

            if (progress < 100
                && (total = notify.data('total')) >= 0
                && (prc = notify.data('progress')) >= 0) {

                total = delta + parseInt(notify.data('total'));
                prc = progress + prc;
                progress = parseInt(prc / total);
                notify.data({ progress: prc, total: total });

                ndialog.find('.elfinder-notify-progress')
                    .animate({
                        width: (progress < 100 ? progress : 100) + '%'
                    }, 20);
            }

        } else {
            notify.remove();
            !ndialog.children().length && ndialog.elfindercryptxdialog('close'); //ndialog.elfinderdialog('close');
        }

        return this;
    },

    /**
	 * Open confirmation dialog 
	 *
	 * @param  Object  options
	 * @example  
	 * this.confirm({
	 *    title : 'Remove files',
	 *    text  : 'Here is question text',
	 *    accept : {  // accept callback - required
	 *      label : 'Continue',
	 *      callback : function(applyToAll) { fm.log('Ok') }
	 *    },
	 *    cancel : { // cancel callback - required
	 *      label : 'Cancel',
	 *      callback : function() { fm.log('Cancel')}
	 *    },
	 *    reject : { // reject callback - optionally
	 *      label : 'No',
	 *      callback : function(applyToAll) { fm.log('No')}
	 *   },
	 *   all : true  // display checkbox "Apply to all"
	 * })
	 * @return elFinder
	 */
    confirm: function(opts) {
        var complete = false,
            options = {
                cssClass: 'elfinder-dialog-confirm',
                modal: true,
                resizable: false,
                title: this.i18n(opts.title || 'confirmReq'),
                buttons: {},
                close: function() {
                    !complete && opts.cancel.callback();
                    //$(this).elfinderdialog('destroy');
                    $(this).elfindercryptxdialog('destroy');
                }
            },
            apply = this.i18n('apllyAll'),
            label,
            checkbox;


        if (opts.reject) {
            options.buttons[this.i18n(opts.reject.label)] = function() {
                var chb = $(this).find('input[type=checkbox]');
                var all = false;
                if (chb && chb.prop('checked')) all = true;
                opts.reject.callback(!!(all));
                complete = true;
                //$(this).elfinderdialog('close');
                $(this).elfindercryptxdialog('close');
            };
        }

        options.buttons[this.i18n(opts.accept.label)] = function() {
            var chb = $(this).find('input[type=checkbox]');
            var all = false;
            if (chb && chb.prop('checked')) all = true;
            opts.accept.callback(!!(all));
            complete = true;
            //$(this).elfinderdialog('close')
            $(this).elfindercryptxdialog('close');
        };

        options.buttons[this.i18n(opts.cancel.label)] = function() {
            //$(this).elfinderdialog('close')
            $(this).elfindercryptxdialog('close');
        };

        if (opts.all) {
            if (opts.reject) {
                options.width = 370;
            }
            options.create = function() {
                //checkbox = $('<input type="checkbox" />');
                //$(this).next().children().before($('<label>'+apply+'</label>').prepend(checkbox));
                var checkboxforblock = $('<span class="button-checkbox bootstrap-checkbox">' +
                    '<input type="checkbox" autocomplete="off" style="display: none;">' +
                    '<span class="icon cb-icon-check square" style="display: none;"></span>' +
                    '<span class="icon cb-icon-check-empty square"></span>' +
                    '</span>').bind('hover', function() { $(this).toggleClass('ui-state-hover'); });;

                checkboxforblock.find('input[type=checkbox]')
                    .bind('change', function() {
                        var pr = $(this).parent();
                        var chbox = $(this);
                        if (chbox.is(':checked')) {
                            pr.find('.cb-icon-check').hide();
                            pr.find('.cb-icon-check-empty').show();
                            chbox.prop("checked", false);
                        } else {
                            pr.find('.cb-icon-check').show();
                            pr.find('.cb-icon-check-empty').hide();
                            chbox.prop("checked", true);
                        }
                    });
                var div = $('<div style="cursor:pointer; margin: -13px 0 15px 75px">' + apply + '</div>').click(function() {
                    var chb = $(this).find('input[type=checkbox]');
                    chb.change();
                }).prepend(checkboxforblock);

                $(this).after($('<div/>').append(div));
            }; //options.open = function() {
            //	var pane = $(this).next(),
            //		width = parseInt(pane.children(':first').outerWidth() + pane.children(':last').outerWidth());

            //	if (width > parseInt(pane.width())) {
            //		$(this).closest('.elfinder-dialog').width(width+30);
            //	}
            //}
        }

        //return this.dialog('<span class="elfinder-dialog-icon elfinder-dialog-icon-confirm"/>' + this.i18n(opts.text), options);
        return this.dialog('<div class="warning"><span>' + this.i18n(opts.text) + '</span></div></div>', options);
    },

    /**
	 * Create unique file name in required dir
	 * 
	 * @param  String  file name
	 * @param  String  parent dir hash
	 * @return String
	 */
    uniqueName: function(prefix, phash) {
        var i = 0, ext = '', p, name;

        prefix = this.i18n(prefix);
        phash = phash || this.cwd().hash;

        if ((p = prefix.indexOf('.txt')) != -1) {
            ext = '.txt';
            prefix = prefix.substr(0, p);
        }

        name = prefix + ext;

        if (!this.fileByName(name, phash)) {
            return name;
        }
        while (i < 10000) {
            name = prefix + ' ' + (++i) + ext;
            if (!this.fileByName(name, phash)) {
                return name;
            }
        }
        return prefix + Math.random() + ext;
    },

    /**
	 * Return message translated onto current language
	 *
	 * @param  String|Array  message[s]
	 * @return String
	 **/
    i18n: function() {
        var self = this,
            messages = this.messages,
            input = [],
            ignore = [],
            message = function(m) {
                var file;
                if (m.indexOf('#') === 0) {
                    if ((file = self.file(m.substr(1)))) {
                        return file.name;
                    }
                }
                return m;
            },
            i,
            j,
            m;

        for (i = 0; i < arguments.length; i++) {
            m = arguments[i];

            if (typeof m == 'string') {
                input.push(message(m));
            } else if ($.isArray(m)) {
                for (j = 0; j < m.length; j++) {
                    if (typeof m[j] == 'string') {
                        input.push(message(m[j]));
                    }
                }
            }
        }

        for (i = 0; i < input.length; i++) {
            // dont translate placeholders
            if ($.inArray(i, ignore) !== -1) {
                continue;
            }
            m = input[i];
            // translate message
            m = messages[m] || m;
            // replace placeholders in message
            m = m.replace(/\$(\d+)/g, function(match, placeholder) {
                placeholder = i + parseInt(placeholder);
                if (placeholder > 0 && input[placeholder]) {
                    ignore.push(placeholder);
                }
                return input[placeholder] || '';
            });

            input[i] = m;
        }

        return $.map(input, function(m, i) { return $.inArray(i, ignore) === -1 ? m : null; }).join('<br>');
    },

    /**
	 * Convert mimetype into css classes
	 * 
	 * @param  String  file mimetype
	 * @return String
	 */
    mime2class: function(mime) {
        var prefix = 'elfinder-cwd-icon-';

        mime = mime.split('/');

        return prefix + mime[0] + (mime[0] != 'image' && mime[1] ? ' ' + prefix + mime[1].replace(/(\.|\+)/g, '-') : '');
    },

    /**
	 * Return localized kind of file
	 * 
	 * @param  Object|String  file or file mimetype
	 * @return String
	 */
    mime2kind: function(f) {
        var mime = typeof (f) == 'object' ? f.mime : f, kind;

        if (f.alias) {
            kind = 'Alias';
        } else if (this.kinds[mime]) {
            kind = this.kinds[mime];
        } else {
            if (mime.indexOf('text') === 0) {
                kind = 'Text';
            } else if (mime.indexOf('image') === 0) {
                kind = 'Image';
            } else if (mime.indexOf('audio') === 0) {
                kind = 'Audio';
            } else if (mime.indexOf('video') === 0) {
                kind = 'Video';
            } else if (mime.indexOf('application') === 0) {
                kind = 'App';
            } else {
                kind = mime;
            }
        }

        return this.messages['kind' + kind] ? this.i18n('kind' + kind) : mime;
    },

    /**
	 * Return localized date
	 * 
	 * @param  Object  file object
	 * @return String
	 */
    formatDate: function(file, ts) {
        var self = this,
            ts = ts || file.ts,
            i18 = self.i18,
            date,
            format,
            output,
            d,
            dw,
            m,
            y,
            h,
            g,
            i,
            s;

        if (self.options.clientFormatDate && ts > 0) {

            date = new Date(ts * 1000);

            h = date[self.getHours]();
            g = h > 12 ? h - 12 : h;
            i = date[self.getMinutes]();
            s = date[self.getSeconds]();
            d = date[self.getDate]();
            dw = date[self.getDay]();
            m = date[self.getMonth]() + 1;
            y = date[self.getFullYear]();

            //format = ts >= this.yesterday 
            //	? this.fancyFormat 
            //	: this.dateFormat;
            format = this.dateFormat;

            output = format.replace(/[a-z]/gi, function(val) {
                switch (val) {
                case 'd':
                    return d > 9 ? d : '0' + d;
                case 'j':
                    return d;
                case 'D':
                    return self.i18n(i18.daysShort[dw]);
                case 'l':
                    return self.i18n(i18.days[dw]);
                case 'm':
                    return m > 9 ? m : '0' + m;
                case 'n':
                    return m;
                case 'M':
                    return self.i18n(i18.monthsShort[m - 1]);
                case 'F':
                    return self.i18n(i18.months[m - 1]);
                case 'Y':
                    return y;
                case 'y':
                    return ('' + y).substr(2);
                case 'H':
                    return h > 9 ? h : '0' + h;
                case 'G':
                    return h;
                case 'g':
                    return g;
                case 'h':
                    return g > 9 ? g : '0' + g;
                case 'a':
                    return h > 12 ? 'pm' : 'am';
                case 'A':
                    return h > 12 ? 'PM' : 'AM';
                case 'i':
                    return i > 9 ? i : '0' + i;
                case 's':
                    return s > 9 ? s : '0' + s;
                }
                return val;
            });

            //return ts >= this.yesterday
            //	? output.replace('$1', this.i18n(ts >= this.today ? 'Today' : 'Yesterday'))
            //	: output;
            return output;

        } else if (file.date) {
            return file.date.replace(/([a-z]+)\s/i, function(a1, a2) { return self.i18n(a2) + ' '; });
        }

        return self.i18n('dateUnknown');
    },

    /**
	 * Return css class marks file permissions
	 * 
	 * @param  Object  file 
	 * @return String
	 */
    perms2class: function(o) {
        var c = '';

        if (!o.read && !o.write) {
            c = 'elfinder-na';
        } else if (!o.read) {
            c = 'elfinder-wo';
        } else if (!o.write) {
            c = 'elfinder-ro';
        }
        return c;
    },

    /**
	 * Return localized string with file permissions
	 * 
	 * @param  Object  file
	 * @return String
	 */
    formatPermissions: function(f) {
        var p = [];

        f.read && p.push(this.i18n('read'));
        f.write && p.push(this.i18n('write'));

        return p.length ? p.join(' ' + this.i18n('and') + ' ') : this.i18n('noaccess');
    },

    /**
	 * Return formated file size
	 * 
	 * @param  Number  file size
	 * @return String
	 */
    formatSize: function(s) {
        var n = 1, u = 'byte';

        if (s == 'unknown') {
            return this.i18n('unknown');
        }

        if (s > 1073741824) {
            n = 1073741824;
            u = 'GB';
        } else if (s > 1048576) {
            n = 1048576;
            u = 'MB';
        } else if (s > 1024) {
            n = 1024;
            u = 'KB';
        }
        s = s / n;
        return (s > 0 ? n >= 1048576 ? s.toFixed(2) : Math.round(s) : 0) + ' ' + u;
    },


    navHash2Id: function(hash) {
        return 'nav-' + hash;
    },

    navId2Hash: function(id) {
        return typeof (id) == 'string' ? id.substr(4) : false;
    },

    log: function(m) {
        window.console && window.console.log && window.console.log(m);
        return this;
    },

    debug: function(type, m) {
        var d = this.options.debug;

        if (d == 'all' || d === true || ($.isArray(d) && $.inArray(type, d) != -1)) {
            window.console && window.console.log && window.console.log('elfinder debug: [' + type + '] [' + this.id + ']', m);
        }
        return this;
    },
    time: function(l) { window.console && window.console.time && window.console.time(l); },
    timeEnd: function(l) { window.console && window.console.timeEnd && window.console.timeEnd(l); }


};
/**
 * Application version
 *
 * @type String
 **/
elFinder.prototype.version = '2.0.2';
$.fn.elfinder = function(o) {

    if (o == 'instance') {
        return this.getElFinder();
    }

    return this.each(function() {

        var cmd = typeof(o) == 'string' ? o : '';
        if (!this.elfinder) {
            new elFinder(this, typeof(o) == 'object' ? o : {});
        }

        switch (cmd) {
        case 'close':
        case 'hide':
            this.elfinder.hide();
            break;

        case 'open':
        case 'show':
            this.elfinder.show();
            break;

        case'destroy':
            this.elfinder.destroy();
            break;
        }

    });
};
$.fn.getElFinder = function() {
    var instance;

    this.each(function() {
        if (this.elfinder) {
            instance = this.elfinder;
            return false;
        }
    });

    return instance;
};
"use strict"; /**
 * elFinder resources registry.
 * Store shared data
 *
 * @type Object
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.resources = {
    'class': {
        hover: 'ui-state-hover',
        active: 'ui-state-active',
        disabled: 'ui-state-disabled',
        draggable: 'ui-draggable',
        droppable: 'ui-droppable',
        adroppable: 'elfinder-droppable-active',
        cwdfile: 'elfinder-cwd-file',
        cwd: 'elfinder-cwd',
        tree: 'elfinder-tree',
        treeroot: 'elfinder-navbar-root',
        navdir: 'elfinder-navbar-dir',
        navdirwrap: 'elfinder-navbar-dir-wrapper',
        navarrow: 'elfinder-navbar-arrow',
        navsubtree: 'elfinder-navbar-subtree',
        navcollapse: 'elfinder-navbar-collapsed',
        navexpand: 'elfinder-navbar-expanded',
        treedir: 'elfinder-tree-dir',
        placedir: 'elfinder-place-dir',
        searchbtn: 'elfinder-button-search'
    },
    tpl: {
        perms: '<span class="elfinder-perms"/>',
        symlink: '<span class="elfinder-symlink"/>',
        navicon: '<span class="elfinder-nav-icon"/>',
        navspinner: '<span class="elfinder-navbar-spinner"/>',
        navdir: '<div class="elfinder-navbar-wrapper"><span id="{id}" title="{name}" class="ui-corner-all elfinder-navbar-dir {cssclass}"><span class="elfinder-navbar-arrow"/><span class="elfinder-navbar-icon"/>{symlink}{permissions}{name}</span><div class="elfinder-navbar-subtree"/></div>'

    },

    mimes: {
        text: [
            'application/x-empty',
            'application/javascript',
            'application/xhtml+xml',
            'audio/x-mp3-playlist',
            'application/x-web-config',
            'application/docbook+xml',
            'application/x-php',
            'application/x-perl',
            'application/x-awk',
            'application/x-config',
            'application/x-csh',
            'application/xml'
        ]
    },

    mixin: {
        make: function() {
            var fm = this.fm,
                cmd = this.name,
                cwd = fm.getUI('cwd'),
                dfrd = $.Deferred()
                    .fail(function(error) {
                        cwd.trigger('unselectall');
                        error && fm.error(error);
                    })
                    .always(function() {
                        input.remove();
                        node.remove();
                        fm.enable();
                    }),
                id = 'tmp_' + parseInt(Math.random() * 100000),
                phash = fm.cwd().hash,
                date = new Date(),
                file = {
                    hash: id,
                    name: fm.uniqueName(this.prefix),
                    mime: this.mime,
                    read: true,
                    write: true,
                    date: 'Today ' + date.getHours() + ':' + date.getMinutes()
                },
                node = cwd.trigger('create.' + fm.namespace, file).find('#' + id),
                input = $('<input type="text"/>')
                    .keydown(function(e) {
                        e.stopImmediatePropagation();

                        if (e.keyCode == $.ui.keyCode.ESCAPE) {
                            dfrd.reject();
                        } else if (e.keyCode == $.ui.keyCode.ENTER) {
                            input.blur();
                        }
                    })
                    .mousedown(function(e) {
                        e.stopPropagation();
                    })
                    .blur(function() {
                        var name = $.trim(input.val()),
                            parent = input.parent();

                        if (parent.length) {

                            if (!name) {
                                return dfrd.reject('errInvNameCr' + (file.mime == "directory" ? 'Dir' : ''));
                            }
                            if (name.match("[\/|\\|\:|\*|\"|\<|\>|\#|\|\$]")) {
                                return dfrd.reject('errInvSym' + (file.mime == "directory" ? 'Dir' : ''));
                            }
                            if (name.length > 100) {
                                return dfrd.reject('errInvNameSize' + (file.mime == "directory" ? 'Dir' : ''));
                            }

                            if (fm.fileByName(name, phash)) {
                                return dfrd.reject(['errExists', name]);
                            }
                            if (file.mime != "directory") {
                                var extNew = fm.getExtension(name);
                                var extOld = fm.getExtension(file.name);
                                if (!extNew) {
                                    return dfrd.reject('errInvNameCr');
                                }
                                var nameWitoutext = name.split('.')[0];
                                if (nameWitoutext == "") {
                                    return dfrd.reject('errInvNameCr');
                                }
                            }

                            parent.html(fm.escape(name));

                            fm.lockfiles({ files: [id] });

                            fm.request({
                                    data: { cmd: cmd, name: name, target: phash },
                                    notify: { type: cmd, cnt: 1 },
                                    preventFail: true,
                                    syncOnFail: true
                                })
                                .fail(function(error) {
                                    dfrd.reject(error);
                                })
                                .done(function(data) {
                                    dfrd.resolve(data);
                                });
                        }
                    });


            if (this.disabled() || !node.length) {
                return dfrd.reject();
            }

            fm.disable();
            node.find('.elfinder-cwd-filename').empty('').append(input.val(file.name));
            input.select().focus();
            input[0].setSelectionRange && input[0].setSelectionRange(0, file.name.replace(/\..+$/, '').length);

            return dfrd;


        }

    }
};
/**
 * Default elFinder config
 *
 * @type  Object
 * @autor Dmitry (dio) Levashov
 */
elFinder.prototype._options = {
    /**
	 * Connector url. Required!
	 *
	 * @type String
	 */
    url: '',

    /**
	 * Ajax request type.
	 *
	 * @type String
	 * @default "get"
	 */
    requestType: 'get',

    /**
	 * Transport to send request to backend.
	 * Required for future extensions using websockets/webdav etc.
	 * Must be an object with "send" method.
	 * transport.send must return $.Deferred() object
	 *
	 * @type Object
	 * @default null
	 * @example
	 *  transport : {
	 *    init : function(elfinderInstance) { },
	 *    send : function(options) {
	 *      var dfrd = $.Deferred();
	 *      // connect to backend ...
	 *      return dfrd;
	 *    },
	 *    upload : function(data) {
	 *      var dfrd = $.Deferred();
	 *      // upload ...
	 *      return dfrd;
	 *    }
	 *    
	 *  }
	 **/
    transport: {},

    /**
	 * URL to upload file to.
	 * If not set - connector URL will be used
	 *
	 * @type String
	 * @default  ''
	 */
    urlUpload: '',

    /**
	 * Allow to drag and drop to upload files
	 *
	 * @type Boolean|String
	 * @default  'auto'
	 */
    dragUploadAllow: 'auto',

    /**
	 * Timeout for upload using iframe
	 *
	 * @type Number
	 * @default  0 - no timeout
	 */
    iframeTimeout: 0,

    /**
	 * Data to append to all requests and to upload files
	 *
	 * @type Object
	 * @default  {}
	 */
    customData: {},

    /**
	 * Event listeners to bind on elFinder init
	 *
	 * @type Object
	 * @default  {}
	 */
    handlers: {},

    /**
	 * Interface language
	 *
	 * @type String
	 * @default "en"
	 */
    lang: 'en',

    /**
	 * Additional css class for filemanager node.
	 *
	 * @type String
	 */
    cssClass: '',

    /**
	 * Active commands list
	 * If some required commands will be missed here, elFinder will add its
	 *
	 * @type Array
	 */
    commands: [
        'open', 'reload', 'home', 'up', 'back', 'forward', 'getfile', 'quicklook',
        'download', 'rm', 'duplicate', 'rename', 'mkdir', 'mkfile', 'upload', 'copy',
        'cut', 'paste', 'edit', 'extract', 'archive', 'search', 'info', 'view', 'help', 'resize', 'sort', 'netmount'
    ],

    /**
	 * Commands options.
	 *
	 * @type Object
	 **/
    commandsOptions: {
        // "getfile" command options.
        getfile: {
            onlyURL: false,
            // allow to return multiple files info
            multiple: false,
            // allow to return filers info
            folders: false,
            // action after callback (""/"close"/"destroy")
            oncomplete: ''
        },
        // "upload" command options.
        upload: {
            ui: 'uploadbutton'
        },
        // "quicklook" command options.
        quicklook: {
            autoplay: true,
            jplayer: 'extensions/jplayer'
        },
        // "quicklook" command options.
        edit: {
            // list of allowed mimetypes to edit
            // if empty - any text files can be edited
            mimes: [],
            // edit files in wysisyg's
            editors: [
                // {
                // 	/**
                // 	 * files mimetypes allowed to edit in current wysisyg
                // 	 * @type  Array
                // 	 */
                // 	mimes : ['text/html'], 
                // 	/**
                // 	 * Called when "edit" dialog loaded.
                // 	 * Place to init wysisyg.
                // 	 * Can return wysisyg instance
                // 	 *
                // 	 * @param  DOMElement  textarea node
                // 	 * @return Object
                // 	 */
                // 	load : function(textarea) { },
                // 	/**
                // 	 * Called before "edit" dialog closed.
                // 	 * Place to destroy wysisyg instance.
                // 	 *
                // 	 * @param  DOMElement  textarea node
                // 	 * @param  Object      wysisyg instance (if was returned by "load" callback)
                // 	 * @return void
                // 	 */
                // 	close : function(textarea, instance) { },
                // 	/**
                // 	 * Called before file content send to backend.
                // 	 * Place to update textarea content if needed.
                // 	 *
                // 	 * @param  DOMElement  textarea node
                // 	 * @param  Object      wysisyg instance (if was returned by "load" callback)
                // 	 * @return void
                // 	 */
                // 	save : function(textarea, editor) {}
                // 
                // }
            ]
        },
        // "info" command options.
        info: { nullUrlDirLinkSelf: true },


        help: { view: ['about', 'shortcuts', 'help'] }
    },

    /**
	 * Callback for "getfile" commands.
	 * Required to use elFinder with WYSIWYG editors etc..
	 *
	 * @type Function
	 * @default null (command not active)
	 */
    getFileCallback: null,

    /**
	 * Default directory view. icons/list
	 *
	 * @type String
	 * @default "icons"
	 */
    defaultView: 'icons',

    /**
	 * UI plugins to load.
	 * Current dir ui and dialogs loads always.
	 * Here set not required plugins as folders tree/toolbar/statusbar etc.
	 *
	 * @type Array
	 * @default ['toolbar', 'tree', 'path', 'stat']
	 * @full ['toolbar', 'places', 'tree', 'path', 'stat']
	 */
    ui: ['toolbar', 'tree', 'path', 'stat'],

    /**
	 * Some UI plugins options.
	 * @type Object
	 */
    uiOptions: {
        // toolbar configuration
        toolbar: [
            ['back', 'forward'],
            ['netmount'],
            // ['reload'],
            // ['home', 'up'],
            ['mkdir', 'mkfile', 'upload'],
            ['open', 'download', 'getfile'],
            ['info'],
            ['quicklook'],
            ['copy', 'cut', 'paste'],
            ['rm'],
            ['duplicate', 'rename', 'edit', 'resize'],
            ['extract', 'archive'],
            ['search'],
            ['view', 'sort'],
            ['help']
        ],
        // directories tree options
        tree: {
            // expand current root on init
            openRootOnLoad: true,
            // auto load current dir parents
            syncTree: true
        },
        // navbar options
        navbar: {
            minWidth: 150,
            maxWidth: 500
        },
        cwd: {
            // display parent folder with ".." name :)
            oldSchool: false
        }
    },

    /**
	 * Display only required files by types
	 *
	 * @type Array
	 * @default []
	 * @example
	 *  onlyMimes : ["image"] - display all images
	 *  onlyMimes : ["image/png", "application/x-shockwave-flash"] - display png and flash
	 */
    onlyMimes: [],

    /**
	 * Custom files sort rules.
	 * All default rules (name/size/kind/date) set in elFinder._sortRules
	 *
	 * @type {Object}
	 * @example
	 * sortRules : {
	 *   name : function(file1, file2) { return file1.name.toLowerCase().localeCompare(file2.name.toLowerCase()); }
	 * }
	 */
    sortRules: {},

    /**
	 * Default sort type.
	 *
	 * @type {String}
	 */
    sortType: 'name',

    /**
	 * Default sort order.
	 *
	 * @type {String}
	 * @default "asc"
	 */
    sortOrder: 'asc',

    /**
	 * Display folders first?
	 *
	 * @type {Boolean}
	 * @default true
	 */
    sortStickFolders: true,

    /**
	 * If true - elFinder will formating dates itself, 
	 * otherwise - backend date will be used.
	 *
	 * @type Boolean
	 */
    clientFormatDate: true,

    /**
	 * Show UTC dates.
	 * Required set clientFormatDate to true
	 *
	 * @type Boolean
	 */
    UTCDate: false,

    /**
	 * File modification datetime format.
	 * Value from selected language data  is used by default.
	 * Set format here to overwrite it.
	 *
	 * @type String
	 * @default  ""
	 */
    dateFormat: '',

    /**
	 * File modification datetime format in form "Yesterday 12:23:01".
	 * Value from selected language data is used by default.
	 * Set format here to overwrite it.
	 * Use $1 for "Today"/"Yesterday" placeholder
	 *
	 * @type String
	 * @default  ""
	 * @example "$1 H:m:i"
	 */
    fancyDateFormat: '',

    /**
	 * elFinder width
	 *
	 * @type String|Number
	 * @default  "auto"
	 */
    width: 'auto',

    /**
	 * elFinder height
	 *
	 * @type Number
	 * @default  "auto"
	 */
    height: 400,

    /**
	 * Make elFinder resizable if jquery ui resizable available
	 *
	 * @type Boolean
	 * @default  true
	 */
    resizable: true,

    /**
	 * Timeout before open notifications dialogs
	 *
	 * @type Number
	 * @default  500 (.5 sec)
	 */
    notifyDelay: 500,

    /**
	 * Allow shortcuts
	 *
	 * @type Boolean
	 * @default  true
	 */
    allowShortcuts: true,

    /**
	 * Remeber last opened dir to open it after reload or in next session
	 *
	 * @type Boolean
	 * @default  true
	 */
    rememberLastDir: true,

    /**
	 * Use browser native history with supported browsers
	 *
	 * @type Boolean
	 * @default  true
	 */
    useBrowserHistory: true,

    /**
	 * Lazy load config.
	 * How many files display at once?
	 *
	 * @type Number
	 * @default  50
	 */
    showFiles: 30,

    /**
	 * Lazy load config.
	 * Distance in px to cwd bottom edge to start display files
	 *
	 * @type Number
	 * @default  50
	 */
    showThreshold: 50,

    /**
	 * Additional rule to valid new file name.
	 * By default not allowed empty names or '..'
	 *
	 * @type false|RegExp|function
	 * @default  false
	 * @example
	 *  disable names with spaces:
	 *  validName : /^[^\s]$/
	 */
    validName: false,

    /**
	 * Sync content interval
	 * @type Number
	 * @default  0 (do not sync)
	 */
    sync: 0,

    /**
	 * How many thumbnails create in one request
	 *
	 * @type Number
	 * @default  5
	 */
    loadTmbs: 5,

    /**
	 * Cookie option for browsersdoes not suppot localStorage
	 *
	 * @type Object
	 */
    cookie: {
        expires: 30,
        domain: '',
        path: '/',
        secure: false
    },

    /**
	 * Contextmenu config
	 *
	 * @type Object
	 */
    contextmenu: {
        // navbarfolder menu
        navbar: ['open', '|', 'copy', 'cut', 'paste', 'duplicate', '|', 'rm', '|', 'info'],
        // current directory menu
        cwd: ['reload', 'back', '|', 'upload', 'mkdir', 'mkfile', 'paste', '|', 'sort', '|', 'info'],
        // current directory file menu
        files: ['getfile', '|', 'open', 'quicklook', '|', 'download', '|', 'copy', 'cut', 'paste', 'duplicate', '|', 'rm', '|', 'edit', 'rename', 'resize', '|', 'archive', 'extract', '|', 'info']
    },

    /**
	 * Debug config
	 *
	 * @type Array|Boolean
	 */
    // debug : true
    debug: ['error', 'warning', 'event-destroy']
}
/**
 * @class elFinder.history
 * Store visited folders
 * and provide "back" and "forward" methods
 *
 * @author Dmitry (dio) Levashov
 */
elFinder.prototype.history = function(fm) {
    var self = this,
        /**
		 * Update history on "open" event?
		 *
		 * @type Boolean
		 */
        update = true,
        /**
		 * Directories hashes storage
		 *
		 * @type Array
		 */
        history = [],
        /**
		 * Current directory index in history
		 *
		 * @type Number
		 */
        current,
        /**
		 * Clear history
		 *
		 * @return void
		 */
        reset = function() {
            history = [fm.cwd().hash];
            current = 0;
            update = true;
        },
        /**
		 * Browser native history object
		 */
        nativeHistory = (fm.options.useBrowserHistory && window.history && window.history.pushState) ? window.history : null,
        /**
		 * Open prev/next folder
		 *
		 * @Boolen  open next folder?
		 * @return jQuery.Deferred
		 */
        go = function(fwd) {
            if ((fwd && self.canForward()) || (!fwd && self.canBack())) {
                update = false;
                return fm.exec('open', history[fwd ? ++current : --current]).fail(reset);
            }
            return $.Deferred().reject();
        };

    /**
	 * Return true if there is previous visited directories
	 *
	 * @return Boolen
	 */
    this.canBack = function() {
        return current > 0;
    }; /**
	 * Return true if can go forward
	 *
	 * @return Boolen
	 */
    this.canForward = function() {
        return current < history.length - 1;
    }; /**
	 * Go back
	 *
	 * @return void
	 */
    this.back = go;

    /**
	 * Go forward
	 *
	 * @return void
	 */
    this.forward = function() {
        return go(true);
    }; // bind to elfinder events
    fm.open(function(e) {
            var l = history.length,
                cwd = fm.cwd().hash;

            if (update) {
                current >= 0 && l > current + 1 && history.splice(current + 1);
                history[history.length - 1] != cwd && history.push(cwd);
                current = history.length - 1;
            }
            update = true;

            if (nativeHistory) {
                if (! nativeHistory.state) {
                    nativeHistory.replaceState({ thash: cwd }, null, location.pathname + location.search + '#elf_' + cwd);
                } else {
                    nativeHistory.state.thash != cwd && nativeHistory.pushState({ thash: cwd }, null, location.pathname + location.search + '#elf_' + cwd);
                }
            }
        })
        .reload(reset);

}
/**
 * elFinder command prototype
 *
 * @type  elFinder.command
 * @author  Dmitry (dio) Levashov
 */
elFinder.prototype.command = function(fm) {

    /**
	 * elFinder instance
	 *
	 * @type  elFinder
	 */
    this.fm = fm;

    /**
	 * Command name, same as class name
	 *
	 * @type  String
	 */
    this.name = '';

    /**
	 * Short command description
	 *
	 * @type  String
	 */
    this.title = '';

    /**
	 * Current command state
	 *
	 * @example
	 * this.state = -1; // command disabled
	 * this.state = 0;  // command enabled
	 * this.state = 1;  // command active (for example "fullscreen" command while elfinder in fullscreen mode)
	 * @default -1
	 * @type  Number
	 */
    this.state = -1;

    /**
	 * If true, command can not be disabled by connector.
	 * @see this.update()
	 *
	 * @type  Boolen
	 */
    this.alwaysEnabled = false;

    /**
	 * If true, this means command was disabled by connector.
	 * @see this.update()
	 *
	 * @type  Boolen
	 */
    this._disabled = false;

    this.disableOnSearch = false;

    this.updateOnSelect = true;

    /**
	 * elFinder events defaults handlers.
	 * Inside handlers "this" is current command object
	 *
	 * @type  Object
	 */
    this._handlers = {
        enable: function() { this.update(void(0), this.value); },
        disable: function() { this.update(-1, this.value); },
        'open reload load': function(e) {
            this._disabled = !(this.alwaysEnabled || this.fm.isCommandEnabled(this.name));
            this.update(void(0), this.value);
            this.change();
        }
    };

    /**
	 * elFinder events handlers.
	 * Inside handlers "this" is current command object
	 *
	 * @type  Object
	 */
    this.handlers = {}; /**
	 * Shortcuts
	 *
	 * @type  Array
	 */
    this.shortcuts = [];

    /**
	 * Command options
	 *
	 * @type  Object
	 */
    this.options = { ui: 'button' };

    /**
	 * Prepare object -
	 * bind events and shortcuts
	 *
	 * @return void
	 */
    this.setup = function(name, opts) {
        var self = this,
            fm = this.fm,
            i,
            s;

        this.name = name;
        this.title = fm.messages['cmd' + name] ? fm.i18n('cmd' + name) : name,
            this.options = $.extend({}, this.options, opts);
        this.listeners = [];

        if (this.updateOnSelect) {
            this._handlers.select = function() { this.update(void(0), this.value); };
        }

        $.each($.extend({}, self._handlers, self.handlers), function(cmd, handler) {
            fm.bind(cmd, $.proxy(handler, self));
        });

        for (i = 0; i < this.shortcuts.length; i++) {
            s = this.shortcuts[i];
            s.callback = $.proxy(s.callback || function() { this.exec(); }, this);
            !s.description && (s.description = this.title);
            fm.shortcut(s);
        }

        if (this.disableOnSearch) {
            fm.bind('search searchend', function(e) {
                self._disabled = e.type == 'search';
                self.update(void(0), self.value);
            });
        }

        this.init();
    }; /**
	 * Command specific init stuffs
	 *
	 * @return void
	 */
    this.init = function() {}; /**
	 * Exec command
	 *
	 * @param  Array         target files hashes
	 * @param  Array|Object  command value
	 * @return $.Deferred
	 */
    this.exec = function(files, opts) {
        return $.Deferred().reject();
    }; /**
	 * Return true if command disabled.
	 *
	 * @return Boolen
	 */
    this.disabled = function() {
        return this.state < 0;
    }; /**
	 * Return true if command enabled.
	 *
	 * @return Boolen
	 */
    this.enabled = function() {
        return this.state > -1;
    }; /**
	 * Return true if command active.
	 *
	 * @return Boolen
	 */
    this.active = function() {
        return this.state > 0;
    }; /**
	 * Return current command state.
	 * Must be overloaded in most commands
	 *
	 * @return Number
	 */
    this.getstate = function() {
        return -1;
    }; /**
	 * Update command state/value
	 * and rize 'change' event if smth changed
	 *
	 * @param  Number  new state or undefined to auto update state
	 * @param  mixed   new value
	 * @return void
	 */
    this.update = function(s, v) {
        var state = this.state,
            value = this.value;

        if (this._disabled) {
            this.state = -1;
        } else {
            this.state = s !== void(0) ? s : this.getstate();
        }

        this.value = v;

        if (state != this.state || value != this.value) {
            this.change();
        }
    }; /**
	 * Bind handler / fire 'change' event.
	 *
	 * @param  Function|undefined  event callback
	 * @return void
	 */
    this.change = function(c) {
        var cmd, i;

        if (typeof(c) === 'function') {
            this.listeners.push(c);
        } else {
            for (i = 0; i < this.listeners.length; i++) {
                cmd = this.listeners[i];
                try {
                    cmd(this.state, this.value);
                } catch (e) {
                    this.fm.debug('error', e);
                }
            }
        }
        return this;
    }; /**
	 * With argument check given files hashes and return list of existed files hashes.
	 * Without argument return selected files hashes.
	 *
	 * @param  Array|String|void  hashes
	 * @return Array
	 */
    this.hashes = function(hashes) {
        return hashes
            ? $.map($.isArray(hashes) ? hashes : [hashes], function(hash) { return fm.file(hash) ? hash : null; })
            : fm.selected();
    }; /**
	 * Return only existed files from given fils hashes | selected files
	 *
	 * @param  Array|String|void  hashes
	 * @return Array
	 */
    this.files = function(hashes) {
        var fm = this.fm;

        return hashes
            ? $.map($.isArray(hashes) ? hashes : [hashes], function(hash) { return fm.file(hash) || null; })
            : fm.selectedFiles();
    };
}
/**
 * Russian translation
 * @author Dmitry "dio" Levashov <dio@std42.ru>
 * @version 2011-07-15
 */
if (elFinder && elFinder.prototype && typeof (elFinder.prototype.i18) == 'object') {
    elFinder.prototype.i18.ru = {
        translator: 'Dmitry "dio" Levashov &lt;dio@std42.ru&gt;',
        language: 'Русский язык',
        direction: 'ltr',
        dateFormat: 'd M Y H:i',
        fancyDateFormat: '$1 H:i',
        messages: {

            /********************************** errors **********************************/
            'error': 'Внимание!',
            'errorDropDir': 'Невозможно загрузить папку.',
            'errNotUplTitle': 'Невозможно загрузить некоторые файлы по следующим причинам: ',
            'errUploadMinSize': 'Невозможно загрузить пустой файл (размер 0 байт), попробуйте добавить другой файл',
            'errUploadMax': 'Превышено максимально допустимое число загружаемых файлов, повторите попытку. Максимально допустимое число одновременно загружаемых файлов равно 10ти',
            'errUploadMaxSize': 'Не удалось загрузить файл! Превышен максимально допустимый размер загружаемого файла, повторите попытку. Максимально допустимый размер файла равен 20 мегабайтам',
            'errInvNameCr': 'Внимание! Минимальная длина имени должна быть равна одному символу, не учитывая длину расширения, попробуйте еще раз',
            'errInvNameCrDir': 'Внимание! Минимальная длина имени должна быть равна одному символу, попробуйте еще раз',
            'errInvSym': 'Внимание! Файл содержит недопустимые символы в названии. Для ввода запрещены символы: "$ / \ : * ? " + # < > |"',
            'errInvSymDir': 'Внимание! Папка содержит недопустимые символы в названии. Для ввода запрещены символы: "$ / \ : * ? " + # < > |"',
            'errInvExtDifferent': 'Нельзя изменять расширение',
            'errInvNameSize': 'Внимание! Превышена максимальная длина имени файла. В настоящий момент максимальная длина имени файла ограничена 100 символами',
            'errInvNameSizeDir': 'Внимание! Превышена максимальная длина имени папки. В настоящий момент максимальная длина имени папки ограничена 100 символами',
            //'errNameNull': 'Имя файла не может состоять только из расширения',
            'errreceivedmail': 'Ошибка при получении сообщений',
            'errUnknown': 'Неизвестная ошибка.',
            'errUnknownCmd': 'Неизвестная комманда.',
            'errJqui': 'Отсутствуют необходимые компоненты jQuery UI - selectable, draggable и droppable.',
            'errNode': 'Отсутствует DOM элемент для инициализации elFinder.',
            'errURL': 'Некорректная настройка. Необходимо указать URL сервера.',
            'errAccess': 'Доступ запрещен.',
            'errConnect': 'Не удалось соединиться с сервером.',
            'errAbort': 'Соединение прервано.',
            'errTimeout': 'Таймаут соединения.',
            'errNotFound': 'Сервер не найден.',
            'errResponse': 'Некорректный ответ сервера.',
            'errConf': 'Некорректная настройка сервера.',
            'errJSON': 'Модуль PHP JSON не установлен.',
            'errNoVolumes': 'Отсутствуют корневые директории достуные для чтения.',
            'errCmdParams': 'Некорректные параметры комманды "$1".',
            'errDataNotJSON': 'Данные не формате JSON.',
            'errDataEmpty': 'Данные отсутствуют.',
            'errCmdReq': 'Для запроса к серверу необходимо указать имя комманды.',
            'errOpen': 'Не удалось открыть "$1".',
            'errNotFolder': 'Объект не является папкой.',
            'errNotFile': 'Объект не является файлом.',
            'errRead': 'Ошибка чтения "$1".',
            'errWrite': 'Ошибка записи "$1".',
            'errPerm': 'Доступ запрещен.',
            'errLocked': '"$1" защищен и не может быть переименован, перемещен или удален.',
            'errExists': 'В папке уже существует объект с именем <b>"$1".</b>',
            'errInvName': 'Недопустимое имя файла.',
            'errFolderNotFound': 'Папка не найдена.',
            'errFileNotFound': 'Файл не найден.',
            'errTrgFolderNotFound': 'Целевая папка "$1" не найдена.',
            'errPopup': 'Браузер заблокировал открытие нового окна. Чтобы окрыть файл, измените настройки браузера.',
            'errMkdir': 'Ошибка создания папки "$1".',
            'errMkfile': 'Ошибка создания файла "$1".',
            'errRename': 'Ошибка переименования "$1".',
            'errCopyFrom': 'Копирование из корневой директории "$1" запрещено.',
            'errCopyTo': 'Копирование в корневую директорию "$1" запрещено.',
            'errUploadCommon': 'Ошибка загрузки файлов.',
            'errUpload': 'Ошибка загрузки "$1".',
            'errUploadNoFiles': 'Отсутствуют загруженые файлы.',
            'errMaxSize': 'Превышен допустимый размер загружаемых файлов.',
            'errFileMaxSize': 'Размер файла превышает допустимый.',
            'errUploadMime': 'Недопустимый тип файла.',
            'errUploadTransfer': 'Ошибка передачи файла "$1".',
            'errSave': 'Ошибка сохранения "$1".',
            'errCopy': 'Ошибка копирования "$1".',
            'errMove': 'Ошибка перемещения "$1".',
            'errCopyInItself': 'Невозможно скопировать папку "$1" в саму себя.',
            'errRm': 'Ошибка удаления "$1".',
            'errExtract': 'Ошибка извлечения файлов из архива "$1".',
            'errArchive': 'Ошибка создания архива.',
            'errArcType': 'Неподдерживаемый тип архива.',
            'errNoArchive': 'Файл не является архивом допустимого типа.',
            'errCmdNoSupport': 'Сервер не поддерживает эту комманду.',
            'errReplByChild': 'Невозможно заменить папку "$1" содержащимся в ней объектом.',
            'errArcSymlinks': 'По соображениям безопасности запрещена распаковка архивов, содержащих ссылки (symlinks) или файлы с недопустимыми именами.', // edited 24.06.2012
            'errArcMaxSize': 'Размер файлов в архиве превышает максимально разрешенный.',
            'errResize': 'Не удалось изменить размер "$1".',
            'errUsupportType': 'Неподдерживаемый тип файла.',
            'errNotUTF8Content': 'Файл "$1" содержит текст в кодировке отличной от UTF-8 и не может быть отредактирован.', // added 9.11.2011
            'errNetMount': 'Не удалось подключить "$1".', // added 17.04.2012
            'errNetMountNoDriver': 'Неподдерживаемый протокол.', // added 17.04.2012
            'errNetMountFailed': 'Ошибка монтирования.', // added 17.04.2012
            'errNetMountHostReq': 'Host required.', // added 18.04.2012
            /******************************* commands names ********************************/
            'cmdarchive': 'Создать архив',
            'cmdback': 'Назад',
            'cmdcopy': 'Копировать',
            'cmdcut': 'Вырезать',
            'cmddownload': 'Скачать',
            'cmdduplicate': 'Сделать копию',
            'cmdedit': 'Редактировать',
            'cmdextract': 'Распаковать архив',
            'cmdforward': 'Вперед',
            'cmdgetfile': 'Выбрать',
            'cmdhelp': 'О программе',
            'cmdhome': 'Домой',
            'cmdinfo': 'Свойства',
            'cmdmkdir': 'Новая папка',
            'cmdmkfile': 'Новый файл',
            'cmdopen': 'Открыть',
            'cmdpaste': 'Вставить',
            'cmdquicklook': 'Быстрый просмотр',
            'cmdreload': 'Обновить',
            'cmdrename': 'Переименовать',
            'cmdrm': 'Удалить',
            'cmdsearch': 'Поиск',
            'cmdup': 'Наверх',
            'cmdupload': 'Добавить файл',
            'cmdview': 'Вид',
            'cmdresize': 'Размер изображения',
            'cmdsort': 'Сортировать',
            'cmdencrypt': 'Зашифровать',
            'cmddecrypt': 'Расшифровать',
            'cmdsign': 'Подписать',
            'cmdchecksign': 'Проверить подпись',
            'cmdsend': 'Отправить',
            'cmdopensendpopup': 'Отправить',
            'cmddecryptandchecksign': 'Расшифровать и проверить подпись',
            'cmdsignandencrypt': 'Подписать и зашифровать',
            'cmdmore': 'Еще',
            'cmdcryptinfo': 'Подробнее',
            'cmdadd': 'Добавить',
            'cmdcancel': 'отменить',
            'cmdcancel2': 'Отмена',
            'cmdfilter': 'Выводить: ',
            'cmdmultiplyadd': '+ Добавить',
            'addupload': 'Файл',
            'addmkdir': 'Папку',
            'addpaste': 'Вставить из буфера',
            /*********************************** buttons ***********************************/
            'btnClose': 'Закрыть',
            'btnSave': 'Сохранить',
            'btnRm': 'Да',
            'btnCancel': 'Отмена',
            'btnApply': 'Применить',
            'btnNo': 'Нет',
            'btnYes': 'Да',
            'btnMount': 'Подключить', // added 18.04.2012
            /******************************** notifications ********************************/
            'ntfopen': 'Открытие папки',
            'ntffile': 'Открытие файла',
            'ntfreload': 'Обновление текущей папки',
            'ntfmkdir': 'Создание папки',
            'ntfmkfile': 'Создание файла',
            'ntfrm': 'Удаление файлов',
            'ntfcopy': 'Копирование файлов',
            'ntfmove': 'Перемещение файлов',
            'ntfprepare': 'Подготовка к копированию',
            'ntfrename': 'Переименование файлов',
            'ntfupload': 'Загрузка файлов',
            'ntfdownload': 'Скачивание файлов',
            'ntfsave': 'Сохранение файлов',
            'ntfarchive': 'Создание архива',
            'ntfextract': 'Распаковка архива',
            'ntfsearch': 'Поиск файлов',
            'ntfsmth': 'Обработка запроса.',
            'ntfnetmount': 'Монтирую сетевой диск', // added 18.04.2012

            /************************************ dates **********************************/
            'dateUnknown': 'Незвестно',
            'Today': 'Сегодня',
            'Yesterday': 'Вчера',
            'Jan': 'Янв',
            'Feb': 'Фев',
            'Mar': 'Мар',
            'Apr': 'Апр',
            'May': 'Май',
            'Jun': 'Июнь',
            'Jul': 'Июль',
            'Aug': 'Авг',
            'Sep': 'Сен',
            'Oct': 'Окт',
            'Nov': 'Ноя',
            'Dec': 'Дек',
            'January': 'Январь',
            'February': 'Февраль',
            'March': 'Март',
            'April': 'Апрель',
            'May': 'Май',
            'June': 'Июнь',
            'July': 'Июль',
            'August': 'Август',
            'September': 'Сентябрь',
            'October': 'Октябрь',
            'November': 'Ноябрь',
            'December': 'Декабрь',
            'Sunday': 'Воскресенье',
            'Monday': 'Понедельник',
            'Tuesday': 'Вторник',
            'Wednesday': 'Среда',
            'Thursday': 'Четверг',
            'Friday': 'Пятница',
            'Saturday': 'Суббота',
            'Sun': 'Вск',
            'Mon': 'Пнд',
            'Tue': 'Втр',
            'Wed': 'Срд',
            'Thu': 'Чтв',
            'Fri': 'Птн',
            'Sat': 'Сбт',

            /******************************** sort variants ********************************/
            'sortnameDirsFirst': 'по имени (папки в начале)',
            'sortkindDirsFirst': 'по типу (папки в начале)',
            'sortsizeDirsFirst': 'по размеру (папки в начале)',
            'sortdateDirsFirst': 'по дате (папки в начале)',
            'sortname': 'по имени',
            'sortkind': 'по типу',
            'sortsize': 'по размеру',
            'sortdate': 'по дате',
            'sortFoldersFirst': 'Папки в начале',

            /********************************** messages **********************************/
            'attention': 'Внимание!',
            'receiveddirname': 'Полученные',
            'gomaster': 'Перейти к мастеру',
            'receivedmailheader': 'Были получены следующие файлы: ',
            'sendotheremail': 'Отправить файлы на другой E-mail',
            'sendemailsuccess': 'Файлы успешно отправлены',
            'sendemailerror': 'Ошибка при отправке файлов',
            'addressbook': 'Адресная книга',
            'addressbookempty': 'Адресная книга пуста.',
            'select': 'Выбрать',
            'notemail': 'Невалидный E-mail',
            'sendemailmessage': 'Введите E-mail, на который вы планируете отправить файл:',
            'sendfile': 'Отправка файлов',
            'times': 'раз',
            'notfilesforfilter': 'Ни один файл не соответствует выбранной фильтрации',
            'filterAll': 'Все',
            'filterSign': 'Подписанные',
            'filterCrypt': 'Зашифрованные',
            'filterNotCryptSign': 'Не зашифрованные и не подписанные',
            'cwdemptyhelp': 'Вы можете загрузить файлы, перетащив их в данное окно ',
            'or': 'или',
            'cwdselectfile': 'выбрать файлы в проводнике',
            'lastchange': 'Дата последнего изменения: ',
            'sizeinfo': 'Размер: ',
            'emptycryptinfo': 'Документ не подписан и не зашифрован',
            'cryptinfonocert': 'Документ не содержит информацию о подписях',
            'infosel': 'Выбрано элементов: ',
            'signed': 'Подписан ',
            'encrypted': 'Зашифрован',
            'cwdempty': 'Эта папка пуста.',
            'confirmReq': 'Необходимо подтверждение.',
            'confirmRm': 'Выбранные файлы будут удалены. Продолжить?',
            'confirmRepl': 'Заменить старый файл новым?',
            'apllyAll': 'для всех',
            'name': 'Имя файла',
            'size': 'Размер',
            'perms': 'Доступ',
            'modify': 'Изменен',
            'kind': 'Тип',
            'date': 'Дата изменения',
            'read': 'чтение',
            'write': 'запись',
            'noaccess': 'нет доступа',
            'and': 'и',
            'unknown': 'неизвестно',
            'selectall': 'Выбрать все',
            'selectfiles': 'Выбрать файл(ы)',
            'selectffile': 'Выбрать первый файл',
            'selectlfile': 'Выбрать последний файл',
            'viewlist': 'В виде списка',
            'viewicons': 'В виде иконок',
            'places': 'Избранное',
            'calc': 'вычисляю',
            'path': 'Путь',
            'aliasfor': 'Указывает на',
            'locked': 'Защита',
            'dim': 'Разрешение',
            'files': 'Файлы',
            'folders': 'Папки',
            'items': 'Объекты',
            'yes': 'да',
            'no': 'нет',
            'link': 'Ссылка',
            'searcresult': 'Результаты поиска',
            'selected': 'выбрано',
            'about': 'О программе',
            'shortcuts': 'Горячие клавиши',
            'help': 'Помощь',
            'webfm': 'Файловый менеджер для web',
            'ver': 'Версия',
            'protocolver': 'версия протокола',
            'homepage': 'Сайт проекта',
            'docs': 'Документация',
            'github': 'Fork us on Github',
            'twitter': 'Follow us in twitter',
            'facebook': 'Join us on facebook',
            'team': 'Авторы',
            'chiefdev': 'ведущий разработчик',
            'developer': 'разработчик',
            'contributor': 'участник',
            'maintainer': 'сопровождение проекта',
            'translator': 'переводчик',
            'icons': 'Иконки',
            'dontforget': 'и не забудьте взять своё полотенце',
            'shortcutsof': 'Горячие клавиши отключены',
            'dropFiles': 'Бросить файлы',
            'or': 'или',
            'selectForUpload': 'Выбрать файлы для загрузки',
            'moveFiles': 'Внимание!',
            'copyFiles': 'Внимание!',
            'rmFromPlaces': 'Удалить из избранного',
            'untitled folder': 'новая папка',
            'untitled file.txt': 'новый файл.txt',
            'aspectRatio': 'Сохранять пропорции',
            'scale': 'Масштаб',
            'width': 'Ширина',
            'height': 'Высота',
            'resize': 'Размер',
            'crop': 'Кадрировать',
            'rotate': 'Поворот',
            'rotate-cw': 'Поворот на 90 градусов по часовой стрелке',
            'rotate-ccw': 'Поворот на 90 градусов против часовой стрелке',
            'degree': '°',
            'netMountDialogTitle': 'Подключить сетевой диск', // added 18.04.2012
            'protocol': 'Протокол', // added 18.04.2012
            'host': 'Хост', // added 18.04.2012
            'port': 'Порт', // added 18.04.2012
            'user': 'Пользователь', // added 18.04.2012
            'pass': 'Пароль', // added 18.04.2012
            'attentionTheRestriction': 'Внимание!', // added 28.10.2014
            'noMoreThirtyFiles': 'Одновременно может быть отправлено не более 30ти файлов', // added 28.10.2014

            /********************************** mimetypes **********************************/
            'kindUnknown': 'Неизвестный',
            'kindFolder': 'Папка',
            'kindAlias': 'Ссылка',
            'kindAliasBroken': 'Битая ссылка',
            // applications
            'kindSign': 'Подписанный документ',
            'kindCrypt': 'Зашифрованный документ',
            'kindSignCrypt': 'Зашифрованный и подписанный документ',
            'kindCert': 'Файл сертификата',
            'kindApp': 'Приложение',
            'kindPostscript': 'Документ Postscript',
            'kindMsOffice': 'Документ Microsoft Office',
            'kindMsWord': 'Документ Microsoft Word',
            //'kindMsExcel'     : 'Документ Microsoft Excel',
            'kindMsExcel': 'Офисный документ',
            //'kindMsPP'        : 'Презентация Microsoft Powerpoint',
            'kindMsPP': 'Офисный документ',
            //'kindOO'          : 'Документ Open Office',
            'kindOO': 'Офисный документ',
            'kindAppFlash': 'Приложение Flash',
            'kindPDF': 'Документ PDF',
            'kindTorrent': 'Файл Bittorrent',
            'kind7z': 'Архив 7z',
            'kindTAR': 'Архив TAR',
            'kindGZIP': 'Архив GZIP',
            'kindBZIP': 'Архив BZIP',
            'kindZIP': 'Архив ZIP',
            'kindRAR': 'Архив RAR',
            'kindJAR': 'Файл Java JAR',
            'kindTTF': 'Шрифт True Type',
            'kindOTF': 'Шрифт Open Type',
            'kindRPM': 'Пакет RPM',
            'kindarchive': 'Архив',
            //'kindSTW'         : 'Текстовый документ',
            'kindSTW': 'Офисный документ',
            // texts
            'kindText': 'Текстовый документ',
            'kindTextPlain': 'Простой текст',
            'kindPHP': 'Исходник PHP',
            'kindCSS': 'Таблицы стилей CSS',
            'kindHTML': 'Документ HTML',
            'kindJS': 'Исходник Javascript',
            //'kindRTF'         : 'Rich Text Format',
            'kindRTF': 'Офисный документ',
            'kindC': 'Исходник C',
            'kindCHeader': 'Заголовочный файл C',
            'kindCPP': 'Исходник C++',
            'kindCPPHeader': 'Заголовочный файл C++',
            'kindShell': 'Unix shell script',
            'kindPython': 'Исходник Python',
            'kindJava': 'Исходник Java',
            'kindRuby': 'Исходник Ruby',
            'kindPerl': 'Исходник Perl',
            'kindSQL': 'Исходник SQL',
            'kindXML': 'Документ XML',
            'kindAWK': 'Исходник AWK',
            'kindCSV': 'Текст с разделителями',
            'kindDOCBOOK': 'Документ Docbook XML',
            // images
            'kindImage': 'Изображение',
            'kindBMP': 'Изображение BMP',
            'kindJPEG': 'Изображение JPEG',
            'kindGIF': 'Изображение GIF',
            'kindPNG': 'Изображение PNG',
            'kindTIFF': 'Изображение TIFF',
            'kindTGA': 'Изображение TGA',
            'kindPSD': 'Изображение Adobe Photoshop',
            'kindXBITMAP': 'Изображение X bitmap',
            'kindPXM': 'Изображение Pixelmator',
            'kindICON': 'Изображение ICON',
            'kindCR2': 'Изображение CR2',
            'kindPIC': 'Изображение PIC',
            'kindCDR': 'Изображение CDR',
            // media
            'kindAudio': 'Аудио файл',
            'kindAudioMPEG': 'Аудио MPEG',
            'kindAudioMPEG4': 'Аудио MPEG-4',
            'kindAudioMIDI': 'Аудио MIDI',
            'kindAudioOGG': 'Аудио Ogg Vorbis',
            'kindAudioWAV': 'Аудио WAV',
            'kindWAVE': 'Аудио WAVE',
            'kindM4R': 'Аудио M4R',
            'kindAAC': 'Аудио AAC',
            'kindWMA': 'Аудио WMA',
            'kindMP2': 'Аудио MP2',
            'kindDLS': 'Аудио DLS',
            'kindM4B': 'Аудио M4B',
            'kindWAV': 'Аудио WAV',
            'kindMP1': 'Аудио MP1',
            'AudioPlaylist': 'Плейлист MP3',
            'kindVideo': 'Видео файл',
            'kindFlashVideo': 'Видео FLV',
            'kind3GP': 'Видео 3GP',
            'kindMP4': 'Видео MP4',
            'kindASF': 'Видео ASF',
            'kindAMV': 'Видео AMV',
            'kindAAF': 'Видео AAF',
            'kindMPEG4': 'Видео MPEG4',
            'kindXVID': 'Видео XVID',
            'kindVideoDV': 'Видео DV',
            'kindVideoMPEG': 'Видео MPEG',
            'kindVideoMPEG4': 'Видео MPEG-4',
            'kindVideoAVI': 'Видео AVI',
            'kindVideoMOV': 'Видео Quick Time',
            'kindVideoWM': 'Видео Windows Media',
            'kindVideoFlash': 'Видео Flash',
            'kindVideoMKV': 'Видео Matroska',
            'kindVideoOGG': 'Видео Ogg',
            'volume_files': 'Файлы '
        }
    };
}
"use strict";
/**
 * elFinder transport to support old protocol.
 *
 * @example
 * $('selector').elfinder({
 *   .... 
 *   transport : new elFinderSupportVer1()
 * })
 *
 * @author Dmitry (dio) Levashov
 **/
window.elFinderSupportVer1 = function(upload) {
    var self = this;

    this.upload = upload || 'auto';

    this.init = function(fm) {
        this.fm = fm;
        this.fm.parseUploadData = function(text) {
            var data;

            if (!$.trim(text)) {
                return { error: ['errResponse', 'errDataEmpty'] };
            }

            try {
                data = $.parseJSON(text);
            } catch (e) {
                return { error: ['errResponse', 'errDataNotJSON'] };
            }

            return self.normalize('upload', data);
        };
    };
    this.send = function(opts) {
        var self = this,
            fm = this.fm,
            dfrd = $.Deferred(),
            cmd = opts.data.cmd,
            args = [],
            _opts = {},
            data,
            xhr;

        dfrd.abort = function() {
            xhr.state() == 'pending' && xhr.abort();
        };
        switch (cmd) {
        case 'open':
            opts.data.tree = 1;
            break;
        case 'parents':
        case 'tree':
            return dfrd.resolve({ tree: [] });
            break;
        case 'get':
            opts.data.cmd = 'read';
            opts.data.current = fm.file(opts.data.target).phash;
            break;
        case 'put':
            opts.data.cmd = 'edit';
            opts.data.current = fm.file(opts.data.target).phash;
            break;
        case 'archive':
        case 'rm':
            opts.data.current = fm.file(opts.data.targets[0]).phash;
            break;
        case 'extract':
        case 'rename':
        case 'resize':
            opts.data.current = fm.file(opts.data.target).phash;
            break;
        case 'duplicate':
            _opts = $.extend(true, {}, opts);

            $.each(opts.data.targets, function(i, hash) {
                $.ajax($.extend(_opts, { data: { cmd: 'duplicate', target: hash, current: fm.file(hash).phash } }))
                    .error(function(error) {
                        fm.error(fm.res('error', 'connect'));
                    })
                    .done(function(data) {
                        data = self.normalize('duplicate', data);
                        if (data.error) {
                            fm.error(data.error);
                        } else if (data.added) {
                            fm.trigger('add', { added: data.added });
                        }
                    });
            });
            return dfrd.resolve({});
            break;

        case 'mkdir':
        case 'mkfile':
            opts.data.current = opts.data.target;
            break;
        case 'paste':
            opts.data.current = opts.data.dst;
            break;

        case 'size':
            return dfrd.resolve({ error: fm.res('error', 'cmdsupport') });
            break;
        case 'search':
            return dfrd.resolve({ error: fm.res('error', 'cmdsupport') });
            break;

        }
        // cmd = opts.data.cmd

        xhr = $.ajax(opts)
            .fail(function(error) {
                dfrd.reject(error);
            })
            .done(function(raw) {
                data = self.normalize(cmd, raw);

                // cmd != 'open' && self.fm.log(data);

                if (cmd == 'paste' && !data.error) {
                    fm.sync();
                    dfrd.resolve({});
                } else {
                    dfrd.resolve(data);
                }
            });
        return dfrd;

        return $.ajax(opts);
    }; // fix old connectors errors messages as possible
    // this.errors = {
    // 	'Unknown command'                                  : 'Unknown command.',
    // 	'Invalid backend configuration'                    : 'Invalid backend configuration.',
    // 	'Access denied'                                    : 'Access denied.',
    // 	'PHP JSON module not installed'                    : 'PHP JSON module not installed.',
    // 	'File not found'                                   : 'File not found.',
    // 	'Invalid name'                                     : 'Invalid file name.',
    // 	'File or folder with the same name already exists' : 'File named "$1" already exists in this location.',
    // 	'Not allowed file type'                            : 'Not allowed file type.',
    // 	'File exceeds the maximum allowed filesize'        : 'File exceeds maximum allowed size.',
    // 	'Unable to copy into itself'                       : 'Unable to copy "$1" into itself.',
    // 	'Unable to create archive'                         : 'Unable to create archive.',
    // 	'Unable to extract files from archive'             : 'Unable to extract files from "$1".'
    // }

    this.normalize = function(cmd, data) {
        var self = this,
            files = {},
            filter = function(file) { return file && file.hash && file.name && file.mime ? file : null; },
            phash;

        if ((cmd == 'tmb' || cmd == 'get')) {
            return data;
        }

        // if (data.error) {
        // 	$.each(data.error, function(i, msg) {
        // 		if (self.errors[msg]) {
        // 			data.error[i] = self.errors[msg];
        // 		}
        // 	});
        // }

        if (cmd == 'upload' && data.error && data.cwd) {
            data.warning = $.extend({}, data.error);
            data.error = false;
        }


        if (data.error) {
            return data;
        }

        if (cmd == 'put') {

            phash = this.fm.file(data.target.hash).phash;
            return { changed: [this.normalizeFile(data.target, phash)] };
        }

        phash = data.cwd.hash;

        if (data.tree) {
            $.each(this.normalizeTree(data.tree), function(i, file) {
                files[file.hash] = file;
            });
        }

        $.each(data.cdc || [], function(i, file) {
            var hash = file.hash;

            if (files[hash]) {
                files[hash].date = file.date;
                files[hash].locked = file.hash == phash ? true : file.rm === void(0) ? false : !file.rm;
            } else {
                files[hash] = self.normalizeFile(file, phash, data.tmb);
            }
        });

        if (!data.tree) {
            $.each(this.fm.files(), function(hash, file) {
                if (!files[hash] && file.phash != phash && file.mime == 'directory') {
                    files[hash] = file;
                }
            });
        }

        if (cmd == 'open') {
            return {
                cwd: files[phash] || this.normalizeFile(data.cwd),
                files: $.map(files, function(f) { return f; }),
                options: self.normalizeOptions(data),
                init: !!data.params,
                debug: data.debug
            };
        }


        return $.extend({
            current: data.cwd.hash,
            error: data.error,
            warning: data.warning,
            options: { tmb: !!data.tmb }
        }, this.fm.diff($.map(files, filter)));

    }; /**
	 * Convert old api tree into plain array of dirs
	 *
	 * @param  Object  root dir
	 * @return Array
	 */
    this.normalizeTree = function(root) {
        var self = this,
            result = [],
            traverse = function(dirs, phash) {
                var i, dir;

                for (i = 0; i < dirs.length; i++) {
                    dir = dirs[i];
                    result.push(self.normalizeFile(dir, phash));
                    dir.dirs.length && traverse(dir.dirs, dir.hash);
                }
            };

        traverse([root]);

        return result;
    }; /**
	 * Convert file info from old api format into new one
	 *
	 * @param  Object  file
	 * @param  String  parent dir hash
	 * @return Object
	 */
    this.normalizeFile = function(file, phash, tmb) {
        var mime = file.mime || 'directory',
            size = mime == 'directory' && !file.linkTo ? 0 : file.size,
            info = {
                url: file.url,
                hash: file.hash,
                phash: phash,
                name: file.name,
                mime: mime,
                date: file.date || 'unknown',
                size: size,
                read: file.read,
                write: file.write,
                locked: !phash ? true : file.rm === void(0) ? false : !file.rm
            };

        if (file.mime == 'application/x-empty') {
            info.mime = 'text/plain';
        }
        if (file.linkTo) {
            info.alias = file.linkTo;
        }

        if (file.linkTo) {
            info.linkTo = file.linkTo;
        }

        if (file.tmb) {
            info.tmb = file.tmb;
        } else if (info.mime.indexOf('image/') === 0 && tmb) {
            info.tmb = 1;

        }

        if (file.dirs && file.dirs.length) {
            info.dirs = true;
        }
        if (file.dim) {
            info.dim = file.dim;
        }
        if (file.resize) {
            info.resize = file.resize;
        }
        return info;
    };
    this.normalizeOptions = function(data) {
        var opts = {
            path: data.cwd.rel,
            disabled: data.disabled || [],
            tmb: !!data.tmb,
            copyOverwrite: true
        };

        if (data.params) {
            opts.api = 1;
            opts.url = data.params.url;
            opts.archivers = {
                create: data.params.archives || [],
                extract: data.params.extract || []
            };
        }

        if (opts.path.indexOf('/') !== -1) {
            opts.separator = '/';
        } else if (opts.path.indexOf('\\') !== -1) {
            opts.separator = '\\';
        }
        return opts;
    };
};
"use strict";
/**
 * @class dialogelfinder - open elFinder in dialog window
 *
 * @param  Object  elFinder options with dialog options
 * @example
 * $(selector).dialogelfinder({
 *     // some elfinder options
 *     title          : 'My files', // dialog title, default = "Files"
 *     width          : 850,        // dialog width, default 840
 *     autoOpen       : false,      // if false - dialog will not be opened after init, default = true
 *     destroyOnClose : true        // destroy elFinder on close dialog, default = false
 * })
 * @author Dmitry (dio) Levashov
 **/
$.fn.dialogelfinder = function(opts) {
    var position = 'elfinderPosition',
        destroy = 'elfinderDestroyOnClose';

    this.not('.elfinder').each(function() {


        var doc = $(document),
            toolbar = $('<div class="ui-widget-header dialogelfinder-drag ui-corner-top">' + (opts.title || 'Files') + '</div>'),
            button = $('<a href="#" class="dialogelfinder-drag-close ui-corner-all"><span class="ui-icon ui-icon-closethick"/></a>')
                .appendTo(toolbar)
                .click(function(e) {
                    e.preventDefault();

                    node.dialogelfinder('close');
                }),
            node = $(this).addClass('dialogelfinder')
                .css('position', 'absolute')
                .hide()
                .appendTo('body')
                .draggable({
                    handle: '.dialogelfinder-drag',
                    containment: 'window'
                })
                .elfinder(opts)
                .prepend(toolbar),
            elfinder = node.elfinder('instance');


        node.width(parseInt(node.width()) || 840) // fix width if set to "auto"
            .data(destroy, !!opts.destroyOnClose)
            .find('.elfinder-toolbar').removeClass('ui-corner-top');

        opts.position && node.data(position, opts.position);

        opts.autoOpen !== false && $(this).dialogelfinder('open');

    });

    if (opts == 'open') {
        var node = $(this),
            pos = node.data(position) || {
                top: parseInt($(document).scrollTop() + ($(window).height() < node.height() ? 2 : ($(window).height() - node.height()) / 2)),
                left: parseInt($(document).scrollLeft() + ($(window).width() < node.width() ? 2 : ($(window).width() - node.width()) / 2))
            },
            zindex = 100;

        if (node.is(':hidden')) {

            $('body').find(':visible').each(function() {
                var $this = $(this), z;

                if (this !== node[0] && $this.css('position') == 'absolute' && (z = parseInt($this.zIndex())) > zindex) {
                    zindex = z + 1;
                }
            });

            node.zIndex(zindex).css(pos).show().trigger('resize');
            setTimeout(function() {
                // fix resize icon position and make elfinder active
                node.trigger('resize').mousedown();
            }, 200);
        }
    } else if (opts == 'close') {
        var node = $(this);

        if (node.is(':visible')) {
            !!node.data(destroy)
                ? node.elfinder('destroy').remove()
                : node.elfinder('close');
        }
    } else if (opts == 'instance') {
        return $(this).getElFinder();
    }

    return this;
};

$.fn.elfinderoverlay = function(opts) {

    this.filter(':not(.elfinder-overlay)').each(function() {
        opts = $.extend({}, opts);
        $(this).addClass('ui-widget-overlay elfinder-overlay')
            .hide()
            .mousedown(function(e) {
                e.preventDefault();
                e.stopPropagation();
            })
            .data({
                cnt: 0,
                show: typeof(opts.show) == 'function' ? opts.show : function() {},
                hide: typeof(opts.hide) == 'function' ? opts.hide : function() {}
            });
    });

    if (opts == 'show') {
        var o = this.eq(0),
            cnt = o.data('cnt') + 1,
            show = o.data('show');

        o.data('cnt', cnt);

        if (o.is(':hidden')) {
            o.zIndex(o.parent().zIndex() + 1);
            o.show();
            show();
        }
    }

    if (opts == 'hide') {
        var o = this.eq(0),
            cnt = o.data('cnt') - 1,
            hide = o.data('hide');

        o.data('cnt', cnt);

        if (cnt == 0 && o.is(':visible')) {
            o.hide();
            hide();
        }
    }

    return this;
}
"use strict";
/**
 * @class elfinderworkzone - elFinder container for nav and current directory
 * @author Dmitry (dio) Levashov
 **/
$.fn.elfinderworkzone = function(fm) {
    var cl = 'elfinder-workzone';

    this.not('.' + cl).each(function() {
        var wz = $(this).addClass(cl),
            wdelta = wz.outerHeight(true) - wz.height(),
            parent = wz.parent();

        parent.add(window).bind('resize', function() {
            var height = parent.height() + 20; // +20px show bottom scrollbar arrow [rail-s]

            parent.children(':visible:not(.' + cl + ')').each(function() {
                var ch = $(this);

                if (ch.css('position') != 'absolute') {
                    height -= ch.outerHeight(true);
                }
            });

            wz.height(height - wdelta);
        });
    });
    return this;
};
/**
 * @class elfindernav - elFinder container for diretories tree and places
 *
 * @author Dmitry (dio) Levashov
 **/
$.fn.elfindernavbar = function(fm, opts) {

    this.not('.elfinder-navbar').each(function() {
        var nav = $(this).addClass('ui-state-default elfinder-navbar'),
            parent = nav.parent()
                .resize(function() {
                    nav.height(wz.height() - delta);
                }),
            wz = parent.children('.elfinder-workzone').append(nav),
            delta = nav.outerHeight() - nav.height(),
            ltr = fm.direction == 'ltr',
            handle;


        if ($.fn.resizable && opts.resizable) {
            handle = nav.resizable({
                    handles: ltr ? 'e' : 'w',
                    minWidth: opts.minWidth || 150,
                    maxWidth: opts.maxWidth || 500
                })
                .bind('resize scroll', function() {
                    var offset = (fm.UA.Opera && nav.scrollLeft()) ? 20 : 2;
                    handle.css({
                        top: parseInt(nav.scrollTop()) + 'px',
                        left: ltr ? 'auto' : parseInt(nav.scrollLeft() + offset),
                        right: ltr ? parseInt(nav.scrollLeft() - offset) * -1 : 'auto'
                    });
                })
                .find('.ui-resizable-handle').zIndex(nav.zIndex() + 10);

            if (!ltr) {
                nav.resize(function() {
                    nav.css('left', null).css('right', 0);
                });
            }

            fm.one('open', function() {
                setTimeout(function() {
                    nav.trigger('resize');
                }, 150);
            });
        }
    });

    return this;
};
"use strict";
/**
 * @class  elFinder dialog
 *
 * @author Dmitry (dio) Levashov
 **/
$.fn.elfinderdialog = function(opts) {
    var dialog;

    if (typeof(opts) == 'string' && (dialog = this.closest('.ui-dialog')).length) {
        if (opts == 'open') {
            dialog.css('display') == 'none' && dialog.fadeIn(120, function() {
                dialog.trigger('open');
            });
        } else if (opts == 'close') {
            dialog.css('display') != 'none' && dialog.hide().trigger('close');
        } else if (opts == 'destroy') {
            dialog.hide().remove();
        } else if (opts == 'toTop') {
            dialog.trigger('totop');
        }
    }

    opts = $.extend({}, $.fn.elfinderdialog.defaults, opts);

    this.filter(':not(.ui-dialog-content)').each(function() {
        var self = $(this).addClass('ui-dialog-content ui-widget-content'),
            parent = self.parent(),
            clactive = 'elfinder-dialog-active',
            cldialog = 'elfinder-dialog',
            clnotify = 'elfinder-dialog-notify',
            clhover = 'ui-state-hover',
            id = parseInt(Math.random() * 1000000),
            overlay = parent.children('.elfinder-overlay'),
            buttonset = $('<div class="ui-dialog-buttonset"/>'),
            buttonpane = $('<div class=" ui-helper-clearfix ui-dialog-buttonpane ui-widget-content"/>')
                .append(buttonset),

            dialog = $('<div class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-draggable std42-dialog  ' + cldialog + ' ' + opts.cssClass + '"/>')
                .hide()
                .append(self)
                .appendTo(parent)
                .draggable({
                    handle: '.ui-dialog-titlebar',
                    containment: 'document'
                })
                .css({
                    width: opts.width,
                    height: opts.height
                })
                .mousedown(function(e) {
                    e.stopPropagation();

                    $(document).mousedown();

                    if (!dialog.is('.' + clactive)) {
                        parent.find('.' + cldialog + ':visible').removeClass(clactive);
                        dialog.addClass(clactive).zIndex(maxZIndex() + 1);
                    }
                })
                .bind('open', function() {
                    dialog.trigger('totop');
                    typeof(opts.open) == 'function' && $.proxy(opts.open, self[0])();

                    if (!dialog.is('.' + clnotify)) {

                        parent.find('.' + cldialog + ':visible').not('.' + clnotify).each(function() {
                            var d = $(this),
                                top = parseInt(d.css('top')),
                                left = parseInt(d.css('left')),
                                _top = parseInt(dialog.css('top')),
                                _left = parseInt(dialog.css('left'));

                            if (d[0] != dialog[0] && (top == _top || left == _left)) {
                                dialog.css({
                                    top: (top + 10) + 'px',
                                    left: (left + 10) + 'px'
                                });
                            }
                        });
                    }
                })
                .bind('close', function() {
                    var dialogs = parent.find('.elfinder-dialog:visible'),
                        z = maxZIndex();

                    $(this).data('modal') && overlay.elfinderoverlay('hide');

                    // get focus to next dialog
                    if (dialogs.length) {
                        dialogs.each(function() {
                            var d = $(this);
                            if (d.zIndex() >= z) {
                                d.trigger('totop');
                                return false;
                            }
                        });
                    } else {
                        // return focus to parent
                        setTimeout(function() {
                            parent.mousedown().click();
                        }, 10);

                    }

                    if (typeof(opts.close) == 'function') {
                        $.proxy(opts.close, self[0])();
                    } else if (opts.destroyOnClose) {
                        dialog.hide().remove();
                    }
                })
                .bind('totop', function() {
                    $(this).mousedown().find('.ui-button:first').focus().end().find(':text:first').focus();
                    $(this).data('modal') && overlay.elfinderoverlay('show');
                    overlay.zIndex($(this).zIndex());
                })
                .data({ modal: opts.modal }),
            maxZIndex = function() {
                var z = parent.zIndex() + 10;
                parent.find('.' + cldialog + ':visible').each(function() {
                    var _z;
                    if (this != dialog[0]) {
                        _z = $(this).zIndex();
                        if (_z > z) {
                            z = _z;
                        }
                    }
                });
                return z;
            },
            top;

        if (!opts.position) {
            top = parseInt((parent.height() - dialog.outerHeight()) / 2 - 42);
            opts.position = {
                top: (top > 0 ? top : 0) + 'px',
                left: parseInt((parent.width() - dialog.outerWidth()) / 2) + 'px'
            };
        }

        dialog.css(opts.position);

        if (opts.closeOnEscape) {
            $(document).bind('keyup.' + id, function(e) {
                if (e.keyCode == $.ui.keyCode.ESCAPE && dialog.is('.' + clactive)) {
                    self.elfinderdialog('close');
                    $(document).unbind('keyup.' + id);
                }
            });
        }
        dialog.prepend(
            $('<div class="ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix">' + opts.title + '</div>')
            .prepend($('<a href="#" class="ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"/></a>')
                .mousedown(function(e) {
                    e.preventDefault();
                    self.elfinderdialog('close');
                }))
        );


        $.each(opts.buttons, function(name, cb) {
            var button = $('<button type="button" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only"><span class="ui-button-text">' + name + '</span></button>')
                .click($.proxy(cb, self[0]))
                .hover(function(e) { $(this)[e.type == 'mouseenter' ? 'focus' : 'blur'](); })
                .focus(function() { $(this).addClass(clhover); })
                .blur(function() { $(this).removeClass(clhover); })
                .keydown(function(e) {
                    var next;

                    if (e.keyCode == $.ui.keyCode.ENTER) {
                        $(this).click();
                    } else if (e.keyCode == $.ui.keyCode.TAB) {
                        next = $(this).next('.ui-button');
                        next.length ? next.focus() : $(this).parent().children('.ui-button:first').focus();
                    }
                });
            buttonset.append(button);
        });
        buttonset.children().length && dialog.append(buttonpane);
        if (opts.resizable && $.fn.resizable) {
            dialog.resizable({
                minWidth: opts.minWidth,
                minHeight: opts.minHeight,
                alsoResize: this
            });
        }

        typeof(opts.create) == 'function' && $.proxy(opts.create, this)();

        opts.autoOpen && self.elfinderdialog('open');

    });

    return this;
};
$.fn.elfinderdialog.defaults = {
    cssClass: '',
    title: '',
    modal: false,
    resizable: true,
    autoOpen: true,
    closeOnEscape: true,
    destroyOnClose: false,
    buttons: {},
    position: null,
    width: 320,
    height: 'auto',
    minWidth: 200,
    minHeight: 110
};
"use strict";
/**
 * @class  elFinder folders tree
 *
 * @author Dmitry (dio) Levashov
 **/
$.fn.elfindertree = function(fm, opts) {
    var treeclass = fm.res('class', 'tree');

    this.not('.' + treeclass).each(function() {

        var c = 'class',

            /**
			 * Root directory class name
			 *
			 * @type String
			 */
            root = fm.res(c, 'treeroot'),

            /**
			 * Open root dir if not opened yet
			 *
			 * @type Boolean
			 */
            openRoot = opts.openRootOnLoad,

            /**
			 * Subtree class name
			 *
			 * @type String
			 */
            subtree = fm.res(c, 'navsubtree'),

            /**
			 * Directory class name
			 *
			 * @type String
			 */
            navdir = fm.res(c, 'treedir'),

            /**
			 * Collapsed arrow class name
			 *
			 * @type String
			 */
            collapsed = fm.res(c, 'navcollapse'),

            /**
			 * Expanded arrow class name
			 *
			 * @type String
			 */
            expanded = fm.res(c, 'navexpand'),

            /**
			 * Class name to mark arrow for directory with already loaded children
			 *
			 * @type String
			 */
            loaded = 'elfinder-subtree-loaded',

            /**
			 * Arraw class name
			 *
			 * @type String
			 */
            arrow = fm.res(c, 'navarrow'),

            /**
			 * Current directory class name
			 *
			 * @type String
			 */
            active = fm.res(c, 'active'),

            /**
			 * Droppable dirs dropover class
			 *
			 * @type String
			 */
            dropover = fm.res(c, 'adroppable'),

            /**
			 * Hover class name
			 *
			 * @type String
			 */
            hover = fm.res(c, 'hover'),

            /**
			 * Disabled dir class name
			 *
			 * @type String
			 */
            disabled = fm.res(c, 'disabled'),

            /**
			 * Draggable dir class name
			 *
			 * @type String
			 */
            draggable = fm.res(c, 'draggable'),

            /**
			 * Droppable dir  class name
			 *
			 * @type String
			 */
            droppable = fm.res(c, 'droppable'),

            insideNavbar = function(x) {
                var left = navbar.offset().left;

                return left <= x && x <= left + navbar.width();
            },

            drop = fm.droppable.drop,

            /**
			 * Droppable options
			 *
			 * @type Object
			 */
            droppableopts = $.extend(true, {}, fm.droppable, {
                // show subfolders on dropover
                over: function(e) {
                    var link = $(this),
                        cl = hover + ' ' + dropover;

                    if (insideNavbar(e.clientX)) {
                        link.addClass(cl);
                        if (link.is('.' + collapsed + ':not(.' + expanded + ')')) {
                            setTimeout(function() {
                                link.is('.' + dropover) && link.children('.' + arrow).click();
                            }, 500);
                        }
                    } else {
                        link.removeClass(cl);
                    }
                },
                out: function() { $(this).removeClass(hover + ' ' + dropover); },
                drop: function(e, ui) { insideNavbar(e.clientX) && drop.call(this, e, ui); }
            }),

            spinner = $(fm.res('tpl', 'navspinner')),

            /**
			 * Directory html template
			 *
			 * @type String
			 */
            tpl = fm.res('tpl', 'navdir'),

            /**
			 * Permissions marker html template
			 *
			 * @type String
			 */
            ptpl = fm.res('tpl', 'perms'),

            /**
			 * Symlink marker html template
			 *
			 * @type String
			 */
            stpl = fm.res('tpl', 'symlink'),

            /**
			 * Html template replacement methods
			 *
			 * @type Object
			 */
            replace = {
                id: function(dir) { return fm.navHash2Id(dir.hash); },
                cssclass: function(dir) { return (dir.phash ? '' : root) + ' ' + navdir + ' ' + fm.perms2class(dir) + ' ' + (dir.dirs && !dir.link ? collapsed : ''); },
                permissions: function(dir) { return !dir.read || !dir.write ? ptpl : ''; },
                symlink: function(dir) { return dir.alias ? stpl : ''; }
            },

            /**
			 * Return html for given dir
			 *
			 * @param  Object  directory
			 * @return String
			 */
            itemhtml = function(dir) {
                dir.name = fm.escape(dir.i18 || dir.name);

                return tpl.replace(/(?:\{([a-z]+)\})/ig, function(m, key) {
                    return dir[key] || (replace[key] ? replace[key](dir) : '');
                });
            },

            /**
			 * Return only dirs from files list
			 *
			 * @param  Array  files list
			 * @return Array
			 */
            filter = function(files) {
                return $.map(files || [], function(f) { return f.mime == 'directory' ? f : null; });
            },

            /**
			 * Find parent subtree for required directory
			 *
			 * @param  String  dir hash
			 * @return jQuery
			 */
            findSubtree = function(hash) {
                return hash ? tree.find('#' + fm.navHash2Id(hash)).next('.' + subtree) : tree;
            },

            /**
			 * Find directory (wrapper) in required node
			 * before which we can insert new directory
			 *
			 * @param  jQuery  parent directory
			 * @param  Object  new directory
			 * @return jQuery
			 */
            findSibling = function(subtree, dir) {
                var node = subtree.children(':first'),
                    info;

                while (node.length) {
                    info = fm.file(fm.navId2Hash(node.children('[id]').attr('id')));

                    if ((info = fm.file(fm.navId2Hash(node.children('[id]').attr('id'))))
                        && dir.name.toLowerCase().localeCompare(info.name.toLowerCase()) < 0) {
                        return node;
                    }
                    node = node.next();
                }
                return $('');
            },

            /**
			 * Add new dirs in tree
			 *
			 * @param  Array  dirs list
			 * @return void
			 */
            updateTree = function(dirs) {
                var length = dirs.length,
                    orphans = [],
                    i = dirs.length,
                    dir,
                    html,
                    parent,
                    sibling;
                var firstVol = true; // check for netmount volume
                while (i--) {
                    dir = dirs[i];

                    if (tree.find('#' + fm.navHash2Id(dir.hash)).length) {
                        continue;
                    }

                    if ((parent = findSubtree(dir.phash)).length) {
                        html = itemhtml(dir);
                        if (dir.phash && (sibling = findSibling(parent, dir)).length) {
                            sibling.before(html);
                        } else {
                            parent[firstVol || dir.phash ? 'append' : 'prepend'](html);
                            firstVol = false;
                        }
                    } else {
                        orphans.push(dir);
                    }
                }

                if (orphans.length && orphans.length < length) {
                    return updateTree(orphans);
                }
                $('.elfinder-cwd').click();
                setTimeout(function() {
                    updateDroppable();
                }, 10);

            },

            /**
			 * Mark current directory as active
			 * If current directory is not in tree - load it and its parents
			 *
			 * @param {Boolean} do not recursive call
			 * @return void
			 */
            sync = function(stopRec) {
                var cwd = fm.cwd().hash,
                    current = tree.find('#' + fm.navHash2Id(cwd)),
                    rootNode,
                    dir;

                if (openRoot) {
                    rootNode = tree.find('#' + fm.navHash2Id(fm.root()));
                    rootNode.is('.' + loaded) && rootNode.addClass(expanded).next('.' + subtree).show();
                    openRoot = false;
                }

                if (!current.is('.' + active)) {
                    tree.find('.' + navdir + '.' + active).removeClass(active);
                    current.addClass(active);
                }

                if (opts.syncTree) {
                    if (current.length) {
                        return current.parentsUntil('.' + root).filter('.' + subtree).show().prev('.' + navdir).addClass(expanded);
                    }
                    if (fm.newAPI) {
                        dir = fm.file(cwd);
                        if (dir && dir.phash && tree.find('#' + fm.navHash2Id(dir.phash)).length) {
                            updateTree([dir]);
                            return sync();
                        }
                        fm.request({
                                data: { cmd: 'parents', target: cwd },
                                preventFail: true
                            })
                            .done(function(data) {
                                var dirs = filter(data.tree);
                                updateTree(dirs);
                                updateArrows(dirs, loaded);
                                cwd == fm.cwd().hash && sync(true);
                            });
                    }

                }
            },

            /**
			 * Make writable and not root dirs droppable
			 *
			 * @return void
			 */
            updateDroppable = function() {
                tree.find('.' + navdir + ':not(.' + droppable + ',.elfinder-ro,.elfinder-na)').droppable(droppableopts);
            },

            /**
			 * Check required folders for subfolders and update arrow classes
			 *
			 * @param  Array  folders to check
			 * @param  String css class 
			 * @return void
			 */
            updateArrows = function(dirs, cls) {
                var sel = cls == loaded
                    ? '.' + collapsed + ':not(.' + loaded + ')'
                    : ':not(.' + collapsed + ')';


                //tree.find('.'+subtree+':has(*)').prev(':not(.'+collapsed+')').addClass(collapsed)

                $.each(dirs, function(i, dir) {
                    tree.find('#' + fm.navHash2Id(dir.phash) + sel)
                        .filter(function() { return $(this).next('.' + subtree).children().length > 0; })
                        .addClass(cls);
                });
            },


/**
			 * Navigation tree
			 *
			 * @type JQuery
			 */
            tree = $(this).addClass(treeclass)
                // make dirs draggable and toggle hover class
                .delegate('.' + navdir, 'hover', function(e) {
                    var link = $(this),
                        enter = e.type == 'mouseenter';

                    if (!link.is('.' + dropover + ' ,.' + disabled)) {
                        enter && !link.is('.' + root + ',.' + draggable + ',.elfinder-na,.elfinder-wo') && link.draggable(fm.draggable);
                        link.toggleClass(hover, enter);
                    }
                })
                // add/remove dropover css class
                .delegate('.' + navdir, 'dropover dropout drop', function(e) {
                    $(this)[e.type == 'dropover' ? 'addClass' : 'removeClass'](dropover + ' ' + hover);
                })
                // open dir or open subfolders in tree
                .delegate('.' + navdir, 'click', function(e) {
                    var link = $(this),
                        hash = fm.navId2Hash(link.attr('id')),
                        file = fm.file(hash);

                    fm.trigger('searchend');

                    if (hash != fm.cwd().hash && !link.is('.' + disabled)) {
                        fm.exec('open', file.thash || hash);
                    } else if (link.is('.' + collapsed)) {
                        link.children('.' + arrow).click();
                    }
                })
                // toggle subfolders in tree
                .delegate('.' + navdir + '.' + collapsed + ' .' + arrow, 'click', function(e) {
                    var arrow = $(this),
                        link = arrow.parent('.' + navdir),
                        stree = link.next('.' + subtree);

                    e.stopPropagation();

                    if (link.is('.' + loaded)) {
                        link.toggleClass(expanded);
                        stree.slideToggle();
                    } else {
                        spinner.insertBefore(arrow);
                        link.removeClass(collapsed);

                        fm.request({ cmd: 'tree', target: fm.navId2Hash(link.attr('id')) })
                            .done(function(data) {
                                updateTree(filter(data.tree));

                                if (stree.children().length) {
                                    link.addClass(collapsed + ' ' + expanded);
                                    stree.slideDown();
                                }
                                sync();
                            })
                            .always(function(data) {
                                spinner.remove();
                                link.addClass(loaded);
                            });
                    }
                })
                .delegate('.' + navdir, 'contextmenu', function(e) {
                    e.preventDefault();

                    fm.trigger('contextmenu', {
                        'type': 'navbar',
                        'targets': [fm.navId2Hash($(this).attr('id'))],
                        'x': e.clientX,
                        'y': e.clientY
                    });
                }),
            // move tree into navbar
            navbar = fm.getUI('navbar').append(tree).show();

        fm.open(function(e) {
                var data = e.data,
                    dirs = filter(data.files);

                data.init && tree.empty();

                if (dirs.length) {
                    updateTree(dirs);
                    updateArrows(dirs, loaded);
                }
                sync();
            })
            // add new dirs
            .add(function(e) {
                var dirs = filter(e.data.added);

                if (dirs.length) {
                    updateTree(dirs);
                    updateArrows(dirs, collapsed);
                }
            })
            // update changed dirs
            .change(function(e) {
                var dirs = filter(e.data.changed),
                    l = dirs.length,
                    dir,
                    node,
                    tmp,
                    realParent,
                    reqParent,
                    realSibling,
                    reqSibling,
                    isExpanded,
                    isLoaded;

                while (l--) {
                    dir = dirs[l];
                    if ((node = tree.find('#' + fm.navHash2Id(dir.hash))).length) {
                        if (dir.phash) {
                            realParent = node.closest('.' + subtree);
                            reqParent = findSubtree(dir.phash);
                            realSibling = node.parent().next();
                            reqSibling = findSibling(reqParent, dir);

                            if (!reqParent.length) {
                                continue;
                            }

                            if (reqParent[0] !== realParent[0] || realSibling.get(0) !== reqSibling.get(0)) {
                                reqSibling.length ? reqSibling.before(node) : reqParent.append(node);
                            }
                        }
                        isExpanded = node.is('.' + expanded);
                        isLoaded = node.is('.' + loaded);
                        tmp = $(itemhtml(dir));
                        node.replaceWith(tmp.children('.' + navdir));

                        if (dir.dirs
                            && (isExpanded || isLoaded)
                            && (node = tree.find('#' + fm.navHash2Id(dir.hash)))
                            && node.next('.' + subtree).children().length) {
                            isExpanded && node.addClass(expanded);
                            isLoaded && node.addClass(loaded);
                        }
                    }
                }

                sync();
                updateDroppable();
            })
            // remove dirs
            .remove(function(e) {
                var dirs = e.data.removed,
                    l = dirs.length,
                    node,
                    stree;

                while (l--) {
                    if ((node = tree.find('#' + fm.navHash2Id(dirs[l]))).length) {
                        stree = node.closest('.' + subtree);
                        node.parent().detach();
                        if (!stree.children().length) {
                            stree.hide().prev('.' + navdir).removeClass(collapsed + ' ' + expanded + ' ' + loaded);
                        }
                    }
                }
            })
            // add/remove active class for current dir
            .bind('search searchend', function(e) {
                tree.find('#' + fm.navHash2Id(fm.cwd().hash))[e.type == 'search' ? 'removeClass' : 'addClass'](active);
            })
            // lock/unlock dirs while moving
            .bind('lockfiles unlockfiles', function(e) {
                var lock = e.type == 'lockfiles',
                    act = lock ? 'disable' : 'enable',
                    dirs = $.map(e.data.files || [], function(h) {
                        var dir = fm.file(h);
                        return dir && dir.mime == 'directory' ? h : null;
                    });
                $.each(dirs, function(i, hash) {
                    var dir = tree.find('#' + fm.navHash2Id(hash));

                    if (dir.length) {
                        dir.is('.' + draggable) && dir.draggable(act);
                        dir.is('.' + droppable) && dir.droppable(active);
                        dir[lock ? 'addClass' : 'removeClass'](disabled);
                    }
                });
            });
    });

    return this;
};
"use strict";
/**
 * elFinder current working directory ui.
 *
 * @author Dmitry (dio) Levashov
 **/
$.fn.elfindercwd = function(fm, options) {

    this.not('.elfinder-cwd').each(function() {
        // fm.time('cwdLoad');

        var
            list = fm.viewType == 'list',

            blockMultiSelection = location.href.indexOf('multi_selection=false') != -1,

            undef = 'undefined',
            /**
			 * Select event full name
			 *
			 * @type String
			 **/
            evtSelect = 'select.' + fm.namespace,

            /**
			 * Unselect event full name
			 *
			 * @type String
			 **/
            evtUnselect = 'unselect.' + fm.namespace,

            /**
			 * Disable event full name
			 *
			 * @type String
			 **/
            evtDisable = 'disable.' + fm.namespace,

            /**
			 * Disable event full name
			 *
			 * @type String
			 **/
            evtEnable = 'enable.' + fm.namespace,

            c = 'class',
            /**
			 * File css class
			 *
			 * @type String
			 **/
            clFile = fm.res(c, 'cwdfile'),

            /**
			 * Selected css class
			 *
			 * @type String
			 **/
            fileSelector = '.' + clFile,

            /**
			 * Selected css class
			 *
			 * @type String
			 **/
            clSelected = 'ui-selected',

            /**
			 * Disabled css class
			 *
			 * @type String
			 **/
            clDisabled = fm.res(c, 'disabled'),

            /**
			 * Draggable css class
			 *
			 * @type String
			 **/
            clDraggable = fm.res(c, 'draggable'),

            /**
			 * Droppable css class
			 *
			 * @type String
			 **/
            clDroppable = fm.res(c, 'droppable'),

            /**
			 * Hover css class
			 *
			 * @type String
			 **/
            clHover = fm.res(c, 'hover'),

            /**
			 * Hover css class
			 *
			 * @type String
			 **/
            clDropActive = fm.res(c, 'adroppable'),

            /**
			 * Css class for temporary nodes (for mkdir/mkfile) commands
			 *
			 * @type String
			 **/
            clTmp = clFile + '-tmp',

            /**
			 * Number of thumbnails to load in one request (new api only)
			 *
			 * @type Number
			 **/
            tmbNum = fm.options.loadTmbs > 0 ? fm.options.loadTmbs : 5,

            /**
			 * Current search query.
			 *
			 * @type String
			 */
            query = '',

            lastSearch = [],

            lastFilter = [],

            customColsBuild = function() {
                var customCols = '';
                var columns = fm.options.uiOptions.cwd.listView.columns;
                for (var i = 0; i < columns.length; i++) {
                    customCols += '<td class="' + columns[i] + '" title="{' + columns[i] + '}">{' + columns[i] + '}</td>';
                }
                return customCols;
            },

            checkboxforblock = '<span class="button-checkbox bootstrap-checkbox" style="{chbstyle}">' +
                '<input type="checkbox" class="{class}" autocomplete="off" style="display: none;">' +
                '<span class="icon cb-icon-check square" style="display: none;"></span>' +
                '<span class="icon cb-icon-check-empty square"></span>' +
                '</span>',
            checkbox = '<span class="button-checkbox bootstrap-checkbox" style="{chbstyle}">' +
                '<input type="checkbox" class="{class}" autocomplete="off" style="display: none;">' +
                '<span class="icon cb-icon-check square" style="display: none;"></span>' +
                '<span class="icon cb-icon-check-empty square"></span>' +
                '</span>',
            CBbody = checkbox.replace('{class}', ''),
            CBhead = blockMultiSelection ? checkbox.replace('{class}', 'selectAllChB').replace('{chbstyle}', 'display: none;') : checkbox.replace('{class}', 'selectAllChB').replace('{chbstyle}', ''),

            CBSquareBody = checkboxforblock.replace('{class}', ''),
            CBSquareHead = blockMultiSelection ? checkboxforblock.replace('{class}', 'selectAllChB').replace('{chbstyle}', 'display: none;') : checkboxforblock.replace('{class}', 'selectAllChB').replace('{chbstyle}', 'display: block;'),
            selectAllBlock = '<table class="icons-table thead"><thead><tr class="ui-state-default"><td>' + CBSquareHead + ' <span class="selectalltext">' + fm.i18n('selectall') + '</span></td></tr></thead></table>',

            change = function(checkbox) {
                if ($(checkbox).is('input[type="checkbox"]')) {
                    var check = $(checkbox).parent().find(".cb-icon-check");
                    var empty = $(checkbox).parent().find(".cb-icon-check-empty");
                    if (!checkbox.is(':checked')) {
                        check.hide();
                        empty.show();
                    } else {
                        check.show();
                        empty.hide();
                    }
                }
            },

            getTarget = function(obj) {
                var targ;
                var e = obj;
                if (e.target) targ = e.target;
                else if (e.srcElement) targ = e.srcElement;
                if (targ.nodeType == 3) // defeat Safari bug
                    targ = targ.parentNode;
                return targ;
            },

            /**
			 * File templates
			 *
			 * @type Object
			 **/
            templates = {
                icon: '<div id="{hash}" class="' + clFile + ' {permsclass} {dirclass} ui-corner-all" title="{tooltip}">' + CBSquareBody + '<div class="elfinder-cwd-file-wrapper ui-corner-all"><div class="elfinder-cwd-icon {mime} ui-corner-all" unselectable="on" {style}/>{marker}</div><div class="elfinder-cwd-filename" title="{name}">{name}</div></div>',
                //row: '<tr id="{hash}" class="' + clFile + ' {permsclass} {dirclass}" title="{tooltip}"><td><div class="elfinder-cwd-file-wrapper"><span class="elfinder-cwd-icon {mime}"/>{marker}<span class="elfinder-cwd-filename">{name}</span></div></td><td>{perms}</td><td>{date}</td><td>{size}</td><td>{kind}</td></tr>'
                row: '<tr id="{hash}" class="' + clFile + ' {permsclass} {dirclass}" ><td class="chb" >' + CBbody + '</td><td class="name" title="{tooltip}"><div class="elfinder-cwd-file-wrapper"><span class="elfinder-cwd-icon {mime}"/>{marker}<span class="elfinder-cwd-filename">{name}</span></div></td>' + customColsBuild() + '</tr>'
            },

            permsTpl = fm.res('tpl', 'perms'),

            symlinkTpl = fm.res('tpl', 'symlink'),

            /**
			 * Template placeholders replacement rules
			 *
			 * @type Object
			 **/
            replacement = {
                permsclass: function(f) {
                    return fm.perms2class(f);
                },
                perms: function(f) {
                    return fm.formatPermissions(f);
                },
                dirclass: function(f) {
                    return f.mime == 'directory' ? 'directory' : '';
                },
                mime: function(f) {
                    return fm.mime2class(f.mime);
                },
                size: function(f) {
                    return fm.formatSize(f.size);
                },
                date: function(f) {
                    return fm.formatDate(f);
                },
                kind: function(f) {
                    return fm.mime2kind(f);
                },
                marker: function(f) {
                    return (f.alias || f.mime == 'symlink-broken' ? symlinkTpl : '') + (!f.read || !f.write ? permsTpl : '');
                },
                tooltip: function(f) {
                    //var title = fm.formatDate(f) + (f.size > 0 ? ' ('+fm.formatSize(f.size)+')' : '');
                    var title = f.name + (f.size > 0 ? ' (' + fm.formatSize(f.size) + ')' : '');
                    return f.tooltip ? fm.escape(f.tooltip).replace(/"/g, '&quot;').replace(/\r/g, '&#13;') + '&#13;' + title : title;
                },
                styleforfolder: function(f) {
                    return f.mime == 'directory' ? 'display:none;' : '';
                },
                chbstyle: function(f) {
                    return fm.isModal && f.mime == 'directory' ? 'display:none;' : '';
                },
            },

            /**
			 * Return file html
			 *
			 * @param  Object  file info
			 * @return String
			 **/
            itemhtml = function(f) {
                f.name = fm.escape(f.name);
                return templates[list ? 'row' : 'icon']
                    .replace(/\{([a-z]+)\}/g, function(s, e) {
                        return replacement[e] ? replacement[e](f) : (f[e] ? f[e] : '');
                    });
            },

            /**
			 * Flag. Required for msie to avoid unselect files on dragstart
			 *
			 * @type Boolean
			 **/
            selectLock = false,

            /**
			 * Move selection to prev/next file
			 *
			 * @param String  move direction
			 * @param Boolean append to current selection
			 * @return void
			 * @rise select			
			 */
            select = function(keyCode, append) {
                var code = $.ui.keyCode,
                    prev = keyCode == code.LEFT || keyCode == code.UP,
                    sel = cwd.find('[id].' + clSelected),
                    selector = prev ? 'first:' : 'last',
                    s,
                    n,
                    sib,
                    top,
                    left;

                function sibling(n, direction) {
                    return n[direction + 'All']('[id]:not(.' + clDisabled + '):not(.elfinder-cwd-parent):first');
                }

                if (sel.length) {
                    s = sel.filter(prev ? ':first' : ':last');
                    sib = sibling(s, prev ? 'prev' : 'next');

                    if (!sib.length) {
                        // there is no sibling on required side - do not move selection
                        n = s;
                    } else if (list || keyCode == code.LEFT || keyCode == code.RIGHT) {
                        // find real prevoius file
                        n = sib;
                    } else {
                        // find up/down side file in icons view
                        top = s.position().top;
                        left = s.position().left;

                        n = s;
                        if (prev) {
                            do {
                                n = n.prev('[id]');
                            } while (n.length && !(n.position().top < top && n.position().left <= left));

                            if (n.is('.' + clDisabled)) {
                                n = sibling(n, 'next');
                            }
                        } else {
                            do {
                                n = n.next('[id]');
                            } while (n.length && !(n.position().top > top && n.position().left >= left));

                            if (n.is('.' + clDisabled)) {
                                n = sibling(n, 'prev');
                            }
                            // there is row before last one - select last file
                            if (!n.length) {
                                sib = cwd.find('[id]:not(.' + clDisabled + '):last');
                                if (sib.position().top > top) {
                                    n = sib;
                                }
                            }
                        }
                    }
                    // !append && unselectAll();
                } else {
                    // there are no selected file - select first/last one
                    n = cwd.find('[id]:not(.' + clDisabled + '):not(.elfinder-cwd-parent):' + (prev ? 'last' : 'first'));
                }

                if (n && n.length && !n.is('.elfinder-cwd-parent')) {
                    if (append) {
                        // append new files to selected
                        n = s.add(s[prev ? 'prevUntil' : 'nextUntil']('#' + n.attr('id'))).add(n);
                    } else {
                        // unselect selected files
                        sel.trigger(evtUnselect);
                    }
                    // select file(s)
                    n.trigger(evtSelect);
                    // set its visible
                    scrollToView(n.filter(prev ? ':first' : ':last'));
                    // update cache/view
                    trigger();
                }
            },

            selectedFiles = [],

            selectFile = function(hash) {
                cwd.find('#' + hash).trigger(evtSelect);
            },

            selectAll = function() {
                if (blockMultiSelection) return;
                var phash = fm.cwd().hash;
                cwd.parent().find('input[type="checkbox"].selectAllChB').prop("checked", true);
                change(cwd.parent().find('input[type="checkbox"].selectAllChB'));
                cwd.find('[id]:not(.' + clSelected + '):not(.elfinder-cwd-parent)').trigger(evtSelect);
                selectedFiles = $.map(fm.files(), function(f) {
                    return fm.isModal && f.mime == 'directory' ? null : f.phash == phash ? f.hash : null;
                });
                trigger();
            },

            /**
			 * Unselect all files
			 *
			 * @return void
			 */
            unselectAll = function() {
                selectedFiles = [];
                cwd.parent().find('input[type="checkbox"].selectAllChB').prop("checked", false);
                change(cwd.parent().find('input[type="checkbox"].selectAllChB'));
                cwd.find('[id].' + clSelected).trigger(evtUnselect);
                trigger();
            },

            /**
			 * Return selected files hashes list
			 *
			 * @return Array
			 */
            selected = function() {
                return selectedFiles;
            },

            /**
			 * Fire elfinder "select" event and pass selected files to it
			 *
			 * @return void
			 */
            trigger = function() {
                fm.trigger('select', { selected: selectedFiles });
            },

            /**
			 * Scroll file to set it visible
			 *
			 * @param DOMElement  file/dir node
			 * @return void
			 */
            scrollToView = function(o) {
                var ftop = o.position().top,
                    fheight = o.outerHeight(true),
                    wtop = wrapper.scrollTop(),
                    wheight = wrapper.innerHeight();

                if (ftop + fheight > wtop + wheight) {
                    wrapper.scrollTop(parseInt(ftop + fheight - wheight));
                } else if (ftop < wtop) {
                    wrapper.scrollTop(ftop);
                }
            },

            /**
			 * Files we get from server but not show yet
			 *
			 * @type Array
			 **/
            buffer = [],

            /**
			 * Return index of elements with required hash in buffer 
			 *
			 * @param String  file hash
			 * @return Number
			 */
            index = function(hash) {
                var l = buffer.length;

                while (l--) {
                    if (buffer[l].hash == hash) {
                        return l;
                    }
                }
                return -1;
            },

            /**
			 * Scroll event name
			 *
			 * @type String
			 **/
            scrollEvent = 'scroll.' + fm.namespace,

            /**
			 * Cwd scroll event handler.
			 * Lazy load - append to cwd not shown files
			 *
			 * @return void
			 */
            render = function() {
                var html = [],
                    dirs = false,
                    ltmb = [],
                    atmb = {},
                    last = cwd.find('[id]:last'),
                    top = !last.length,
                    place = list ? cwd.children('table').children('tbody') : cwd,
                    files;

                if (!buffer.length) {
                    return wrapper.unbind(scrollEvent);
                }

                while ((!last.length || last.position().top <= wrapper.height() + wrapper.scrollTop() + fm.options.showThreshold)
                    && (files = buffer.splice(0, fm.options.showFiles)).length) {

                    html = $.map(files, function(f) {
                        if (f.hash && f.name) {
                            if (f.mime == 'directory') {
                                dirs = true;
                            }
                            if (f.tmb) {
                                f.tmb === 1 ? ltmb.push(f.hash) : (atmb[f.hash] = f.tmb);
                            }
                            return itemhtml(f);
                        }
                        return null;
                    });

                    place.append(html.join(''));
                    last = cwd.find('[id]:last');
                    // scroll top on dir load to avoid scroll after page reload
                    top && cwd.scrollTop(0);

                }

                // load/attach thumbnails
                attachThumbnails(atmb);
                ltmb.length && loadThumbnails(ltmb);

                // make directory droppable
                dirs && makeDroppable();

                if (selectedFiles.length) {
                    place.find('[id]:not(.' + clSelected + '):not(.elfinder-cwd-parent)').each(function() {
                        var id = this.id;

                        $.inArray(id, selectedFiles) !== -1 && $(this).trigger(evtSelect);
                    });
                }

            },

            /**
			 * Droppable options for cwd.
			 * Do not add class on childs file over
			 *
			 * @type Object
			 */
            droppable = $.extend({}, fm.droppable, {
                over: function(e, ui) {
                    var hash = fm.cwd().hash;
                    $.each(ui.helper.data('files'), function(i, h) {
                        if (fm.file(h).phash == hash) {
                            cwd.removeClass(clDropActive);
                            return false;
                        }
                    });
                }
            }),

            /**
			 * Make directory droppable
			 *
			 * @return void
			 */
            makeDroppable = function() {
                setTimeout(function() {
                    cwd.find('.directory:not(.' + clDroppable + ',.elfinder-na,.elfinder-ro)').droppable(fm.droppable);
                }, 20);
            },

            /**
			 * Preload required thumbnails and on load add css to files.
			 * Return false if required file is not visible yet (in buffer) -
			 * required for old api to stop loading thumbnails.
			 *
			 * @param  Object  file hash -> thumbnail map
			 * @return Boolean
			 */
            attachThumbnails = function(images) {
                var url = fm.option('tmbUrl'),
                    ret = true,
                    ndx;

                $.each(images, function(hash, tmb) {
                    var node = cwd.find('#' + hash);

                    if (node.length) {

                        (function(node, tmb) {
                            $('<img/>')
                                .load(function() { node.find('.elfinder-cwd-icon').css('background', "url('" + tmb + "') center center no-repeat"); })
                                .attr('src', tmb);
                        })(node, url + tmb);
                    } else {
                        ret = false;
                        if ((ndx = index(hash)) != -1) {
                            buffer[ndx].tmb = tmb;
                        }
                    }
                });
                return ret;
            },

            /**
			 * Load thumbnails from backend.
			 *
			 * @param  Array|Boolean  files hashes list for new api | true for old api
			 * @return void
			 */
            loadThumbnails = function(files) {
                var tmbs = [];

                if (fm.oldAPI) {
                    fm.request({
                            data: { cmd: 'tmb', current: fm.cwd().hash },
                            preventFail: true
                        })
                        .done(function(data) {
                            if (attachThumbnails(data.images || []) && data.tmb) {
                                loadThumbnails();
                            }
                        });
                    return;
                }

                tmbs = tmbs = files.splice(0, tmbNum);
                if (tmbs.length) {
                    fm.request({
                            data: { cmd: 'tmb', targets: tmbs },
                            preventFail: true
                        })
                        .done(function(data) {
                            if (attachThumbnails(data.images || [])) {
                                loadThumbnails(files);
                            }
                        });
                }
            },

            /**
			 * Add new files to cwd/buffer
			 *
			 * @param  Array  new files
			 * @return void
			 */
            add = function(files) {
                var place = list ? cwd.find('tbody') : cwd,
                    l = files.length,
                    ltmb = [],
                    atmb = {},
                    dirs = false,
                    findNode = function(file) {
                        var pointer = cwd.find('[id]:first'), file2;

                        while (pointer.length) {
                            file2 = fm.file(pointer.attr('id'));
                            if (!pointer.is('.elfinder-cwd-parent') && file2 && fm.compare(file, file2) < 0) {
                                return pointer;
                            }
                            pointer = pointer.next('[id]');
                        }
                    },
                    findIndex = function(file) {
                        var l = buffer.length, i;

                        for (i = 0; i < l; i++) {
                            if (fm.compare(file, buffer[i]) < 0) {
                                return i;
                            }
                        }
                        return l || -1;
                    },
                    file,
                    hash,
                    node,
                    ndx;


                while (l--) {
                    file = files[l];
                    hash = file.hash;

                    if (cwd.find('#' + hash).length) {
                        continue;
                    }

                    if ((node = findNode(file)) && node.length) {
                        node.before(itemhtml(file));
                    } else if ((ndx = findIndex(file)) >= 0) {
                        buffer.splice(ndx, 0, file);
                    } else {
                        place.append(itemhtml(file));
                    }

                    if (cwd.find('#' + hash).length) {
                        if (file.mime == 'directory') {
                            dirs = true;
                        } else if (file.tmb) {
                            file.tmb === 1 ? ltmb.push(hash) : (atmb[hash] = file.tmb);
                        }
                    }
                }

                checkCwdEmpty();

                attachThumbnails(atmb);
                ltmb.length && loadThumbnails(ltmb);
                dirs && makeDroppable();
            },

            /**
			 * Remove files from cwd/buffer
			 *
			 * @param  Array  files hashes
			 * @return void
			 */
            remove = function(files) {
                var l = files.length, hash, n, ndx;

                while (l--) {
                    hash = files[l];
                    if ((n = cwd.find('#' + hash)).length) {
                        try {
                            n.detach();
                        } catch (e) {
                            fm.debug('error', e);
                        }
                    } else if ((ndx = index(hash)) != -1) {
                        buffer.splice(ndx, 1);
                    }
                }

                checkCwdEmpty();
            },

            msg = {
                name: fm.i18n('name'),
                perm: fm.i18n('perms'),
                mod: fm.i18n('modify'),
                size: fm.i18n('size'),
                kind: fm.i18n('kind'),
                date: fm.i18n('date')
            },

            getSpanForSort = function(name) {
                var span = '<span class="' + name + ' caret up"></span>';
                if (fm.sortType == name) {
                    if (fm.sortOrder == "asc") {
                        span = span.replace(' up', '');
                    }
                } else {
                    span = span.replace(' caret', '').replace(' up', '');
                }
                return span;
            },

            customColsNameBuild = function() {
                var customColsName = '';
                var columns = fm.options.uiOptions.cwd.listView.columns;
                for (var i = 0; i < columns.length; i++) {

                    var span = getSpanForSort(columns[i]);
                    var td = '<td class="' + columns[i] + '">';
                    if (fm.options.uiOptions.cwd.listView.columnsCustomName[columns[i]] != null) {
                        customColsName += td + fm.options.uiOptions.cwd.listView.columnsCustomName[columns[i]] + span + '</td>';
                    } else {
                        customColsName += td + msg[columns[i]] + span + '</td>';
                    }
                }
                return customColsName;
            },

            checkCwdEmpty = function() {
                var com,
                    button,
                    link,
                    place = list ? cwd.children('table').children('tbody') : cwd;
                cwd.find(".emptyfolder").remove();
                cwd.find(".nofiles").remove();

                if ((com = fm._commands['filter'])) {
                    if (place.is(':empty') && com.filterState != 'All') {
                        var filterdiv = '<div class="nofiles aligncenter"><img src="../Content/elfinder/img/nofiles.png">' +
                            '<p>' + fm.i18n('notfilesforfilter') + '</p>' +
                            '</div>';
                        cwd.append(filterdiv);
                        return;
                    }
                }

                if (place.is(':empty')) {
                    var div = $('<div class="emptyfolder aligncenter">' +
                        '<img src="../Content/elfinder/img/emptyfolder.png">' +
                        '<h6>' + fm.i18n('cwdempty') + '</h6>' +
                        '<p>' + fm.i18n('cwdemptyhelp') + fm.i18n('or') + '</p>' +
                        '</div>');

                    if ((com = fm._commands['upload'])) {
                        button = 'elfinder' + com.options.ui;
                        if ($.fn[button]) link = $('<div/>')[button](com, true, fm.i18n('cwdselectfile'));
                        div.find("p").append(link);
                    }
                    var dir = fm.cwd();
                    if (dir.volumeId == "v0_" && dir.name == fm.i18n('receiveddirname')) div.find("p").remove();
                    cwd.append(div);
                    cwd.parent().children('table.thead').remove();
                } else {
                    if (!cwd.parent().children('table.thead').length) {
                        var thead = '<table class="thead"><thead><tr class="ui-state-default"><td class="chb">' + CBhead + '</td><td class="name">' + fm.i18n('name') + getSpanForSort('name') + '</td>' + customColsNameBuild() + '</tr></thead></table>';
                        if (list) {
                            cwd.parent().prepend(thead);
                        } else {
                            cwd.parent().prepend(selectAllBlock);
                            $(".selectalltext").bind('click', function(e) {
                                e.preventDefault();
                                e.stopPropagation();
                                var cb = $(getTarget(e)).parent().find('input[type="checkbox"].selectAllChB');
                                if (cb && cb.is(':checked')) {
                                    unselectAll();
                                } else {
                                    selectAll();
                                }
                            });
                        }
                    }
                }
            },

            /**
			 * Update directory content
			 *
			 * @param  Array  files
			 * @return void
			 */
            content = function(files, any) {
                var phash = fm.cwd().hash;
                unselectAll();
                try {
                    // to avoid problem with draggable
                    cwd.children('table,' + fileSelector).remove();
                    cwd.parent().children('table.thead').remove();
                    cwd.parent().children('table.thead').remove();
                } catch (e) {
                    cwd.html('');
                }

                cwd.removeClass('elfinder-cwd-view-icons elfinder-cwd-view-list')
                    .addClass('elfinder-cwd-view-' + (list ? 'list' : 'icons'));

                wrapper[list ? 'addClass' : 'removeClass']('elfinder-cwd-wrapper-list');

                //list && cwd.html('<table><thead><tr class="ui-state-default"><td >'+msg.name+'</td><td>'+msg.perm+'</td><td>'+msg.mod+'</td><td>'+msg.size+'</td><td>'+msg.kind+'</td></tr></thead><tbody/></table>');

                var thead = '<table class="thead"><thead><tr class="ui-state-default"><td class="chb">' + CBhead + '</td><td class="name">' + fm.i18n('name') + getSpanForSort('name') + '</td>' + customColsNameBuild() + '</tr></thead></table>';
                list && cwd.html('<table><tbody/></table>');
                list && cwd.parent().prepend(thead);

                buffer = $.map(files, function(f) { return any || f.phash == phash ? f : null; });
                if (!list && buffer.length > 0) {
                    cwd.parent().prepend(selectAllBlock);
                    $(".selectalltext").bind('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        var cb = $(getTarget(e)).parent().find('input[type="checkbox"].selectAllChB');
                        if (cb && cb.is(':checked')) {
                            unselectAll();
                        } else {
                            selectAll();
                        }
                    });
                }

                buffer = fm.sortFiles(buffer);

                //wrapper.bind(scrollEvent, render).trigger(scrollEvent);
                cwd.bind(scrollEvent, render).trigger(scrollEvent);

                checkCwdEmpty();

                phash = fm.cwd().phash;

                if (options.oldSchool && phash && !query) {
                    var parent = $.extend(true, {}, fm.file(phash), { name: '..', mime: 'directory' });
                    parent = $(itemhtml(parent))
                        .addClass('elfinder-cwd-parent')
                        .bind('mousedown click mouseup touchstart touchmove touchend dblclick mouseenter', function(e) {
                            //.bind('mousedown click mouseup dblclick mouseenter', function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                        })
                        .dblclick(function() {
                            fm.exec('open', this.id);
                        });

                    (list ? cwd.find('tbody') : cwd).prepend(parent);
                }

            },

            /**
			 * CWD node itself
			 *
			 * @type JQuery
			 **/
            cwd = $(this)
                .addClass('ui-helper-clearfix elfinder-cwd')
                .attr('unselectable', 'on')
                // fix ui.selectable bugs and add shift+click support 
                .delegate(fileSelector, 'click.' + fm.namespace, function(e) {
                    var p = this.id ? $(this) : $(this).parents('[id]:first'),
                        prev = p.prevAll('.' + clSelected + ':first'),
                        next = p.nextAll('.' + clSelected + ':first'),
                        pl = prev.length,
                        nl = next.length,
                        target = getTarget(e),
                        sib;

                    e.stopImmediatePropagation();
                    if (blockMultiSelection) unselectAll();
                    if (!blockMultiSelection && e.shiftKey && (pl || nl)) {
                        sib = pl ? p.prevUntil('#' + prev.attr('id')) : p.nextUntil('#' + next.attr('id'));
                        sib.add(p).trigger(evtSelect);
                    } else if (e.ctrlKey || e.metaKey) {
                        //$(p).find('input[type="checkbox"]').prop("checked", !p.is('.' + clSelected));
                        //change($(p).find('input[type="checkbox"]'));
                        p.trigger(p.is('.' + clSelected) ? evtUnselect : evtSelect);
                    } else {
                        if ($(target).children().is('input[type="checkbox"]') ||
                            //$(e.srcElement).is('.bootstrap-checkbox') || $(e.srcElement).is('.btn-link') ||
                            $(target).is('.cb-icon-check-empty')
                            || $(target).is('.cb-icon-check')) {
                            p.trigger(p.is('.' + clSelected) ? evtUnselect : evtSelect);
                        } else if (!$(target).is('input[type="text"]')) {
                            if ($(this).data('touching') && p.is('.' + clSelected)) {
                                $(this).data('touching', null);
                                fm.dblclick({ file: this.id });
                                unselectAll();
                            } else {
                                unselectAll();
                                p.trigger(p.is('.' + clSelected) ? evtUnselect : evtSelect);
                            }
                        }
                    }

                    trigger();
                })
                // call fm.open()
                .delegate(fileSelector, 'dblclick.' + fm.namespace, function(e) {
                    fm.dblclick({ file: this.id });
                })
                // for touch device
                .delegate(fileSelector, 'touchstart.' + fm.namespace, function(e) {
                    $(this).data('touching', true);
                    var p = this.id ? $(this) : $(this).parents('[id]:first'),
                        sel = p.prevAll('.' + clSelected + ':first').length +
                            p.nextAll('.' + clSelected + ':first').length;
                    $(this).data('longtap', setTimeout(function() {
                        // long tap
                        p.trigger(p.is('.' + clSelected) ? evtUnselect : evtSelect);
                        trigger();
                        if (sel == 0 && p.is('.' + clSelected)) {
                            p.trigger('click');
                            trigger();
                        }
                    }, 500));
                })
                .delegate(fileSelector, 'touchmove.' + fm.namespace + ' touchend.' + fm.namespace, function(e) {
                    clearTimeout($(this).data('longtap'));
                })
                // attach draggable
                //.delegate(fileSelector, 'mouseenter.'+fm.namespace, function(e) {
                //	var $this = $(this),
                //		target = list ? $this : $this.children();

                //	if (!$this.is('.'+clTmp) && !target.is('.'+clDraggable+',.'+clDisabled)) {
                //		target.draggable(fm.draggable);
                //	}
                //})
                // add hover class to selected file
                .delegate(fileSelector, evtSelect, function(e) {
                    var $this = $(this),
                        id = $this.attr('id'),
                        file = fm.file(id);
                    if (!file || !(file.mime == "directory" && fm.isModal)) {
                        if (!selectLock && !$this.is('.' + clDisabled)) {
                            $(this).find('input[type="checkbox"]').prop("checked", true);
                            change($(this).find('input[type="checkbox"]'));
                            $this.addClass(clSelected).children().addClass(clHover);
                            if ($.inArray(id, selectedFiles) === -1) {
                                selectedFiles.push(id);
                            }
                        }
                    }
                })
                // remove hover class from unselected file
                .delegate(fileSelector, evtUnselect, function(e) {
                    var $this = $(this),
                        id = $this.attr('id'),
                        ndx;

                    if (!selectLock) {
                        $(this).removeClass(clSelected).children().removeClass(clHover);
                        $(this).find('input[type="checkbox"]').prop("checked", false);
                        change($(this).find('input[type="checkbox"]'));
                        ndx = $.inArray(id, selectedFiles);
                        if (ndx !== -1) {
                            selectedFiles.splice(ndx, 1);
                        }
                    }

                })
                // disable files wich removing or moving
                .delegate(fileSelector, evtDisable, function() {
                    var $this = $(this).removeClass(clSelected).addClass(clDisabled),
                        target = (list ? $this : $this.children()).removeClass(clHover);

                    $(target).find('input[type="checkbox"]').prop("checked", false);
                    change($(target).find('input[type="checkbox"]'));

                    $this.is('.' + clDroppable) && $this.droppable('disable');
                    target.is('.' + clDraggable) && target.draggable('disable');
                    !list && target.removeClass(clDisabled);
                })
                // if any files was not removed/moved - unlock its
                .delegate(fileSelector, evtEnable, function() {
                    var $this = $(this).removeClass(clDisabled),
                        target = list ? $this : $this.children();

                    $this.is('.' + clDroppable) && $this.droppable('enable');
                    target.is('.' + clDraggable) && target.draggable('enable');
                })
                .delegate(fileSelector, 'scrolltoview', function() {
                    scrollToView($(this));
                })
                .delegate(fileSelector, 'mouseenter.' + fm.namespace + ' mouseleave.' + fm.namespace, function(e) {
                    fm.trigger('hover', { hash: $(this).attr('id'), type: e.type });
                    $(this).toggleClass('ui-state-hover');
                })
                .bind('contextmenu.' + fm.namespace, function(e) {
                    var file = $(e.target).closest('.' + clFile);

                    if (file.length) {
                        e.stopPropagation();
                        e.preventDefault();
                        if (!file.is('.' + clDisabled)) {
                            if (!file.is('.' + clSelected)) {
                                // cwd.trigger('unselectall');
                                unselectAll();
                                file.trigger(evtSelect);
                                trigger();
                            }
                            fm.trigger('contextmenu', {
                                'type': 'files',
                                'targets': fm.selected(),
                                'x': e.clientX,
                                'y': e.clientY
                            });

                        }

                    }
                    // e.preventDefault();
                })
                // unselect all on cwd click
                .bind('click.' + fm.namespace, function(e) {
                    !e.shiftKey && !e.ctrlKey && !e.metaKey && unselectAll();
                })

                // make files selectable
                .selectable({
                    filter: fileSelector,
                    stop: trigger,
                    delay: 250,
                    selected: function(e, ui) { $(ui.selected).trigger(evtSelect); },
                    unselected: function(e, ui) { $(ui.unselected).trigger(evtUnselect); }
                })
                // make cwd itself droppable for folders from nav panel
                .droppable(droppable)
                // prepend fake file/dir
                .bind('create.' + fm.namespace, function(e, file) {
                    var parent = list ? cwd.find('tbody') : cwd,
                        p = parent.find('.elfinder-cwd-parent'),
                        file = $(itemhtml(file)).addClass(clTmp);

                    unselectAll();

                    if (p.length) {
                        p.after(file);
                    } else {
                        parent.prepend(file);
                    }

                    cwd.scrollTop(0);
                })
                // unselect all selected files
                .bind('unselectall', unselectAll)
                .bind('selectfile', function(e, id) {
                    cwd.find('#' + id).trigger(evtSelect);
                    trigger();
                }),

            wrapper = $('<div class="elfinder-cwd-wrapper"/>')
                .bind('click', function(e) {
                    var td, sort, target = getTarget(e);
                    if ($(target).children().is('input[type="checkbox"].selectAllChB')) {
                        if (!$(target).is(':checked')) unselectAll();
                        else selectAll();
                    } else if ($(target).is('.bootstrap-checkbox')) {
                        td = $(target).parent();
                    } else if ($(target).is('.cb-icon-check-empty')
                        || $(target).is('.cb-icon-check')) {
                        td = $(target).parent().parent();
                    } else if ($(target).is('td.chb')) {
                        td = $(target);
                    } else if ($(target).is('td')) {
                        sort = { order: "desc", stick: true, type: "name" };
                        var span = $(target).find('span');
                        var isNeedSortAsc = $(span).is(".caret") ? $(span).is('.up') : true;
                        $(target).parent().find('span.caret').removeClass('up').removeClass('caret');

                        sort.order = isNeedSortAsc ? "asc" : "desc";
                        sort.type = $(span).is('.date') ? "date" : $(span).is('.kind') ? "kind" : "name";

                        if (isNeedSortAsc) $(span).addClass('caret').removeClass('up');
                        else $(span).addClass('caret').addClass('up');

                        fm.setSort(sort.type, sort.order, sort.stick);
                    } else {
                        !e.shiftKey && !e.ctrlKey && !e.metaKey && unselectAll();
                    }

                    if (td) {
                        var ch = td.find('input[type="checkbox"].selectAllChB');
                        if ($(ch).is(':checked')) unselectAll();
                        else selectAll();
                    }
                })
                .bind('contextmenu', function(e) {
                    e.preventDefault();
                    fm.trigger('contextmenu', {
                        'type': 'cwd',
                        'targets': [fm.cwd().hash],
                        'x': e.clientX,
                        'y': e.clientY
                    });
                }),

            resize = function() {
                var h = 0;

                wrapper.siblings('.elfinder-panel:visible').each(function() {
                    h += $(this).outerHeight(true);
                });

                wrapper.height(wz.height() - h);
            },

            // elfinder node
            parent = $(this).parent().resize(resize),
            // workzone node
            wz = parent.children('.elfinder-workzone').append(wrapper.append(this));


        if (fm.dragUpload) {
            wrapper[0].addEventListener('dragenter', function(e) {
                e.preventDefault();
                e.stopPropagation();

                wrapper.addClass(clDropActive);
            }, false);

            wrapper[0].addEventListener('dragleave', function(e) {
                e.preventDefault();
                e.stopPropagation();
                e.target == cwd[0] && wrapper.removeClass(clDropActive);
            }, false);

            wrapper[0].addEventListener('dragover', function(e) {
                e.preventDefault();
                e.stopPropagation();
            }, false);

            wrapper[0].addEventListener('drop', function(e) {
                e.preventDefault();
                wrapper.removeClass(clDropActive);

                var items = e.dataTransfer.items;
                for (var i = 0; i < items.length; i++) {
                    var item = items[i].webkitGetAsEntry();
                    if (item && item.isDirectory) {
                        fm.error('errorDropDir');
                        return;
                    }
                }

                e.dataTransfer && e.dataTransfer.files && e.dataTransfer.files.length && fm.exec('upload', { files: e.dataTransfer.files }); //fm.upload({files : e.dataTransfer.files});
            }, false);
        }

        fm
            .bind('open', function(e) {
                fm.trigger('filterend');
                content(e.data.files);
            })
            .bind('search', function(e) {
                lastSearch = e.data.files;
                content(lastSearch, true);
            })
            .bind('searchend', function() {
                lastSearch = [];
                if (query) {
                    query = '';
                    content(fm.files());
                }
            })
            .bind('searchstart', function(e) {
                query = e.data.query;
            })
            .bind('filter', function(e) {
                lastFilter = e.data.files;
                content(lastFilter, true);
            })
            .bind('filterend', function() {
                lastFilter = [];
                //if (query) {
                //query = '';
                content(fm.files());
                //}
            })
            .bind('filterstart', function(e) {
                //query = e.data.query;
            })
            .bind('sortchange', function() {
                content(query ? lastSearch : lastFilter.length > 0 ? lastFilter : fm.files(), !!query);
            })
            .bind('viewchange', function() {
                var sel = fm.selected(),
                    l = fm.storage('view') == 'list';

                if (l != list) {
                    list = l;
                    content(lastFilter.length > 0 ? lastFilter : fm.files());

                    $.each(sel, function(i, h) {
                        selectFile(h);
                    });
                    trigger();
                }
                resize();
            })
            .add(function(e) {
                var phash = fm.cwd().hash,
                    files = query
                        ? $.map(e.data.added || [], function(f) {
                            return f.name.indexOf(query) === -1 ? null : f;
                        })
                        : $.map(e.data.added || [], function(f) {
                            return f.phash == phash ? f : null;
                        });
                add(files);
            })
            .change(function(e) {
                var phash = fm.cwd().hash,
                    sel = fm.selected(),
                    files;

                if (query) {
                    $.each(e.data.changed || [], function(i, file) {
                        remove([file.hash]);
                        if (file.name.indexOf(query) !== -1) {
                            add([file]);
                            $.inArray(file.hash, sel) !== -1 && selectFile(file.hash);
                        }
                    });
                } else {
                    $.each($.map(e.data.changed || [], function(f) { return f.phash == phash ? f : null; }), function(i, file) {
                        remove([file.hash]);
                        add([file]);
                        $.inArray(file.hash, sel) !== -1 && selectFile(file.hash);
                    });
                }

                trigger();
            })
            .remove(function(e) {
                remove(e.data.removed || []);
                trigger();
            })
            // fix cwd height if it less then wrapper
            .bind('open add search searchend', function() {
                cwd.css('height', 'auto');

                if (cwd.outerHeight(true) < wrapper.height()) {
                    cwd.height(wrapper.height() - (cwd.outerHeight(true) - cwd.height()) - 2);
                }
            })
            // select dragged file if no selected, disable selectable
            .dragstart(function(e) {
                var target = $(e.data.target),
                    oe = e.data.originalEvent;

                if (target.is(fileSelector)) {

                    if (!target.is('.' + clSelected)) {
                        !(oe.ctrlKey || oe.metaKey || oe.shiftKey) && unselectAll();
                        target.trigger(evtSelect);
                        trigger();
                    }
                    cwd.droppable('disable');
                }

                cwd.selectable('disable').removeClass(clDisabled);
                selectLock = true;
            })
            // enable selectable
            .dragstop(function() {
                cwd.selectable('enable').droppable('enable');
                selectLock = false;
            })
            .bind('lockfiles unlockfiles', function(e) {
                var event = e.type == 'lockfiles' ? evtDisable : evtEnable,
                    files = e.data.files || [],
                    l = files.length;

                while (l--) {
                    cwd.find('#' + files[l]).trigger(event);
                }
                //trigger();
            })
            // select new files after some actions
            .bind('mkdir mkfile duplicate upload rename archive extract', function(e) {
                var phash = fm.cwd().hash, files;

                unselectAll();

                $.each(e.data.added || [], function(i, file) {
                    file && file.phash == phash && selectFile(file.hash);
                });
                trigger();
            })
            .shortcut({
                pattern: 'ctrl+a',
                description: 'selectall',
                callback: selectAll
            })
            //.shortcut({
            //	pattern     : 'left right up down shift+left shift+right shift+up shift+down',
            //	description : 'selectfiles',
            //	type        : 'keydown' , //fm.UA.Firefox || fm.UA.Opera ? 'keypress' : 'keydown',
            //	callback    : function(e) { select(e.keyCode, e.shiftKey); }
            //})
            .shortcut({
                pattern: 'home',
                description: 'selectffile',
                callback: function(e) {
                    unselectAll();
                    scrollToView(cwd.find('[id]:first').trigger(evtSelect));
                    trigger();
                }
            })
            .shortcut({
                pattern: 'end',
                description: 'selectlfile',
                callback: function(e) {
                    unselectAll();
                    scrollToView(cwd.find('[id]:last').trigger(evtSelect));
                    trigger();
                }
            });

    });

    // fm.timeEnd('cwdLoad')

    return this;
};
"use strict";
/**
 * @class  elFinder toolbar
 *
 * @author Dmitry (dio) Levashov
 **/
$.fn.elfindertoolbar = function(fm, opts) {
    this.each(function() {
        var commands = fm._commands,
            self,
            panels = opts || [],
            l = panels.length,
            i,
            cmd,
            panel,
            button,
            firstB = "ui-elfinder-button-first";

        $(this).css('height', '50px');

        if (!$(this).is('.elfinder-toolbar')) {
            self = $(this).addClass('ui-helper-clearfix ui-widget-header ui-corner-top elfinder-toolbar');
            self.prev().length && self.parent().prepend(this);
        } else {
            self = $(this);
        }

        self.empty();
        while (l--) {
            if (panels[l]) {
                panel = $('<div class="ui-widget-content ui-corner-all elfinder-buttonset"/>');
                i = panels[l].length;
                while (i--) {
                    if ((cmd = commands[panels[l][i]])) {
                        button = 'elfinder' + cmd.options.ui;
                        if (panels[l - 1] == 'multiplyadd') button = 'elfinder' + 'bluebutton';
                        $.fn[button] && panel.prepend($('<div/>')[button](cmd));
                    }
                }
                if (panels[l] != 'more') $(panel).find(".elfinder-button-icon").css('padding-left', '5px');
                if (panels[l] == 'multiplyadd') panel.addClass(firstB);
                if (panels[l] == 'decryptandchecksign') panel.find('div:first').css('width', '155px');
                panel.children().length && self.prepend(panel);
                panel.children(':gt(0)').before('<span class="ui-widget-content elfinder-toolbar-button-separator"/>');
            }
        }

        self.children().length && self.show();
    });

    this.selectFile = function() {
        var showingButtons = [['multiplyadd'], ['paste'], ['copy'], ['paste'], ['rm'], ['rename']];
        var dir = false;
        for (var i = 0; i < fm.selectedFiles().length; i++) {
            var file = fm.selectedFiles()[i];
            if (file.mime == "directory") {
                dir = true;
                break;
            }
        }
        if (dir) {
            $(this)['elfindertoolbar'](fm, showingButtons);
        } else {
            $(this)['elfindertoolbar'](fm, fm.options.uiOptions.toolbar);
        }
    };
    this.openFolder = function() {
        var hover = fm.res('class', 'hover'),
            item = 'elfinder-button-menu-item',
            menu = $('<div class="ui-widget ui-widget-content elfinder-button-menu ui-corner-all"/>')
                .hide()
                .delegate('.' + item, 'hover', function() { $(this).toggleClass(hover); })
                .delegate('.' + item, 'click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    hide();
                }),
            dot = $('<a>...</a>')
                .click(function(e) {
                    e.stopPropagation();
                    menu.slideToggle(100);
                }),

            hide = function() { menu.hide(); },

            addItem = function(a) {
                var href = $(a).attr('href').substr(1);
                var text = $(a).text();
                menu.append(
                    $('<div class="' + item + '" rel="' + href + '">' +
                        '<span class="elfinder-button-icon elfinder-button-icon-directory"/>' + text + '</div>')
                    .click(function(e) {
                        if ($(this).attr('rel')) {
                            var hash = $(this).attr('rel');

                            e.preventDefault();
                            hash != fm.cwd().hash && fm.exec('open', hash);
                        }
                    })
                );

            };

        if (fm.selectedFiles().length != 0) {
            this.selectFile();
        } else {

            var path = $('<div class="ui-elfinder-toolbar-path"/>').html('&nbsp;')
                .delegate('a', 'click', function(e) {
                    if ($(this).attr('href')) {
                        var hash = $(this).attr('href').substr(1);

                        e.preventDefault();
                        hash != fm.cwd().hash && fm.exec('open', hash);
                    }
                });

            var dirs = [];
            //console.log(fm.cwd().hash)
            $.each(fm.parents(fm.cwd().hash), function(i, hash) {

                var name = fm.file(hash).name;
                if (name && name.length > 20) name = name.substring(0, 19) + "...";

                dirs.push('<a href="#' + hash + '">' + name + '</a>');
            });

            if (dirs.length >= 4) {
                menu.empty();
                menu.zIndex(12 + path.zIndex());
                path.prepend(menu);
                //for (var i = dirs.length - 2; i >= 1; i--) {
                //    var dir = dirs[i];
                //    addItem(dir);
                //}
                for (var i = 1; i <= dirs.length - 2; i++) {
                    var dir = dirs[i];
                    addItem(dir);
                }
                path.prepend($(dirs[dirs.length - 1]).addClass('last'));
                path.prepend('>');
                path.prepend(dot);
                path.prepend('>');
                path.prepend(dirs[0]);

                fm.bind('disable select', hide).getUI().click(hide);
            } else {
                path.html(dirs.join(' > '));
                path.find('a:last').addClass('last');
            }

            $(this).empty();
            var showingButtons = [['multiplyadd'], ['paste'], ['filter']];
            $(this)['elfindertoolbar'](fm, showingButtons);

            $(this).append(path);
        }
    };

    return this;
};
"use strict"; /**
 * @class  elFinder toolbar button widget.
 * If command has variants - create menu
 *
 * @author Dmitry (dio) Levashov
 **/
$.fn.elfinderbutton = function(cmd) {
    return this.each(function() {

        var c = 'class',
            fm = cmd.fm,
            disabled = fm.res(c, 'disabled'),
            active = fm.res(c, 'active'),
            hover = fm.res(c, 'hover'),
            item = 'elfinder-button-menu-item',
            selected = 'elfinder-button-menu-item-selected',
            menu,
            table = $("<table><tr><td></td><td></td></tr></table>").css('height', '100%'),
            button = $(this).addClass('ui-state-default elfinder-button') //.append(table)
                .attr('title', cmd.title)
                .append('<span class="elfinder-button-icon elfinder-button-icon-' + cmd.name + '"></span>')
                .hover(function(e) {
                    !button.is('.' + disabled) && button[e.type == 'mouseleave' ? 'removeClass' : 'addClass'](hover); /**button.toggleClass(hover);*/
                })
                .click(function(e) {
                    if (!button.is('.' + disabled)) {
                        $(this).removeClass(hover);
                        if (menu && cmd.variants.length > 1) {
                            // close other menus
                            menu.is(':hidden') && cmd.fm.getUI().click();
                            e.stopPropagation();
                            menu.slideToggle(100);
                        } else {
                            cmd.exec();
                        }

                    } else {
                        if (cmd.name == 'opensendpopup') {
                            var messageWindow = '<div id="modal" style="display: none;" class="message-window"><div class="window alert elfinder-dialog "><div class="header"><div class="close"></div><h2>' + cmd.fm.i18.ru.messages.attentionTheRestriction + '</h2></div><div class="content">' +
                                '<div id="message-panel"><div class="content-group mess-box"><div class="info"><span>' + cmd.fm.i18.ru.messages.noMoreThirtyFiles + '</span></div></div><div class="btn-group"><div class="btn btn-green btn-close">' + cmd.fm.i18.ru.messages.btnClose + '</div></div></div>' +
                                '</div></div></div></div>';
                            $('#elfinder').after(messageWindow);
                            $('#modal.message-window').show();
                            $('#modal.message-window .window .header .close, #modal.message-window .window .content #message-panel .btn-close').click(function() {
                                close();
                            });
                            $(document).keydown(function(e) {
                                if (e.keyCode == 27) {
                                    close();
                                }
                            });

                            var close = function() {
                                $('#modal.message-window').hide().remove();
                            };
                        }
                    }
                }),
            text = $(this).append('<span class="elfinder-button-text">' + cmd.title + '</span>'),
            hideMenu = function() {
                menu.hide();
            };
        //table.find("td:first").append('<span class="elfinder-button-icon elfinder-button-icon-' + cmd.name + '"></span>');
        //table.find("td:last").append('<span class="elfinder-button-text">' + cmd.title + '</span>');
        // if command has variants create menu
        if ($.isArray(cmd.variants)) {
            button.addClass('elfinder-menubutton');

            menu = $('<div class="ui-widget ui-widget-content elfinder-button-menu ui-corner-all"/>')
                .hide()
                .appendTo(button)
                .zIndex(12 + button.zIndex())
                .delegate('.' + item, 'hover', function() { $(this).toggleClass(hover); })
                .delegate('.' + item, 'click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    button.removeClass(hover);
                    cmd.exec(cmd.fm.selected(), $(this).data('value'));
                });

            cmd.fm.bind('disable select', hideMenu).getUI().click(hideMenu);

            cmd.change(function() {
                menu.html('');
                $.each(cmd.variants, function(i, variant) {
                    menu.append($('<div class="' + item + '">' + variant[1] + '</div>').data('value', variant[0]).addClass(variant[0] == cmd.value ? selected : ''));
                });
            });
        }

        cmd.change(function() {
                if (cmd.disabled()) {
                    button.removeClass(active + ' ' + hover).addClass(disabled);
                } else {
                    button.removeClass(disabled);
                    button[cmd.active() ? 'addClass' : 'removeClass'](active);
                }
            })
            .change();
    });
};
"use strict";
$.fn.elfinderbluebutton = function(cmd) {
    return this.each(function() {

        var c = 'class',
            fm = cmd.fm,
            disabled = fm.res(c, 'disabled'),
            active = fm.res(c, 'active'),
            hover = fm.res(c, 'hover'),
            item = 'elfinder-button-menu-item',
            selected = 'elfinder-button-menu-item-selected',
            menu,
            button = $(this).addClass('ui-state-default elfinder-button btn btn-blue')
                .attr('title', cmd.title)
                .append('<span class="elfinder-button-icon elfinder-button-icon-' + cmd.name + '"></span>')
                .hover(function(e) {
                    !button.is('.' + disabled) && button[e.type == 'mouseleave' ? 'removeClass' : 'addClass'](hover);
                })
                .click(function(e) {
                    if (!button.is('.' + disabled)) {
                        cmd.exec();
                    }
                });

        cmd.change(function() {
                if (cmd.disabled()) {
                    button.removeClass(active + ' ' + hover).addClass(disabled);
                } else {
                    button.removeClass(disabled);
                    button[cmd.active() ? 'addClass' : 'removeClass'](active);
                }
            })
            .change();
    });
};
"use strict";
/**
 * @class  elFinder toolbar's button tor upload file
 *
 * @author Dmitry (dio) Levashov
 **/
$.fn.elfinderuploadbutton = function(cmd, islink,text) {
    return this.each(function () {
        var button;
        console.log(1);
        if (islink) button = $(this).elfinderlinkbutton(cmd,null,text).unbind('click');
        else button = $(this).elfinderbutton(cmd).unbind('click');

        var form = $('<form/>').appendTo(button),
			input = $('<input type="file" multiple="true"/>')
				.change(function() {
					var _input = $(this);
					if (_input.val()) {
						cmd.exec({input : _input.remove()[0]});
						input.clone(true).appendTo(form);
					}
				});

		form.append(input.clone(true));

		cmd.change(function() {
			form[cmd.disabled() ? 'hide' : 'show']();
		})
		.change();
	});
}

"use strict"; /**
 * @class  elFinder toolbar button to switch current directory view.
 *
 * @author Dmitry (dio) Levashov
 **/
$.fn.elfinderviewbutton = function(cmd) {
    return this.each(function() {
        var button = $(this).elfinderbutton(cmd),
            icon = button.children('.elfinder-button-icon');

        cmd.change(function() {
            var icons = cmd.value == 'icons';

            icon.toggleClass('elfinder-button-icon-view-list', icons);
            button.attr('title', cmd.fm.i18n(icons ? 'viewlist' : 'viewicons'));
        });
    });
};
"use strict"; /**
 * @class  elFinder toolbar search button widget.
 *
 * @author Dmitry (dio) Levashov
 **/
$.fn.elfindersearchbutton = function(cmd) {
    return this.each(function() {
        var result = false,
            button = $(this).hide().addClass('ui-widget-content elfinder-button ' + cmd.fm.res('class', 'searchbtn') + ''),
            search = function() {
                var val = $.trim(input.val());
                if (val) {
                    cmd.exec(val).done(function() {
                        result = true;
                        input.focus();
                    });

                } else {
                    cmd.fm.trigger('searchend');
                }
            },
            abort = function() {
                input.val('');
                if (result) {
                    result = false;
                    cmd.fm.trigger('searchend');
                }
            },
            input = $('<input type="text" size="42"/>')
                .appendTo(button)
                // to avoid fm shortcuts on arrows
                .keypress(function(e) {
                    e.stopPropagation();
                })
                .keydown(function(e) {
                    e.stopPropagation();

                    e.keyCode == 13 && search();

                    if (e.keyCode == 27) {
                        e.preventDefault();
                        abort();
                    }
                });

        $('<span class="ui-icon ui-icon-search" title="' + cmd.title + '"/>')
            .appendTo(button)
            .click(search);

        $('<span class="ui-icon ui-icon-close"/>')
            .appendTo(button)
            .click(abort); // wait when button will be added to DOM
        setTimeout(function() {
            button.parent().detach();
            cmd.fm.getUI('toolbar').prepend(button.show());
            // position icons for ie7
            if (cmd.fm.UA.ltIE7) {
                var icon = button.children(cmd.fm.direction == 'ltr' ? '.ui-icon-close' : '.ui-icon-search');
                icon.css({
                    right: '',
                    left: parseInt(button.width()) - icon.outerWidth(true)
                });
            }
        }, 200);

        cmd.fm
            .error(function() {
                input.unbind('keydown');
            })
            .select(function() {
                input.blur();
            })
            .bind('searchend', function() {
                input.val('');
            })
            .viewchange(abort)
            .shortcut({
                pattern: 'ctrl+f f3',
                description: cmd.title,
                callback: function() { input.select().focus(); }
            });

    });
};
"use strict"; /**
 * @class  elFinder toolbar button menu with sort variants.
 *
 * @author Dmitry (dio) Levashov
 **/
$.fn.elfindersortbutton = function(cmd) {

    return this.each(function() {
        var fm = cmd.fm,
            name = cmd.name,
            c = 'class',
            disabled = fm.res(c, 'disabled'),
            hover = fm.res(c, 'hover'),
            item = 'elfinder-button-menu-item',
            selected = item + '-selected',
            asc = selected + '-asc',
            desc = selected + '-desc',
            button = $(this).addClass('ui-state-default elfinder-button elfinder-menubutton elfiner-button-' + name)
                .attr('title', cmd.title)
                .append('<span class="elfinder-button-icon elfinder-button-icon-' + name + '"/>')
                .hover(function(e) { !button.is('.' + disabled) && button.toggleClass(hover); })
                .click(function(e) {
                    if (!button.is('.' + disabled)) {
                        e.stopPropagation();
                        menu.is(':hidden') && cmd.fm.getUI().click();
                        menu.slideToggle(100);
                    }
                }),
            menu = $('<div class="ui-widget ui-widget-content elfinder-button-menu ui-corner-all"/>')
                .hide()
                .appendTo(button)
                .zIndex(12 + button.zIndex())
                .delegate('.' + item, 'hover', function() { $(this).toggleClass(hover); })
                .delegate('.' + item, 'click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    hide();
                }),
            update = function() {
                menu.children(':not(:last)').removeClass(selected + ' ' + asc + ' ' + desc)
                    .filter('[rel="' + fm.sortType + '"]')
                    .addClass(selected + ' ' + (fm.sortOrder == 'asc' ? asc : desc));

                menu.children(':last').toggleClass(selected, fm.sortStickFolders);
            },
            hide = function() { menu.hide(); };


        $.each(fm.sortRules, function(name, value) {
            menu.append($('<div class="' + item + '" rel="' + name + '"><span class="ui-icon ui-icon-arrowthick-1-n"/><span class="ui-icon ui-icon-arrowthick-1-s"/>' + fm.i18n('sort' + name) + '</div>').data('type', name));
        });

        menu.children().click(function(e) {
            var type = $(this).attr('rel');

            cmd.exec([], {
                type: type,
                order: type == fm.sortType ? fm.sortOrder == 'asc' ? 'desc' : 'asc' : fm.sortOrder,
                stick: fm.sortStickFolders
            });
        });
        $('<div class="' + item + ' ' + item + '-separated"><span class="ui-icon ui-icon-check"/>' + fm.i18n('sortFoldersFirst') + '</div>')
            .appendTo(menu)
            .click(function() {
                cmd.exec([], { type: fm.sortType, order: fm.sortOrder, stick: !fm.sortStickFolders });
            });

        fm.bind('disable select', hide).getUI().click(hide);

        fm.bind('sortchange', update);

        if (menu.children().length > 1) {
            cmd.change(function() {
                    button.toggleClass(disabled, cmd.disabled());
                    update();
                })
                .change();

        } else {
            button.addClass(disabled);
        }

    });

};
"use strict";
$.fn.elfindermorebutton = function(cmd) {

    return this.each(function() {
        var fm = cmd.fm,
            commands = fm._commands,
            name = cmd.name,
            c = 'class',
            disabled = fm.res(c, 'disabled'),
            hover = fm.res(c, 'hover'),
            item = 'elfinder-button-menu-item',
            includedCommands = ['copy', 'paste', 'rm', 'rename', 'download', 'opensendpopup'],

            button = $(this).addClass('ui-state-default elfinder-button elfinder-menubutton elfiner-button-' + name + ' ui-elfinder-button-last')
                .attr('title', cmd.title)
                .hover(function(e) {
                    !button.is('.' + disabled) && button.toggleClass(hover);
                })
                .click(function(e) {
                    if (!button.is('.' + disabled)) {
                        e.stopPropagation();
                        $.each(menu.children(), function() {
                            var t = $(this).attr('rel');
                            $(this).removeClass(disabled);
                            var com;
                            if (!(com = commands[t]) || com.getstate() != 0) {
                                $(this).addClass(disabled);
                            }
                        });
                        menu.is(':hidden') && cmd.fm.getUI().click();
                        menu.slideToggle(100);
                    }
                }),
            text = $(this).append('<span class="elfinder-button-text">' + cmd.title + '</span>'),
            icon = $(this).append('<span class="caret"></span>'),
            menu = $('<div class="ui-widget ui-widget-content elfinder-button-menu ui-corner-all"/>')
                .hide()
                .appendTo(button)
                .zIndex(12 + button.zIndex())
                .delegate('.' + item, 'hover', function() { !$(this).is('.' + disabled) && $(this).toggleClass(hover); })
                .delegate('.' + item, 'click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    hide();
                }),

            hide = function() { menu.hide(); },

            clearMenu = function() {
                menu.text("");
            },

            initMenu = function() {
                $.each(includedCommands, function(name, value) {
                    menu.append($('<div class="' + item + '" rel="' + value + '"><span class="elfinder-button-icon elfinder-button-icon-' + value + '"/><span class="ui-icon ui-icon-arrowthick-1-s"/>'
                            + fm.i18n('cmd' + value) + '</div>')
                        .click(function(e) {
                            var t = $(this).attr('rel');
                            !$(this).is('.' + disabled) && cmd.exec(t);
                        }));
                });
            },

            addCommand = function(comName) {
                includedCommands.push(comName);
                clearMenu();
                initMenu();
            };

        initMenu();
        fm.bind('disable select', hide).getUI().click(hide);

        if (menu.children().length > 1) {
            cmd.change(function() {
                button.toggleClass(disabled, cmd.disabled());
            }).change();

        } else {
            button.addClass(disabled);
        }
    });

};
$.fn.elfinderpanel = function(fm) {

    return this.each(function() {
        var panel = $(this).addClass('elfinder-panel ui-state-default ui-corner-all'),
            margin = 'margin-' + (fm.direction == 'ltr' ? 'left' : 'right');

        fm.one('load', function(e) {
            var navbar = fm.getUI('navbar');

            panel.css(margin, parseInt(navbar.outerWidth(true)));
            navbar.bind('resize', function() {
                panel.is(':visible') && panel.css(margin, parseInt(navbar.outerWidth(true)));
            });
        });
    });
}
"use strict";
/**
 * @class  elFinder contextmenu
 *
 * @author Dmitry (dio) Levashov
 **/
$.fn.elfindercontextmenu = function(fm) {

    return this.each(function() {
        var menu = $(this).addClass('ui-helper-reset ui-widget ui-state-default ui-corner-all elfinder-contextmenu elfinder-contextmenu-' + fm.direction)
                .hide()
                .appendTo('body')
                .delegate('.elfinder-contextmenu-item', 'mouseenter mouseleave', function() {
                    $(this).toggleClass('ui-state-hover');
                }),
            subpos = fm.direction == 'ltr' ? 'left' : 'right',
            types = $.extend({}, fm.options.contextmenu),
            tpl = '<div class="elfinder-contextmenu-item"><span class="elfinder-button-icon {icon} elfinder-contextmenu-icon"/><span>{label}</span></div>',
            item = function(label, icon, callback) {
                return $(tpl.replace('{icon}', icon ? 'elfinder-button-icon-' + icon : '').replace('{label}', label))
                    .click(function(e) {
                        e.stopPropagation();
                        e.stopPropagation();
                        callback();
                    });
            },

            open = function(x, y) {
                var win = $(window),
                    width = menu.outerWidth(),
                    height = menu.outerHeight(),
                    wwidth = win.width(),
                    wheight = win.height(),
                    scrolltop = win.scrollTop(),
                    scrollleft = win.scrollLeft(),
                    css = {
                        top: (y + height < wheight ? y : y - height > 0 ? y - height : y) + scrolltop,
                        left: (x + width < wwidth ? x : x - width) + scrollleft,
                        'z-index': 100 + fm.getUI('workzone').zIndex()
                    };

                menu.css(css)
                    .show();

                css = { 'z-index': css['z-index'] + 10 };
                css[subpos] = parseInt(menu.width());
                menu.find('.elfinder-contextmenu-sub').css(css);
            },

            close = function() {
                menu.hide().empty();
            },

            create = function(type, targets) {
                var sep = false;


                $.each(types[type] || [], function(i, name) {
                    var cmd, node, submenu;

                    if (name == '|' && sep) {
                        menu.append('<div class="elfinder-contextmenu-separator"/>');
                        sep = false;
                        return;
                    }

                    cmd = fm.command(name);

                    if (cmd && cmd.getstate(targets) != -1) {
                        if (cmd.variants) {
                            if (!cmd.variants.length) {
                                return;
                            }
                            node = item(cmd.title, cmd.name, function() {});

                            submenu = $('<div class="ui-corner-all elfinder-contextmenu-sub"/>')
                                .appendTo(node.append('<span class="elfinder-contextmenu-arrow"/>'));

                            node.addClass('elfinder-contextmenu-group')
                                .hover(function() {
                                    submenu.toggle();
                                });
                            $.each(cmd.variants, function(i, variant) {
                                submenu.append(
                                    $('<div class="elfinder-contextmenu-item"><span>' + variant[1] + '</span></div>')
                                    .click(function(e) {
                                        e.stopPropagation();
                                        close();
                                        cmd.exec(targets, variant[0]);
                                    })
                                );
                            });

                        } else {
                            node = item(cmd.title, cmd.name, function() {
                                close();
                                cmd.exec(targets);
                            });
                        }

                        menu.append(node);
                        sep = true;
                    }
                });
            },

            createFromRaw = function(raw) {
                $.each(raw, function(i, data) {
                    var node;

                    if (data.label && typeof data.callback == 'function') {
                        node = item(data.label, data.icon, function() {
                            close();
                            data.callback();
                        });
                        menu.append(node);
                    }
                });
            };
        $(document).bind('click.' + this.namespace, function(e) { close(); });
        fm.one('load', function() {
            fm.bind('contextmenu', function(e) {
                    var data = e.data;

                    close();

                    if (data.type && data.targets) {
                        create(data.type, data.targets);
                    } else if (data.raw) {
                        createFromRaw(data.raw);
                    }

                    menu.children().length && open(data.x, data.y);
                })
                .one('destroy', function() { menu.remove(); })
                .bind('disable select', close)
                .getUI().click(close);
        });

    });

};
"use strict";
/**
 * @class elFinder ui
 * Display current folder path in statusbar.
 * Click on folder name in path - open folder
 *
 * @author Dmitry (dio) Levashov
 **/
$.fn.elfinderpath = function(fm) {
    return this.each(function() {
        var path = $(this).addClass('elfinder-path').html('&nbsp;')
            .delegate('a', 'click', function(e) {
                var hash = $(this).attr('href').substr(1);

                e.preventDefault();
                hash != fm.cwd().hash && fm.exec('open', hash);
            })
            .prependTo(fm.getUI('statusbar').show());
        fm.bind('open searchend', function() {
                var dirs = [];

                $.each(fm.parents(fm.cwd().hash), function(i, hash) {
                    dirs.push('<a href="#' + hash + '">' + fm.escape(fm.file(hash).name) + '</a>');
                });

                path.html(dirs.join(fm.option('separator')));
            })
            .bind('search', function() {
                path.html(fm.i18n('searcresult'));
            });
    });
};
"use strict";
/**
 * @class elFinder ui
 * Display number of files/selected files and its size in statusbar
 *
 * @author Dmitry (dio) Levashov
 **/
$.fn.elfinderstat = function(fm) {
    return this.each(function() {
        var size = $(this).addClass('elfinder-stat-size'),
            sel = $('<div class="elfinder-stat-selected"/>'),
            titlesize = fm.i18n('size').toLowerCase(),
            titleitems = fm.i18n('items').toLowerCase(),
            titlesel = fm.i18n('selected'),
            setstat = function(files, cwd) {
                var c = 0,
                    s = 0;

                $.each(files, function(i, file) {
                    if (!cwd || file.phash == cwd) {
                        c++;
                        s += parseInt(file.size) || 0;
                    }
                });
                size.html(titleitems + ': ' + c + ', ' + titlesize + ': ' + fm.formatSize(s));
            };

        fm.getUI('statusbar').prepend(size).append(sel).show();

        fm
            .bind('open reload add remove change searchend', function() {
                setstat(fm.files(), fm.cwd().hash);
            })
            .search(function(e) {
                setstat(e.data.files);
            })
            .select(function() {
                var s = 0,
                    c = 0,
                    files = fm.selectedFiles();

                if (files.length == 1) {
                    s = files[0].size;
                    sel.html(fm.escape(files[0].name) + (s > 0 ? ', ' + fm.formatSize(s) : ''));

                    return;
                }

                $.each(files, function(i, file) {
                    c++;
                    s += parseInt(file.size) || 0;
                });

                sel.html(c ? titlesel + ': ' + c + ', ' + titlesize + ': ' + fm.formatSize(s) : '&nbsp;');
            });
    });
};
"use strict";
$.fn.elfinderinfobar = function(fm, opts) {
    this.not('.elfinder-infobar').each(function() {
        var includedCommands = ['rm', 'download', 'opensendpopup'],
            commands = fm._commands,
            com,
            button,
            icon = $('<div class="selectico"><span></span></div>'),
            name = $('<div class="titleblock"><div class="title"></div><div class="rename"></div></div>'),
            lastChange = $('<div class="dateblock">' + fm.i18n('lastchange') + '<span class="datespan"></span><br> '
                + fm.i18n('sizeinfo') + '<span class="sizespan"></span><div class="link"></div></div>'),
            buttons = $('<div class="selectfunc"><div class="visual-btn-box"><a class="visual-btn js-visaulize"></a></div><div class="view left"></div><div class="funcbuttons right"></div></div>'),
            cryptInfo = $('<div class="signature"/>'),

            infoblock = $('<div class="selectinfo"/>').append(name).append(lastChange).append(buttons),
            selblock = $('<div class="selectblock"/>').append(icon).append(infoblock).append(cryptInfo).hide(),
            self = $(this).addClass('ui-widget-header ui-helper-clearfix ui-corner-bottom elfinder-infobar')
                .css('height', '173px')
                .css('font-size', '12px')
                .prepend(selblock);

        $.each(includedCommands, function(i, value) {
            if ((com = commands[value])) {
                button = 'elfinder' + com.options.ui;
                $.fn[button] && buttons.find(".funcbuttons").append($('<div/>')[button](com));
            }
        });

        if ((com = commands['cryptinfo'])) {
            button = 'elfinder' + com.options.ui;
            $.fn[button] && lastChange.find(".link").prepend($('<div/>')[button](com));
        }

        if ((com = commands['rename'])) {
            button = 'elfinderlinkbutton';
            $.fn[button] && name.find(".rename").prepend($('<div/>')[button](com));
        }

        self.prev().length && self.parent().append(this);

    });

    return this;
};
"use strict";
/**
 * @class elFinder places/favorites ui
 *
 * @author Dmitry (dio) Levashov
 **/
$.fn.elfinderplaces = function(fm, opts) {
    return this.each(function() {
        var dirs = [],
            c = 'class',
            navdir = fm.res(c, 'navdir'),
            collapsed = fm.res(c, 'navcollapse'),
            expanded = fm.res(c, 'navexpand'),
            hover = fm.res(c, 'hover'),
            clroot = fm.res(c, 'treeroot'),
            tpl = fm.res('tpl', 'navdir'),
            ptpl = fm.res('tpl', 'perms'),
            spinner = $(fm.res('tpl', 'navspinner')),
            /**
			 * Convert places dir node into dir hash
			 *
			 * @param  String  directory id
			 * @return String
			 **/
            id2hash = function(id) { return id.substr(6); },
            /**
			 * Convert places dir node into dir hash
			 *
			 * @param  String  directory id
			 * @return String
			 **/
            hash2id = function(hash) { return 'place-' + hash; },

            /**
			 * Save current places state
			 *
			 * @return void
			 **/
            save = function() { fm.storage('places', dirs.join(',')); },
            /**
			 * Return node for given dir object
			 *
			 * @param  Object  directory object
			 * @return jQuery
			 **/
            create = function(dir) {
                return $(tpl.replace(/\{id\}/, hash2id(dir.hash))
                    .replace(/\{name\}/, fm.escape(dir.name))
                    .replace(/\{cssclass\}/, fm.perms2class(dir))
                    .replace(/\{permissions\}/, !dir.read || !dir.write ? ptpl : '')
                    .replace(/\{symlink\}/, ''));
            },
            /**
			 * Add new node into places
			 *
			 * @param  Object  directory object
			 * @return void
			 **/
            add = function(dir) {
                var node = create(dir);

                if (subtree.children().length) {
                    $.each(subtree.children(), function() {
                        var current = $(this);

                        if (dir.name.localeCompare(current.children('.' + navdir).text()) < 0) {
                            return !node.insertBefore(current);
                        }
                    });
                }

                dirs.push(dir.hash);
                !node.parent().length && subtree.append(node);
                root.addClass(collapsed);
                node.draggable({
                    appendTo: 'body',
                    revert: false,
                    helper: function() {
                        var dir = $(this);

                        dir.children().removeClass('ui-state-hover');

                        return $('<div class="elfinder-place-drag elfinder-' + fm.direction + '"/>')
                            .append(dir.clone())
                            .data('hash', id2hash(dir.children(':first').attr('id')));

                    },
                    start: function() { $(this).hide(); },
                    stop: function(e, ui) {
                        var top = places.offset().top,
                            left = places.offset().left,
                            width = places.width(),
                            height = places.height(),
                            x = e.clientX,
                            y = e.clientY;

                        if (x > left && x < left + width && y > top && y < y + height) {
                            $(this).show();
                        } else {
                            remove(ui.helper.data('hash'));
                            save();
                        }
                    }
                });
            },
            /**
			 * Remove dir from places
			 *
			 * @param  String  directory id
			 * @return void
			 **/
            remove = function(hash) {
                var ndx = $.inArray(hash, dirs);

                if (ndx !== -1) {
                    dirs.splice(ndx, 1);
                    subtree.find('#' + hash2id(hash)).parent().remove();
                    !subtree.children().length && root.removeClass(collapsed + ' ' + expanded);
                }
            },
            /**
			 * Remove all dir from places
			 *
			 * @return void
			 **/
            clear = function() {
                subtree.empty();
                root.removeClass(collapsed + ' ' + expanded);
            },
            /**
			 * Node - wrapper for places root
			 *
			 * @type jQuery
			 **/
            wrapper = create({
                hash: 'root-' + fm.namespace,
                name: fm.i18n(opts.name, 'places'),
                read: true,
                write: true
            }),
            /**
			 * Places root node
			 *
			 * @type jQuery
			 **/
            root = wrapper.children('.' + navdir)
                .addClass(clroot)
                .click(function() {
                    if (root.is('.' + collapsed)) {
                        places.toggleClass(expanded);
                        subtree.slideToggle();
                        fm.storage('placesState', places.is('.' + expanded) ? 1 : 0);
                    }
                }),
            /**
			 * Container for dirs
			 *
			 * @type jQuery
			 **/
            subtree = wrapper.children('.' + fm.res(c, 'navsubtree')),
            /**
			 * Main places container
			 *
			 * @type jQuery
			 **/
            places = $(this).addClass(fm.res(c, 'tree') + ' elfinder-places ui-corner-all')
                .hide()
                .append(wrapper)
                .appendTo(fm.getUI('navbar'))
                .delegate('.' + navdir, 'hover', function() {
                    $(this).toggleClass('ui-state-hover');
                })
                .delegate('.' + navdir, 'click', function(e) {
                    fm.exec('open', $(this).attr('id').substr(6));
                })
                .delegate('.' + navdir + ':not(.' + clroot + ')', 'contextmenu', function(e) {
                    var hash = $(this).attr('id').substr(6);

                    e.preventDefault();

                    fm.trigger('contextmenu', {
                        raw: [
                            {
                                label: fm.i18n('rmFromPlaces'),
                                icon: 'rm',
                                callback: function() {
                                    remove(hash);
                                    save();
                                }
                            }
                        ],
                        'x': e.clientX,
                        'y': e.clientY
                    });
                })
                .droppable({
                    tolerance: 'pointer',
                    accept: '.elfinder-cwd-file-wrapper,.elfinder-tree-dir,.elfinder-cwd-file',
                    hoverClass: fm.res('class', 'adroppable'),
                    drop: function(e, ui) {
                        var resolve = true;

                        $.each(ui.helper.data('files'), function(i, hash) {
                            var dir = fm.file(hash);

                            if (dir && dir.mime == 'directory' && $.inArray(dir.hash, dirs) === -1) {
                                add(dir);
                            } else {
                                resolve = false;
                            }
                        });
                        save();
                        resolve && ui.helper.hide();
                    }
                });


        // on fm load - show places and load files from backend
        fm.one('load', function() {
            if (fm.oldAPI) {
                return;
            }

            places.show().parent().show();

            dirs = $.map(fm.storage('places').split(','), function(hash) { return hash || null; });

            if (dirs.length) {
                root.prepend(spinner);

                fm.request({
                        data: { cmd: 'info', targets: dirs },
                        preventDefault: true
                    })
                    .done(function(data) {
                        dirs = [];
                        $.each(data.files, function(i, file) {
                            file.mime == 'directory' && add(file);
                        });
                        save();
                        if (fm.storage('placesState') > 0) {
                            root.click();
                        }
                    })
                    .always(function() {
                        spinner.remove();
                    });
            }


            fm.remove(function(e) {
                    $.each(e.data.removed, function(i, hash) {
                        remove(hash);
                    });
                    save();
                })
                .change(function(e) {
                    $.each(e.data.changed, function(i, file) {
                        if ($.inArray(file.hash, dirs) !== -1) {
                            remove(file.hash);
                            file.mime == 'directory' && add(file);
                        }
                    });
                    save();
                })
                .bind('sync', function() {
                    if (dirs.length) {
                        root.prepend(spinner);

                        fm.request({
                                data: { cmd: 'info', targets: dirs },
                                preventDefault: true
                            })
                            .done(function(data) {
                                $.each(data.files || [], function(i, file) {
                                    if ($.inArray(file.hash, dirs) === -1) {
                                        remove(file.hash);
                                    }
                                });
                                save();
                            })
                            .always(function() {
                                spinner.remove();
                            });
                    }
                });
        });
    });
};
"use strict";
$.fn.elfinderlinkbutton = function(cmd, thumb, buttontext) {
    return this.each(function() {
        var c = 'class',
            fm = cmd.fm,
            disabled = fm.res(c, 'disabled'),
            active = fm.res(c, 'active'),
            hover = fm.res(c, 'hover'),
            button = $(this).addClass('ui-state-default elfinder-button elfinder-link-button')
                .attr('title', buttontext ? buttontext.replace(/<\/?[^>]+>/gi, '') : cmd.title)
                .hover(function(e) {
                    !button.is('.' + disabled) && button[e.type == 'mouseleave' ? 'removeClass' : 'addClass'](hover);
                })
                .click(function(e) {
                    var t = $(this).attr('rel');
                    if (!button.is('.' + disabled)) {
                        if (t) cmd.exec(t);
                        else cmd.exec();
                    }
                }),
            linktext = '<a class="elfinder-button-text">{text}</a>';
        linktext = linktext.replace('{text}', buttontext ? buttontext : cmd.title);
        $(this).append(linktext);
        if (thumb)button.attr('rel', thumb);

        cmd.change(function() {
                if (cmd.disabled()) {
                    button.removeClass(active + ' ' + hover).addClass(disabled);
                } else {
                    button.removeClass(disabled);
                    button[cmd.active() ? 'addClass' : 'removeClass'](active);
                }
            })
            .change();
    });
};
"use strict";
$.fn.elfinderfilterbutton = function(cmd) {
    return this.each(function() {
        //if (cmd.filterFolder != '') {
        //    cmd.filterState = cmd.filterFolder == cmd.fm.cwd().hash ? cmd.filterState : 'All';
        //} else {
        //    cmd.filterState = 'All';
        //}

        var fm = cmd.fm,
            result = false,
            c = 'class',
            name = cmd.name,
            disabled = fm.res(c, 'disabled'),
            hover = fm.res(c, 'hover'),
            item = 'elfinder-button-menu-item',
            filter = function(val) {
                if (val) {
                    cmd.exec(val).done(function() {
                        result = true;
                    });
                } else {
                    cmd.fm.trigger('filterend');
                }
            },
            filters = ['All', 'Crypt', 'Sign', 'NotCryptSign'],
            abort = function() {
                if (result) {
                    result = false;
                    cmd.fm.trigger('filterend');
                }
            },
            button = $(this).addClass('ui-state-default elfinder-button elfinder-menubutton elfiner-button-' + name + ' ui-elfinder-button-last')
                .attr('title', cmd.title),
            text = $('<div class="btn-group open elfinder-link-button"><a class="filter">' + fm.i18n('filter' + cmd.filterState) + '</a></div>')
                .click(function(e) {
                    if (!button.is('.' + disabled)) {
                        e.stopPropagation();
                        menu.is(':hidden') && cmd.fm.getUI().click();
                        menu.slideToggle(100);
                    }
                })
                .appendTo(button)
                .hover(function(e) {
                    !button.is('.' + disabled) && button.toggleClass(hover);
                }),
            mtext = $('<label class="left">' + cmd.title + '</label>').appendTo(button),

            menu = $('<div class="ui-widget ui-widget-content elfinder-button-menu ui-corner-all"/>')
                .hide()
                .appendTo(button)
                .zIndex(12 + button.zIndex())
                .delegate('.' + item, 'hover', function() { $(this).toggleClass(hover); })
                .delegate('.' + item, 'click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    hide();
                }),
            hide = function() { menu.hide(); },
            clearMenu = function() {
                menu.text("");
            },
            initMenu = function() {
                $.each(filters, function(i, value) {
                    menu.append($('<div class="' + item + '" rel="' + value + '">'
                            + fm.i18n('filter' + value) + '</div>')
                        .click(function(e) {
                            var t = $(this).attr('rel');
                            cmd.filterState = t;

                            cmd.filterFolder = fm.cwd().hash;
                            $($.find('.btn-group a.filter')).text(fm.i18n('filter' + t));
                            filter(t);
                        }));
                });
            };

        initMenu();
        fm.bind('disable select', hide).getUI().click(hide);

        if (menu.children().length > 1) {
            cmd.change(function() {
                button.toggleClass(disabled, cmd.disabled());
            }).change();

        } else {
            button.addClass(disabled);
        }

        cmd.fm
            .error(function() {
                //input.unbind('keydown');
            })
            .select(function() {
                //input.blur();
            })
            .bind('filterend', function() {
                cmd.filterState = 'NotCryptSign';
                $('.btn-group.open.elfinder-link-button a.filter').text(fm.i18n('filter' + 'NotCryptSign'));
            });
        //.viewchange(abort);
    });
};
"use strict";
$.fn.elfindercryptxdialog = function(opts) {
    var dialog, modal;

    if (typeof (opts) == 'string' && (dialog = this.closest('.window.alert')).length && (modal = dialog.parent('#modal')).length) {
        if (opts == 'open') {
            modal.css('display') == 'none' && modal.fadeIn(120, function() {
                dialog.trigger('open');
            });
        } else if (opts == 'close') {
            modal.css('display') != 'none' && modal.hide() && dialog.trigger('close');
        } else if (opts == 'destroy') {
            modal.hide().remove();
        } else if (opts == 'toTop') {
            //modal.trigger('totop');
        }
    }

    opts = $.extend({}, $.fn.elfindercryptxdialog.defaults, opts);

    this.filter(':not(.content, .content-group)').each(function() {
        var parent = $(this).parent(),
            self = $('<div/>').addClass('content'),
            messagepan = $('<div id="message-panel"/>').appendTo(self),
            contgr = $(this).addClass("content-group mess-box").appendTo(messagepan),
            modal = $('<div/>').attr('id', 'modal').hide().appendTo(parent),
            clactive = 'elfinder-dialog-active',
            cldialog = 'elfinder-dialog',
            clnotify = 'elfinder-dialog-notify',
            clhover = 'ui-state-hover',
            id = parseInt(Math.random() * 1000000),
            buttonset = $('<div class="btn-group"/>'),

            dialog = $('<div class="window alert ' + cldialog + ' ' + opts.cssClass + '"/>') //ui-dialog ui-widget ui-widget-content ui-corner-all ui-draggable std42-dialog 
                .append(self)
                .appendTo(modal)
                .bind('open', function() {
                    typeof (opts.open) == 'function' && $.proxy(opts.open, self[0])();
                })
                .bind('close', function() {
                    setTimeout(function() {
                        parent.mousedown().click();
                    }, 10);

                    if (typeof (opts.close) == 'function') {
                        $.proxy(opts.close, self[0])();
                    } else if (opts.destroyOnClose) {
                        modal.hide().remove();
                    }
                })
                .data({ modal: opts.modal });


        if (opts.closeOnEscape) {
            $(document).bind('keyup.' + id, function(e) {
                if (e.keyCode == $.ui.keyCode.ESCAPE && dialog.is('.' + clactive)) {
                    self.elfindercryptxdialog('close');
                    $(document).unbind('keyup.' + id);
                }
            });
        }
        dialog.prepend(
            $('<div class="header"><h2>' + opts.title + '</h2></div>')
            .prepend($('<div class="close"></div>')
                .mousedown(function(e) {
                    e.preventDefault();
                    self.elfindercryptxdialog('close');
                }))
        );

        $.each(opts.buttons, function(name, cb) {
            var button;
            if (name.indexOf("Отмена") == -1) button = $('<div class="btn btn-green">' + name + '</div>');
            else button = $('<div class="btn">' + name + '</div>');
            //var button = $('<button type="button" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only"><span class="ui-button-text">' + name + '</span></button>')
            button
                .click($.proxy(cb, self[0]))
                .hover(function(e) { $(this)[e.type == 'mouseenter' ? 'focus' : 'blur'](); })
                .focus(function() { $(this).addClass(clhover); })
                .blur(function() { $(this).removeClass(clhover); })
                .keydown(function(e) {
                    var next;

                    if (e.keyCode == $.ui.keyCode.ENTER) {
                        $(this).click();
                    } else if (e.keyCode == $.ui.keyCode.TAB) {
                        next = $(this).next('.ui-button');
                        next.length ? next.focus() : $(this).parent().children('.ui-button:first').focus();
                    }
                });
            buttonset.prepend(button);
        });

        buttonset.children().length && messagepan.append(buttonset);

        typeof (opts.create) == 'function' && $.proxy(opts.create, this)();

        opts.autoOpen && self.elfindercryptxdialog('open');

    });

    return this;
};
$.fn.elfindercryptxdialog.defaults = {
    cssClass: '',
    title: '',
    modal: false,
    resizable: true,
    autoOpen: true,
    closeOnEscape: true,
    destroyOnClose: false,
    buttons: {},
    position: null,
    width: 320,
    height: 'auto',
    minWidth: 200,
    minHeight: 110
};
"use strict";
$.fn.elfinderbottomaddpanel = function(fm, opts) {
    this.not('.elfinder-bottomaddpanel').each(function() {
        var c = 'class',
            green = 'ui-elfinder-button-green',
            mainclass = 'ui-widget-content ui-corner-all elfinder-buttonset',
            disabled = fm.res(c, 'disabled'),
            hover = fm.res(c, 'hover'),
            commands = fm._commands,
            cmd = commands['add'],
            buttons = $('<div class="buttons"/>'),
            cancelB = $('<div class="elfinder-buttonset">' +
                    '<div class="ui-state-default elfinder-button elfinder-link-button" title="' + fm.i18n('cmdcancel') + '">' +
                    '<a class="elfinder-button-text">' + fm.i18n('cmdcancel2') + '</a></div>' +
                    '</div>')
                .click(function() {
                    if (parent.Master && parent.Master.OpenFilesEventHandler) {
                        parent.Master.OpenFilesEventHandler('close');
                    }
                }),
            addBut = $('<div class="elfinder-buttonset btn btn-big btn-green">' + fm.i18n('cmdadd') + '</div>')
                .click(function() {
                    if (!addBut.is('.' + disabled) && cmd) {
                        cmd.exec();
                    }
                }),
            self = $(this).addClass('ui-widget-header ui-helper-clearfix ui-corner-bottom elfinder-bottomaddpanel')
                .css('height', '38px')
                .css('font-size', '12px')
                .prepend(buttons);


        cmd.change(function() {
                if (cmd.disabled()) {
                    addBut.removeClass(hover).addClass(disabled);
                } else {
                    addBut.removeClass(disabled);
                }
            })
            .change();

        buttons.prepend(cancelB);
        buttons.append(addBut);
        //$.each(includedCommands, function (name, value) {
        //    var cmd, button, div=$("<div/>");
        //    if ((cmd = commands[value])) {
        //        div.addClass(mainclass);
        //        if (value == 'add') div.addClass(green);
        //        button = 'elfinder' + cmd.options.ui;
        //        $.fn[button] && div.prepend($('<div/>')[button](cmd)) && buttons.append(div);
        //    }
        //});

        self.prev().length && self.parent().append(this) && self.show();
    });

    return this;
};

$.fn.elfindermultiplyaddbutton = function (cmd) {
	
	return this.each(function() {
	    var fm = cmd.fm,
	        commands = fm._commands,
	        name = cmd.name,
	        c = 'class',
	        disabled = fm.res(c, 'disabled'),
	        hover = fm.res(c, 'hover'),
	        item = 'elfinder-button-menu-item',
	        includedCommands = ['upload', 'mkdir', 'paste'],

            button = $(this).addClass('elfinder-buttonset btn btn-big btn-green')
	            .attr('title', cmd.title)
	            .hover(function(e) {
	                !button.is('.' + disabled) && button.toggleClass(hover);
	            })
	            .click(function(e) {
	                if (!button.is('.' + disabled)) {
	                    e.stopPropagation();
	                    $.each(menu.children(), function() {
	                        var t = $(this).attr('rel');
	                        $(this).removeClass(disabled);
	                        $(this).removeClass(hover);
	                        var com;
	                        if (!(com = commands[t]) || com.getstate() != 0) {
	                            $(this).addClass(disabled);
	                        }
	                    });
	                    menu.is(':hidden') && cmd.fm.getUI().click();
	                    menu.slideToggle(100);
	                }
	            }),
            text = $(this).append('<span class="elfinder-button-text">' + cmd.title + '</span>'),
            //icon = $(this).append('<span class="caret"></span>'),
	        menu = $('<div class="ui-widget ui-widget-content elfinder-button-menu ui-corner-all"/>')
	            .hide()
	            .appendTo(button)
	            .zIndex(12 + button.zIndex())
	            .delegate('.' + item, 'hover', function() {
	                !$(this).is('.' + disabled) && $(this).toggleClass(hover);
	            })
	            .delegate('.' + item, 'click', function(e) {
	                var t = $(this).attr('rel');
	                if (t!='upload') {
	                    e.preventDefault();
	                    e.stopPropagation();

	                } else {
                        e.preventDefault();
                        e.stopPropagation();
                        $('.js-upload').click();
                    }
                    hide();
                    return false;
	            }),
	        
	        hide = function() { menu.hide(); },

            clearMenu = function () {
                menu.text("");
            },

            initMenu = function () {
                $.each(includedCommands, function (name, value) {
                    if (value == 'upload') {
                        var com;
                        if ((com = commands[value])) {
                            var form = $('<form style="overflow: hidden"/>'),
                                input = $('<input type="file" multiple="true" style="" class="js-upload" />')
				                    .change(function () {
				                        var _input = $(this);
				                        if (_input.val()) {
				                            com.exec({ input: _input.remove()[0] });
				                            input.clone(true).appendTo(form);
				                        }
				                    }).click(function(){menu.hide();}),
                                but = $('<div class="' + item + '" rel="' + value + '"><span class="elfinder-button-icon elfinder-button-icon-'
                                + value + '"/><span class="ui-icon ui-icon-arrowthick-1-s"/>' + fm.i18n('add' + value) + '</div>');
                            form.append(input.clone(true));
                            menu.append(but).parent().append(form);
                            com.change(function () {
                                form[com.disabled() ? 'hide' : 'show']();
                            })
		                    .change();

                        }
                    } else {
                        menu.append($('<div class="' + item + '" rel="' + value + '"><span class="elfinder-button-icon elfinder-button-icon-'
                            + value + '"/><span class="ui-icon ui-icon-arrowthick-1-s"/>' + fm.i18n('add' + value) + '</div>')
                            .click(function(e) {
                                var t = $(this).attr('rel');
                                !$(this).is('.' + disabled) && cmd.exec(t);
                            }));
                    }
                });
            },

            addCommand = function (comName) {
                includedCommands.push(comName);
                clearMenu();
                initMenu();
            };

	    initMenu();
	    fm.bind('disable select', hide).getUI().click(hide);

	    if (menu.children().length > 1) {
	        cmd.change(function () {
	            button.toggleClass(disabled, cmd.disabled());
	        }).change();

	    } else {
	        button.addClass(disabled);
	    }
	});
	
}



"use strict";
/**
 * @class  elFinder command "back"
 * Open last visited folder
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.back = function() {
    this.alwaysEnabled = true;
    this.updateOnSelect = false;
    this.shortcuts = [
        {
            pattern: 'ctrl+left backspace'
        }
    ];

    this.getstate = function() {
        return this.fm.history.canBack() ? 0 : -1;
    };
    this.exec = function() {
        return this.fm.history.back();
    };
};
/**
 * @class  elFinder command "forward"
 * Open next visited folder
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.forward = function() {
    this.alwaysEnabled = true;
    this.updateOnSelect = true;
    this.shortcuts = [
        {
            pattern: 'ctrl+right'
        }
    ];

    this.getstate = function() {
        return this.fm.history.canForward() ? 0 : -1;
    };
    this.exec = function() {
        return this.fm.history.forward();
    };
}
/**
 * @class  elFinder command "reload"
 * Sync files and folders
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.reload = function() {

    this.alwaysEnabled = true;
    this.updateOnSelect = true;

    //this.shortcuts = [{
    //	pattern     : 'ctrl+shift+r f5'
    //}];

    this.getstate = function() {
        return 0;
    };
    this.exec = function() {
        var fm = this.fm,
            dfrd = fm.sync(),
            timeout = setTimeout(function() {
                fm.notify({ type: 'reload', cnt: 1, hideCnt: true });
                dfrd.always(function() { fm.notify({ type: 'reload', cnt: -1 }); });
            }, fm.notifyDelay);

        return dfrd.always(function() {
            clearTimeout(timeout);
            fm.trigger('reload');
        });
    };
}
"use strict";
/**
 * @class  elFinder command "up"
 * Go into parent directory
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.up = function() {
    this.alwaysEnabled = true;
    this.updateOnSelect = false;

    this.shortcuts = [
        {
            pattern: 'ctrl+up'
        }
    ];

    this.getstate = function() {
        return this.fm.cwd().phash ? 0 : -1;
    };
    this.exec = function() {
        return this.fm.cwd().phash ? this.fm.exec('open', this.fm.cwd().phash) : $.Deferred().reject();
    };
};

elFinder.prototype.commands.home = function() {
    this.title = 'Home';
    this.alwaysEnabled = true;
    this.updateOnSelect = false;
    this.shortcuts = [
        {
            pattern: 'ctrl+home ctrl+shift+up',
            description: 'Home'
        }
    ];

    this.getstate = function() {
        var root = this.fm.root(),
            cwd = this.fm.cwd().hash;

        return root && cwd && root != cwd ? 0 : -1;
    };
    this.exec = function() {
        return this.fm.exec('open', this.fm.root());
    };
}
"use strict";
/**
 * @class elFinder command "copy".
 * Put files in filemanager clipboard.
 *
 * @type  elFinder.command
 * @author  Dmitry (dio) Levashov
 */
elFinder.prototype.commands.copy = function() {

    this.shortcuts = [
        {
            pattern: 'ctrl+c ctrl+insert'
        }
    ];

    this.getstate = function(sel) {
        var sel = this.files(sel),
            cnt = sel.length;

        return cnt && $.map(sel, function(f) { return f.phash && f.read ? f : null; }).length == cnt ? 0 : -1;
    };
    this.exec = function(hashes) {
        var fm = this.fm,
            dfrd = $.Deferred()
                .fail(function(error) {
                    fm.error(error);
                });

        $.each(this.files(hashes), function(i, file) {
            if (!(file.read && file.phash)) {
                return !dfrd.reject(['errCopy', file.name, 'errPerm']);
            }
        });

        return dfrd.state() == 'rejected' ? dfrd : dfrd.resolve(fm.clipboard(this.hashes(hashes)));
    };
};
"use strict";
/**
 * @class  elFinder command "paste"
 * Paste filesfrom clipboard into directory.
 * If files pasted in its parent directory - files duplicates will created
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.paste = function() {
    this.updateOnSelect = false;

    this.handlers = {
        changeclipboard: function() { this.update(); }
    };
    this.shortcuts = [
        {
            pattern: 'ctrl+v shift+insert'
        }
    ];

    this.getstate = function(dst) {
        if (this._disabled) {
            return -1;
        }
        if (dst) {
            if ($.isArray(dst)) {
                if (dst.length != 1) {
                    return -1;
                }
                dst = this.fm.file(dst[0]);
            }
        } else {
            dst = this.fm.cwd();
        }

        return this.fm.clipboard().length && dst.mime == 'directory' && dst.write ? 0 : -1;
    };
    this.exec = function(dst) {
        var self = this,
            fm = self.fm,
            dst = dst ? this.files(dst)[0] : fm.cwd(),
            files = fm.clipboard(),
            cnt = files.length,
            cut = cnt ? files[0].cut : false,
            error = cut ? 'errMove' : 'errCopy',
            fpaste = [],
            fcopy = [],
            dfrd = $.Deferred()
                .fail(function(error) {
                    error && fm.error(error);
                }),
            copy = function(files) {
                return files.length && fm._commands.duplicate
                    ? fm.exec('duplicate', files)
                    : $.Deferred().resolve();
            },
            paste = function(files) {
                var dfrd = $.Deferred(),
                    existed = [],
                    intersect = function(files, names) {
                        var ret = [],
                            i = files.length;

                        while (i--) {
                            $.inArray(files[i].name, names) !== -1 && ret.unshift(i);
                        }
                        return ret;
                    },
                    confirm = function(ndx) {
                        var i = existed[ndx],
                            file = files[i],
                            last = ndx == existed.length - 1;

                        if (!file) {
                            return;
                        }

                        fm.confirm({
                            title: fm.i18n(cut ? 'moveFiles' : 'copyFiles'),
                            text: fm.i18n(['errExists', file.name, 'confirmRepl']),
                            all: !last,
                            accept: {
                                label: 'btnYes',
                                callback: function(all) {
                                    !last && !all
                                        ? confirm(++ndx)
                                        : paste(files);
                                }
                            },
                            reject: {
                                label: 'btnNo',
                                callback: function(all) {
                                    var i;

                                    if (all) {
                                        i = existed.length;
                                        while (ndx < i--) {
                                            files[existed[i]].dublicate = true;
                                        }
                                    } else {
                                        files[existed[ndx]].dublicate = true;
                                    }

                                    !last && !all
                                        ? confirm(++ndx)
                                        : paste(files);
                                }
                            },
                            cancel: {
                                label: 'btnCancel',
                                callback: function() {
                                    dfrd.resolve();
                                }
                            }
                        });
                    },
                    valid = function(names) {
                        existed = intersect(files, names);
                        existed.length ? confirm(0) : paste(files);
                    },
                    paste = function(files) {
                        var //files  = $.map(files, function(file) { return !file.remove ? file : null } ),
                            cnt = files.length,
                            groups = {},
                            args = [],
                            dublicateIndexes = [],
                            src;

                        if (!cnt) {
                            return dfrd.resolve();
                        }

                        src = files[0].phash;
                        dublicateIndexes = $.map(files, function(f, i) { return f.dublicate ? i : null; });
                        files = $.map(files, function(f) { return f.hash; });

                        fm.request({
                                data: { cmd: 'paste', dst: dst.hash, targets: files, cut: cut ? 1 : 0, src: src, dublindexes: dublicateIndexes },
                                notify: { type: cut ? 'move' : 'copy', cnt: cnt }
                            })
                            .always(function() {
                                dfrd.resolve();
                                fm.unlockfiles({ files: files });
                            });
                    };

                if (self._disabled || !files.length) {
                    return dfrd.resolve();
                }


                if (fm.oldAPI) {
                    paste(files);
                } else {

                    if (!fm.option('copyOverwrite')) {
                        paste(files);
                    } else {

                        dst.hash == fm.cwd().hash
                            ? valid($.map(fm.files(), function(file) { return file.phash == dst.hash ? file.name : null; }))
                            : fm.request({
                                data: { cmd: 'ls', target: dst.hash },
                                notify: { type: 'prepare', cnt: 1, hideCnt: true },
                                preventFail: true
                            })
                            .always(function(data) {
                                valid(data.list || []);
                            });
                    }
                }

                return dfrd;
            },
            parents,
            fparents;


        if (!cnt || !dst || dst.mime != 'directory') {
            return dfrd.reject();
        }

        if (!dst.write) {
            return dfrd.reject([error, files[0].name, 'errPerm']);
        }

        parents = fm.parents(dst.hash);

        $.each(files, function(i, file) {
            if (!file.read) {
                return !dfrd.reject([error, files[0].name, 'errPerm']);
            }

            if (cut && file.locked) {
                return !dfrd.reject(['errLocked', file.name]);
            }

            if ($.inArray(file.hash, parents) !== -1) {
                return !dfrd.reject(['errCopyInItself', file.name]);
            }

            fparents = fm.parents(file.hash);
            fparents.pop();
            if ($.inArray(dst.hash, fparents) !== -1) {

                if ($.map(fparents, function(h) {
                    var d = fm.file(h);
                    return d.phash == dst.hash && d.name == file.name ? d : null;
                }).length) {
                    return !dfrd.reject(['errReplByChild', file.name]);
                }
            }

            if (file.phash == dst.hash) {
                fcopy.push(file.hash);
            } else {
                fpaste.push({
                    hash: file.hash,
                    phash: file.phash,
                    name: file.name
                });
            }
        });

        if (dfrd.state() == 'rejected') {
            return dfrd;
        }

        return $.when(
            copy(fcopy),
            paste(fpaste)
        ).always(function() {
            cut && fm.clipboard([]);
        });
    };
};
"use strict"; /**
 * @class  elFinder command "open"
 * Enter folder or open files in new windows
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.open = function() {
    this.alwaysEnabled = true;

    this._handlers = {
        dblclick: function(e) {
            e.preventDefault();
            if (e.data && e.data.file && e.data.file != "") this.exec(e.data.file);
            else this.exec();
        },
        'select enable disable reload': function(e) { this.update(e.type == 'disable' ? -1 : void(0)); }
    };
    this.shortcuts = [
        {
            pattern: 'ctrl+down numpad_enter' + (this.fm.OS != 'mac' && ' enter')
        }
    ];

    this.getstate = function(sel) {
        var sel = this.files(sel),
            cnt = sel.length;

        return cnt == 1
            ? 0
            : cnt ? ($.map(sel, function(file) { return file.mime == 'directory' ? null : file; }).length == cnt ? 0 : -1) : -1;
    };
    this.exec = function(hashes) {

        var fm = this.fm,
            dfrd = $.Deferred().fail(function(error) { error && fm.error(error); }),
            files = this.files(hashes),
            cnt = files.length,
            file,
            url,
            s,
            w;

        if (!cnt) {
            return dfrd.reject();
        }

        // open folder
        if (cnt == 1 && (file = files[0]) && file.mime == 'directory') {
            return file && !file.read
                ? dfrd.reject(['errOpen', file.name, 'errPerm'])
                : fm.request({
                    data: { cmd: 'open', target: file.thash || file.hash },
                    notify: { type: 'open', cnt: 1, hideCnt: true },
                    syncOnFail: true
                });
        }

        //if (fm.isModal) {
        return dfrd.reject();
        //}

        files = $.map(files, function(file) { return file.mime != 'directory' ? file : null; });

        // nothing to open or files and folders selected - do nothing
        if (cnt != files.length) {
            return dfrd.reject();
        }

        // open files
        cnt = files.length;
        while (cnt--) {
            file = files[cnt];

            if (!file.read) {
                return dfrd.reject(['errOpen', file.name, 'errPerm']);
            }

            if (!(url = fm.url( /*file.thash || */file.hash))) {
                url = fm.options.url;
                url = url + (url.indexOf('?') === -1 ? '?' : '&')
                    + (fm.oldAPI ? 'cmd=open&current=' + file.phash : 'cmd=file')
                    + '&target=' + file.hash;
            }

            // set window size for image if set
            if (file.dim) {
                s = file.dim.split('x');
                w = 'width=' + (parseInt(s[0]) + 20) + ',height=' + (parseInt(s[1]) + 20);
            } else {
                w = 'width=' + parseInt(2 * $(window).width() / 3) + ',height=' + parseInt(2 * $(window).height() / 3);
            }

            var wnd = window.open('', 'new_window', w + ',top=50,left=50,scrollbars=yes,resizable=yes');
            if (!wnd) {
                return dfrd.reject('errPopup');
            }

            var form = document.createElement("form");
            form.action = fm.options.url;
            form.method = 'POST';
            form.target = 'new_window';
            form.style.display = 'none';
            var params = $.extend({}, fm.options.customData, {
                cmd: 'file',
                target: file.hash
            });
            $.each(params, function(key, val) {
                var input = document.createElement("input");
                input.name = key;
                input.value = val;
                form.appendChild(input);
            });

            document.body.appendChild(form);
            form.submit();
        }
        return dfrd.resolve(hashes);
    };
};
"use strict"; /**
 * @class  elFinder command "rm"
 * Delete files
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.rm = function() {

    this.shortcuts = [
        {
            pattern: 'delete ctrl+backspace'
        }
    ];

    this.getstate = function(sel) {
        var fm = this.fm;
        sel = sel || fm.selected();
        return !this._disabled && sel.length && $.map(sel, function(h) {
                var f = fm.file(h);
                return f && f.phash && !f.locked ? h : null;
            }).length == sel.length
            ? 0 : -1;
    };
    this.exec = function(hashes) {
        var self = this,
            fm = this.fm,
            dfrd = $.Deferred()
                .fail(function(error) {
                    error && fm.error(error);
                }),
            files = this.files(hashes),
            cnt = files.length,
            cwd = fm.cwd().hash,
            goroot = false;

        if (!cnt || this._disabled) {
            return dfrd.reject();
        }

        $.each(files, function(i, file) {
            if (!file.phash) {
                return !dfrd.reject(['errRm', file.name, 'errPerm']);
            }
            if (file.locked) {
                return !dfrd.reject(['errLocked', file.name]);
            }
            if (file.hash == cwd) {
                goroot = fm.root(file.hash);
            }
        });

        if (dfrd.state() == 'pending') {
            files = this.hashes(hashes);

            fm.confirm({
                title: 'Внимание!',
                text: 'confirmRm',
                accept: {
                    label: 'btnRm',
                    callback: function() {
                        fm.lockfiles({ files: files });
                        fm.request({
                                data: { cmd: 'rm', targets: files },
                                notify: { type: 'rm', cnt: cnt },
                                preventFail: true
                            })
                            .fail(function(error) {
                                dfrd.reject(error);
                            })
                            .done(function(data) {
                                    dfrd.done(data);
                                    goroot && fm.exec('open', goroot);
                                }
                            ).always(function() {
                                fm.unlockfiles({ files: files });
                            });
                    }
                },
                cancel: {
                    label: 'btnCancel',
                    callback: function() { dfrd.reject(); }
                }
            });
        }

        return dfrd;
    };
};
"use strict";
/**
 * @class elFinder command "info". 
 * Display dialog with file properties.
 *
 * @author Dmitry (dio) Levashov, dio@std42.ru
 **/
elFinder.prototype.commands.info = function() {
    var m = 'msg',
        fm = this.fm,
        spclass = 'elfinder-info-spinner',
        msg = {
            calc: fm.i18n('calc'),
            size: fm.i18n('size'),
            unknown: fm.i18n('unknown'),
            path: fm.i18n('path'),
            aliasfor: fm.i18n('aliasfor'),
            modify: fm.i18n('modify'),
            perms: fm.i18n('perms'),
            locked: fm.i18n('locked'),
            dim: fm.i18n('dim'),
            kind: fm.i18n('kind'),
            files: fm.i18n('files'),
            folders: fm.i18n('folders'),
            items: fm.i18n('items'),
            yes: fm.i18n('yes'),
            no: fm.i18n('no'),
            link: fm.i18n('link')
        };

    this.tpl = {
        main: '<div class="ui-helper-clearfix elfinder-info-title"><span class="elfinder-cwd-icon {class} ui-corner-all"/>{title}</div><table class="elfinder-info-tb">{content}</table>',
        itemTitle: '<strong>{name}</strong><span class="elfinder-info-kind">{kind}</span>',
        groupTitle: '<strong>{items}: {num}</strong>',
        row: '<tr><td>{label} : </td><td>{value}</td></tr>',
        spinner: '<span>{text}</span> <span class="' + spclass + '"/>'
    };
    this.alwaysEnabled = true;
    this.updateOnSelect = false;
    this.shortcuts = [
        {
            pattern: 'ctrl+i'
        }
    ];

    this.init = function() {
        $.each(msg, function(k, v) {
            msg[k] = fm.i18n(v);
        });
    };
    this.getstate = function() {
        return 0;
    };
    this.exec = function(hashes) {
        var files = this.files(hashes);
        if (! files.length) {
            files = this.files([this.fm.cwd().hash]);
        }
        var self = this,
            fm = this.fm,
            o = this.options,
            tpl = this.tpl,
            row = tpl.row,
            cnt = files.length,
            content = [],
            view = tpl.main,
            l = '{label}',
            v = '{value}',
            opts = {
                title: this.title,
                width: 'auto',
                close: function() { $(this).elfinderdialog('destroy'); }
            },
            count = [],
            replSpinner = function(msg) { dialog.find('.' + spclass).parent().text(msg); },
            id = fm.namespace + '-info-' + $.map(files, function(f) { return f.hash; }).join('-'),
            dialog = fm.getUI().find('#' + id),
            size,
            tmb,
            file,
            title,
            dcnt;

        if (!cnt) {
            return $.Deferred().reject();
        }

        if (dialog.length) {
            dialog.elfinderdialog('toTop');
            return $.Deferred().resolve();
        }


        if (cnt == 1) {
            file = files[0];

            view = view.replace('{class}', fm.mime2class(file.mime));
            title = tpl.itemTitle.replace('{name}', fm.escape(file.i18 || file.name)).replace('{kind}', fm.mime2kind(file));

            if (file.tmb) {
                tmb = fm.option('tmbUrl') + file.tmb;
            }

            if (!file.read) {
                size = msg.unknown;
            } else if (file.mime != 'directory' || file.alias) {
                size = fm.formatSize(file.size);
            } else {
                size = tpl.spinner.replace('{text}', msg.calc);
                count.push(file.hash);
            }

            content.push(row.replace(l, msg.size).replace(v, size));
            file.alias && content.push(row.replace(l, msg.aliasfor).replace(v, file.alias));
            content.push(row.replace(l, msg.path).replace(v, fm.escape(fm.path(file.hash, true))));
            if (file.read) {
                var href;
                if (o.nullUrlDirLinkSelf && file.mime == 'directory' && file.url === null) {
                    var loc = window.location;
                    href = loc.pathname + loc.search + '#elf_' + file.hash;
                } else {
                    href = fm.url(file.hash);
                }
                content.push(row.replace(l, msg.link).replace(v, '<a href="' + href + '" target="_blank">' + file.name + '</a>'));
            }

            if (file.dim) { // old api
                content.push(row.replace(l, msg.dim).replace(v, file.dim));
            } else if (file.mime.indexOf('image') !== -1) {
                if (file.width && file.height) {
                    content.push(row.replace(l, msg.dim).replace(v, file.width + 'x' + file.height));
                } else {
                    content.push(row.replace(l, msg.dim).replace(v, tpl.spinner.replace('{text}', msg.calc)));
                    fm.request({
                            data: { cmd: 'dim', target: file.hash },
                            preventDefault: true
                        })
                        .fail(function() {
                            replSpinner(msg.unknown);
                        })
                        .done(function(data) {
                            replSpinner(data.dim || msg.unknown);
                            if (data.dim) {
                                var dim = data.dim.split('x');
                                var rfile = fm.file(file.hash);
                                rfile.width = dim[0];
                                rfile.height = dim[1];
                            }
                        });
                }
            }


            content.push(row.replace(l, msg.modify).replace(v, fm.formatDate(file)));
            content.push(row.replace(l, msg.perms).replace(v, fm.formatPermissions(file)));
            content.push(row.replace(l, msg.locked).replace(v, file.locked ? msg.yes : msg.no));
        } else {
            view = view.replace('{class}', 'elfinder-cwd-icon-group');
            title = tpl.groupTitle.replace('{items}', msg.items).replace('{num}', cnt);
            dcnt = $.map(files, function(f) { return f.mime == 'directory' ? 1 : null; }).length;
            if (!dcnt) {
                size = 0;
                $.each(files, function(h, f) {
                    var s = parseInt(f.size);

                    if (s >= 0 && size >= 0) {
                        size += s;
                    } else {
                        size = 'unknown';
                    }
                });
                content.push(row.replace(l, msg.kind).replace(v, msg.files));
                content.push(row.replace(l, msg.size).replace(v, fm.formatSize(size)));
            } else {
                content.push(row.replace(l, msg.kind).replace(v, dcnt == cnt ? msg.folders : msg.folders + ' ' + dcnt + ', ' + msg.files + ' ' + (cnt - dcnt)));
                content.push(row.replace(l, msg.size).replace(v, tpl.spinner.replace('{text}', msg.calc)));
                count = $.map(files, function(f) { return f.hash; });

            }
        }

        view = view.replace('{title}', title).replace('{content}', content.join(''));

        dialog = fm.dialog(view, opts);
        dialog.attr('id', id); // load thumbnail
        if (tmb) {
            $('<img/>')
                .load(function() { dialog.find('.elfinder-cwd-icon').css('background', 'url("' + tmb + '") center center no-repeat'); })
                .attr('src', tmb);
        }

        // send request to count total size
        if (count.length) {
            fm.request({
                    data: { cmd: 'size', targets: count },
                    preventDefault: true
                })
                .fail(function() {
                    replSpinner(msg.unknown);
                })
                .done(function(data) {
                    var size = parseInt(data.size);
                    replSpinner(size >= 0 ? fm.formatSize(size) : msg.unknown);
                });
        }

    };
};
"use strict";
/**
 * @class elFinder command "duplicate"
 * Create file/folder copy with suffix "copy Number"
 *
 * @type  elFinder.command
 * @author  Dmitry (dio) Levashov
 */
elFinder.prototype.commands.duplicate = function() {
    var fm = this.fm;

    this.getstate = function(sel) {
        var sel = this.files(sel),
            cnt = sel.length;

        return !this._disabled && cnt && fm.cwd().write && $.map(sel, function(f) { return f.phash && f.read ? f : null; }).length == cnt ? 0 : -1;
    };
    this.exec = function(hashes) {
        var fm = this.fm,
            files = this.files(hashes),
            cnt = files.length,
            dfrd = $.Deferred()
                .fail(function(error) {
                    error && fm.error(error);
                }),
            args = [];

        if (!cnt || this._disabled) {
            return dfrd.reject();
        }

        $.each(files, function(i, file) {
            if (!file.read || !fm.file(file.phash).write) {
                return !dfrd.reject(['errCopy', file.name, 'errPerm']);
            }
        });

        if (dfrd.state() == 'rejected') {
            return dfrd;
        }

        return fm.request({
            data: { cmd: 'duplicate', targets: this.hashes(hashes) },
            notify: { type: 'copy', cnt: cnt }
        });

    };
};
"use strict";
/**
 * @class elFinder command "rename". 
 * Rename selected file.
 *
 * @author Dmitry (dio) Levashov, dio@std42.ru
 **/
elFinder.prototype.commands.rename = function() {

    this.shortcuts = [
        {
            pattern: 'f2' + (this.fm.OS == 'mac' ? ' enter' : '')
        }
    ];

    this.getstate = function() {
        var sel = this.fm.selectedFiles();

        return !this._disabled && sel.length == 1 && sel[0].phash && !sel[0].locked ? 0 : -1;
    };
    this.exec = function() {
        var fm = this.fm,
            cwd = fm.getUI('cwd'),
            sel = fm.selected(),
            cnt = sel.length,
            file = fm.file(sel.shift()),
            filename = '.elfinder-cwd-filename',
            dfrd = $.Deferred()
                .fail(function(error) {
                    var parent = input.parent(),
                        name = fm.escape(file.name);


                    if (parent.length) {
                        input.remove();
                        parent.html(name);
                    } else {
                        cwd.find('#' + file.hash).find(filename).html(name);
                        setTimeout(function() {
                            cwd.find('#' + file.hash).click();
                        }, 50);
                    }

                    error && fm.error(error);
                })
                .always(function() {
                    fm.enable();
                }),
            input = $('<input type="text"/>')
                .keydown(function(e) {
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                    if (e.keyCode == $.ui.keyCode.ESCAPE) {
                        dfrd.reject();
                    } else if (e.keyCode == $.ui.keyCode.ENTER) {
                        input.blur();
                    }
                })
                .mousedown(function(e) {
                    e.stopPropagation();
                })
                .dblclick(function(e) {
                    e.stopPropagation();
                    e.preventDefault();
                })
                .blur(function() {
                    var name = $.trim(input.val()),
                        parent = input.parent();

                    if (parent.length) {
                        if (input[0].setSelectionRange) {
                            input[0].setSelectionRange(0, 0);
                        }
                        if (name == file.name) {
                            return dfrd.reject();
                        }
                        if (!name) {
                            return dfrd.reject('errInvNameCr' + (file.mime == "directory" ? 'Dir' : ''));
                        }
                        if (name.match("[\/|\\|\:|\*|\"|\<|\>|\#|\|\$]")) {
                            return dfrd.reject('errInvSym' + (file.mime == "directory" ? 'Dir' : ''));
                        }
                        if (name.length > 100) {
                            return dfrd.reject('errInvNameSize' + (file.mime == "directory" ? 'Dir' : ''));
                        }

                        if (fm.fileByName(name, file.phash)) {
                            return dfrd.reject(['errExists', name]);
                        }
                        if (file.mime != "directory") {
                            var extNew = fm.getExtension(name);
                            var extOld = fm.getExtension(file.name);
                            if (!extNew) {
                                return dfrd.reject('errInvNameCr');
                            }
                            if (extOld[0] && extNew[0] && extNew[0] != extOld[0]) {
                                return dfrd.reject('errInvExtDifferent');
                            }
                            var nameWitoutext = name.split('.')[0];
                            if (nameWitoutext == "") {
                                return dfrd.reject('errInvNameCr');
                            }
                        }
                        parent.html(fm.escape(name));
                        fm.lockfiles({ files: [file.hash] });
                        fm.request({
                                data: { cmd: 'rename', target: file.hash, name: name },
                                notify: { type: 'rename', cnt: 1 }
                            })
                            .fail(function(error) {
                                dfrd.reject();
                                fm.sync();
                            })
                            .done(function(data) {
                                dfrd.resolve(data);
                            })
                            .always(function() {
                                fm.unlockfiles({ files: [file.hash] });
                            });

                    }
                }),
            node = cwd.find('#' + file.hash).find(filename).empty().append(input.val(file.name)),
            name = input.val().replace(/\.((tar\.(gz|bz|bz2|z|lzo))|cpio\.gz|ps\.gz|xcf\.(gz|bz2)|[a-z0-9]{1,4})$/ig, '');

        if (this.disabled()) {
            return dfrd.reject();
        }

        if (!file || cnt > 1 || !node.length) {
            return dfrd.reject('errCmdParams', this.title);
        }

        if (file.locked) {
            return dfrd.reject(['errLocked', file.name]);
        }

        fm.one('select', function() {
            input.parent().length && file && $.inArray(file.hash, fm.selected()) === -1 && input.blur();
        });
        input.select().focus();

        input[0].setSelectionRange && input[0].setSelectionRange(0, name.length);

        return dfrd;
    };
};
"use strict";
/**
 * @class  elFinder command "help"
 * "About" dialog
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.help = function() {
    var fm = this.fm,
        self = this,
        linktpl = '<div class="elfinder-help-link"> <a href="{url}">{link}</a></div>',
        linktpltgt = '<div class="elfinder-help-link"> <a href="{url}" target="_blank">{link}</a></div>',
        atpl = '<div class="elfinder-help-team"><div>{author}</div>{work}</div>',
        url = /\{url\}/,
        link = /\{link\}/,
        author = /\{author\}/,
        work = /\{work\}/,
        r = 'replace',
        prim = 'ui-priority-primary',
        sec = 'ui-priority-secondary',
        lic = 'elfinder-help-license',
        tab = '<li class="ui-state-default ui-corner-top"><a href="#{id}">{title}</a></li>',
        html = [
            '<div class="ui-tabs ui-widget ui-widget-content ui-corner-all elfinder-help">',
            '<ul class="ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all">'
        ],
        stpl = '<div class="elfinder-help-shortcut"><div class="elfinder-help-shortcut-pattern">{pattern}</div> {descrip}</div>',
        sep = '<div class="elfinder-help-separator"/>',


        about = function() {
            html.push('<div id="about" class="ui-tabs-panel ui-widget-content ui-corner-bottom"><div class="elfinder-help-logo"/>');
            html.push('<h3>elFinder</h3>');
            html.push('<div class="' + prim + '">' + fm.i18n('webfm') + '</div>');
            html.push('<div class="' + sec + '">' + fm.i18n('ver') + ': ' + fm.version + ', ' + fm.i18n('protocolver') + ': <span id="apiver"></span></div>');
            html.push('<div class="' + sec + '">jQuery/jQuery UI: ' + $().jquery + '/' + $.ui.version + '</div>');

            html.push(sep);

            html.push(linktpltgt[r](url, 'http://elfinder.org/')[r](link, fm.i18n('homepage')));
            html.push(linktpltgt[r](url, 'https://github.com/Studio-42/elFinder/wiki')[r](link, fm.i18n('docs')));
            html.push(linktpltgt[r](url, 'https://github.com/Studio-42/elFinder')[r](link, fm.i18n('github')));
            html.push(linktpltgt[r](url, 'http://twitter.com/elrte_elfinder')[r](link, fm.i18n('twitter')));

            html.push(sep);

            html.push('<div class="' + prim + '">' + fm.i18n('team') + '</div>');

            html.push(atpl[r](author, 'Dmitry "dio" Levashov &lt;dio@std42.ru&gt;')[r](work, fm.i18n('chiefdev')));
            html.push(atpl[r](author, 'Troex Nevelin &lt;troex@fury.scancode.ru&gt;')[r](work, fm.i18n('maintainer')));
            html.push(atpl[r](author, 'Alexey Sukhotin &lt;strogg@yandex.ru&gt;')[r](work, fm.i18n('contributor')));
            html.push(atpl[r](author, 'Naoki Sawada &lt;hypweb@gmail.com&gt;')[r](work, fm.i18n('contributor')));

            fm.i18[fm.lang].translator && html.push(atpl[r](author, fm.i18[fm.lang].translator)[r](work, fm.i18n('translator') + ' (' + fm.i18[fm.lang].language + ')'));

            html.push(sep);
            html.push('<div class="' + lic + '">' + fm.i18n('icons') + ': Pixelmixer, <a href="http://p.yusukekamiyamane.com" target="_blank">Fugue</a></div>');

            html.push(sep);
            html.push('<div class="' + lic + '">Licence: BSD Licence</div>');
            html.push('<div class="' + lic + '">Copyright © 2009-2011, Studio 42</div>');
            html.push('<div class="' + lic + '">„ …' + fm.i18n('dontforget') + ' ”</div>');
            html.push('</div>');
        },
        shortcuts = function() {
            var sh = fm.shortcuts();
            // shortcuts tab
            html.push('<div id="shortcuts" class="ui-tabs-panel ui-widget-content ui-corner-bottom">');

            if (sh.length) {
                html.push('<div class="ui-widget-content elfinder-help-shortcuts">');
                $.each(sh, function(i, s) {
                    html.push(stpl.replace(/\{pattern\}/, s[0]).replace(/\{descrip\}/, s[1]));
                });

                html.push('</div>');
            } else {
                html.push('<div class="elfinder-help-disabled">' + fm.i18n('shortcutsof') + '</div>');
            }


            html.push('</div>');
        },
        help = function() {
            // help tab
            html.push('<div id="help" class="ui-tabs-panel ui-widget-content ui-corner-bottom">');
            html.push('<a href="http://elfinder.org/forum/" target="_blank" class="elfinder-dont-panic"><span>DON\'T PANIC</span></a>');
            html.push('</div>');
            // end help
        },
        content;

    this.alwaysEnabled = true;
    this.updateOnSelect = false;
    this.state = 0;

    this.shortcuts = [
        {
            pattern: 'f1',
            description: this.title
        }
    ];

    setTimeout(function() {
        var parts = self.options.view || ['about', 'shortcuts', 'help'];

        $.each(parts, function(i, title) {
            html.push(tab[r](/\{id\}/, title)[r](/\{title\}/, fm.i18n(title)));
        });

        html.push('</ul>');

        $.inArray('about', parts) !== -1 && about();
        $.inArray('shortcuts', parts) !== -1 && shortcuts();
        $.inArray('help', parts) !== -1 && help();

        html.push('</div>');
        content = $(html.join(''));

        fm.one('load', function setapi() { content.find('#apiver').text(fm.api); });

        content.find('.ui-tabs-nav li')
            .hover(function() {
                $(this).toggleClass('ui-state-hover');
            })
            .children()
            .click(function(e) {
                var link = $(this);

                e.preventDefault();
                e.stopPropagation();

                if (!link.is('.ui-tabs-selected')) {
                    link.parent().addClass('ui-tabs-selected ui-state-active').siblings().removeClass('ui-tabs-selected').removeClass('ui-state-active');
                    content.find('.ui-tabs-panel').hide().filter(link.attr('href')).show();
                }

            })
            .filter(':first').click();

    }, 200);
    this.getstate = function() {
        return 0;
    };
    this.exec = function() {
        if (!this.dialog) {
            this.dialog = this.fm.dialog(content, { title: this.title, width: 530, autoOpen: false, destroyOnClose: false });
        }

        this.dialog.elfinderdialog('open').find('.ui-tabs-nav li a:first').click();
    };
};
"use strict";
/**
 * @class elFinder command "getfile". 
 * Return selected files info into outer callback.
 * For use elFinder with wysiwyg editors etc.
 *
 * @author Dmitry (dio) Levashov, dio@std42.ru
 **/
elFinder.prototype.commands.getfile = function() {
    var self = this,
        fm = this.fm,
        filter = function(files) {
            var o = self.options;

            files = $.map(files, function(file) {
                return file.mime != 'directory' || o.folders ? file : null;
            });

            return o.multiple || files.length == 1 ? files : [];
        };

    this.alwaysEnabled = true;
    this.callback = fm.options.getFileCallback;
    this._disabled = typeof(this.callback) == 'function';

    this.getstate = function(sel) {
        var sel = this.files(sel),
            cnt = sel.length;

        return this.callback && cnt && filter(sel).length == cnt ? 0 : -1;
    };
    this.exec = function(hashes) {
        var fm = this.fm,
            opts = this.options,
            files = this.files(hashes),
            cnt = files.length,
            url = fm.option('url'),
            tmb = fm.option('tmbUrl'),
            dfrd = $.Deferred()
                .done(function(data) {
                    fm.trigger('getfile', { files: data });
                    self.callback(data, fm);

                    if (opts.oncomplete == 'close') {
                        fm.hide();
                    } else if (opts.oncomplete == 'destroy') {
                        fm.destroy();
                    }
                }),
            result = function(file) {
                return opts.onlyURL
                    ? opts.multiple ? $.map(files, function(f) { return f.url; }) : files[0].url
                    : opts.multiple ? files : files[0];
            },
            req = [],
            i,
            file,
            dim;

        if (this.getstate() == -1) {
            return dfrd.reject();
        }

        for (i = 0; i < cnt; i++) {
            file = files[i];
            if (file.mime == 'directory' && !opts.folders) {
                return dfrd.reject();
            }
            file.baseUrl = url;
            file.url = fm.url(file.hash);
            file.path = fm.path(file.hash);
            if (file.tmb && file.tmb != 1) {
                file.tmb = tmb + file.tmb;
            }
            if (!file.width && !file.height) {
                if (file.dim) {
                    dim = file.dim.split('x');
                    file.width = dim[0];
                    file.height = dim[1];
                } else if (file.mime.indexOf('image') !== -1) {
                    req.push(fm.request({
                            data: { cmd: 'dim', target: file.hash },
                            notify: { type: 'dim', cnt: 1, hideCnt: true },
                            preventDefault: true
                        })
                        .done(function(data) {
                            if (data.dim) {
                                var dim = data.dim.split('x');
                                var rfile = fm.file(this.hash);
                                rfile.width = this.width = dim[0];
                                rfile.height = this.height = dim[1];
                            }
                        }.bind(file)));
                }
            }
        }

        if (req.length) {
            $.when.apply(null, req).always(function() {
                dfrd.resolve(result(files));
            });
            return dfrd;
        }

        return dfrd.resolve(result(files));
    };
};
"use strict";
/**
 * @class  elFinder command "mkdir"
 * Create new folder
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.mkdir = function() {
    this.disableOnSearch = true;
    this.updateOnSelect = false;
    this.mime = 'directory';
    this.prefix = 'untitled folder';
    this.exec = $.proxy(this.fm.res('mixin', 'make'), this);

    this.shortcuts = [
        {
            pattern: 'ctrl+shift+n'
        }
    ];

    this.getstate = function() {
        return !this._disabled && this.fm.cwd().write ? 0 : -1;
    };
};
"use strict";
/**
 * @class  elFinder command "mkfile"
 * Create new empty file
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.mkfile = function() {
    this.disableOnSearch = true;
    this.updateOnSelect = false;
    this.mime = 'text/plain';
    this.prefix = 'untitled file.txt';
    this.exec = $.proxy(this.fm.res('mixin', 'make'), this);

    this.getstate = function() {
        return !this._disabled && this.fm.cwd().write ? 0 : -1;
    };
};
"use strict";
/**
 * @class elFinder command "upload"
 * Upload files using iframe or XMLHttpRequest & FormData.
 * Dialog allow to send files using drag and drop
 *
 * @type  elFinder.command
 * @author  Dmitry (dio) Levashov
 */
elFinder.prototype.commands.upload = function() {
    var hover = this.fm.res('class', 'hover');

    this.disableOnSearch = true;
    this.updateOnSelect = false;

    // Shortcut opens dialog
    this.shortcuts = [
        {
            pattern: 'ctrl+u'
        }
    ];

    /**
	 * Return command state
	 *
	 * @return Number
	 **/
    this.getstate = function() {
        return 0; //!this._disabled && this.fm.cwd().write ? 0 : -1;
    };
    this.exec = function(data) {
        var fm = this.fm,
            files,
            existed = [],
            notUpload = [],
            dublicateIndexes = [],

            errText = fm.i18n('errNotUplTitle') + '<br/>',
            error = false,
            opts = {
                title: fm.i18n('attention'),
                buttons: {},
                close: function() {
                    files.length != notUpload.length && fm.upload(data, notUpload);
                }
            },
            cwdFileNames = $.map(fm.files(), function(file) { return file.phash == fm.cwd().hash ? file.name : null; }),
            confirm = function(ndx) {
                var i = existed[ndx],
                    file = files[i],
                    last = ndx == existed.length - 1;

                if (!file) {
                    return;
                }

                fm.confirm({
                    title: fm.i18n('moveFiles'),
                    text: fm.i18n(['errExists', file.name, 'confirmRepl']),
                    //all: !last,
                    accept: {
                        label: 'btnYes',
                        callback: function(all) {
                            !last && !all ? confirm(++ndx)
                                : uploadConf();
                        }
                    },
                    reject: {
                        label: 'btnNo',
                        callback: function(all) {
                            var i;

                            if (all) {
                                i = existed.length;
                                while (ndx < i--) {
                                    //������ ���
                                    dublicateIndexes.push(existed[i]);
                                }
                            } else {
                                //������ ��������
                                dublicateIndexes.push(existed[ndx]);
                            }

                            !last && !all
                                ? confirm(++ndx)
                                : uploadConf();
                        }
                    },
                    cancel: {
                        label: 'btnCancel',
                        callback: function() {
                            dfrd2.resolve();
                        }
                    }
                });
            },
            intersect = function(files, names) {
                var ret = [],
                    i = files.length;

                while (i--) {
                    $.inArray(files[i].name, names) !== -1 && ret.unshift(i);
                }
                return ret;
            },
            uploadConf = function() {
                error
                    ? fm.dialog('<div class="error"><span>' + errText + '</span></div></div>', opts)
                    : fm.upload(data, notUpload, dublicateIndexes);
            },
            upload = function(data) {
                dialog.elfinderdialog('close');
                fm.upload(data)
                    .fail(function(error) {
                        dfrd.reject(error);
                    })
                    .done(function(data) {
                        dfrd.resolve(data);
                    });
            },
            dfrd2 = $.Deferred()
                .fail(function(error) {
                    error && fm.error(error);
                })
                .always(function() {
                    fm.enable();
                }),
            dfrd,
            dialog,
            input,
            button,
            dropbox;

        opts.buttons[fm.i18n('btnClose')] = function() {
            $(this).elfindercryptxdialog('close');
        };

        if (this.disabled()) {
            return $.Deferred().reject();
        }

        if (data && (data.input || data.files)) {
            if (data.input && data.input.files) {
                files = data.input.files;
            } else if (data.files) {
                files = data.files;
            }

            if (files.length > 10) {
                return dfrd2.reject('errUploadMax');
            }
            for (var key in files) {
                var f = files[key];
                if (typeof f.size == "undefined") break;
                if (typeof f.name == "undefined") break;
                if (f.size > 20971520) {
                    notUpload.push(key);
                    errText += '<b>"' + f.name + '"</b>: ' + fm.i18n('errUploadMaxSize') + ';<br/>';
                    error = true;
                } else if (f.size == 0) {
                    notUpload.push(key);
                    errText += '<b>"' + f.name + '"</b>: ' + fm.i18n('errUploadMinSize') + ';<br/>';
                    error = true;
                } else if (f.name.length > 100) {
                    notUpload.push(key);
                    errText += '<b>"' + f.name + '"</b>: ' + fm.i18n('errInvNameSize') + ';<br/>';
                    error = true;
                } else if (f.name.match("[\/|\\|\:|\*|\"|\<|\>|\+|\#|\|]")) {
                    notUpload.push(key);
                    errText += '<b>"' + f.name + '"</b>: ' + fm.i18n('errInvSym') + ';<br/>';
                    error = true;
                }
            }

            existed = intersect(files, cwdFileNames);
            existed.length
                ? confirm(0)
                : uploadConf();

            return;
        }

        dfrd = $.Deferred();


        input = $('<input type="file" multiple="true"/>')
            .change(function() {
                upload({ input: input[0] });
            });

        button = $('<div class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only"><span class="ui-button-text">' + fm.i18n('selectForUpload') + '</span></div>')
            .append($('<form/>').append(input))
            .hover(function() {
                button.toggleClass(hover);
            });
        dialog = $('<div class="elfinder-upload-dialog-wrapper"/>')
            .append(button);

        if (fm.dragUpload) {
            dropbox = $('<div class="ui-corner-all elfinder-upload-dropbox">' + fm.i18n('dropFiles') + '</div>')
                .prependTo(dialog)
                .after('<div class="elfinder-upload-dialog-or">' + fm.i18n('or') + '</div>')[0];

            dropbox.addEventListener('dragenter', function(e) {
                e.stopPropagation();
                e.preventDefault();
                $(dropbox).addClass(hover);
            }, false);

            dropbox.addEventListener('dragleave', function(e) {
                e.stopPropagation();
                e.preventDefault();
                $(dropbox).removeClass(hover);
            }, false);

            dropbox.addEventListener('dragover', function(e) {
                e.stopPropagation();
                e.preventDefault();
            }, false);

            dropbox.addEventListener('drop', function(e) {
                e.stopPropagation();
                e.preventDefault();

                upload({ files: e.dataTransfer.files });
            }, false);

        }

        fm.dialog(dialog, {
            title: this.title,
            modal: true,
            resizable: false,
            destroyOnClose: true
        });

        return dfrd;
    };
};
"use strict";
/**
 * @class elFinder command "download". 
 * Download selected files.
 * Only for new api
 *
 * @author Dmitry (dio) Levashov, dio@std42.ru
 **/
elFinder.prototype.commands.download = function() {
    var self = this,
        fm = this.fm,
        filter = function(hashes) {
            return $.map(self.files(hashes), function(f) { return f.mime == 'directory' ? null : f; });
        };

    this.shortcuts = [
        {
            pattern: 'shift+enter'
        }
    ];

    this.getstate = function() {
        var sel = this.fm.selected(),
            cnt = sel.length;

        return !this._disabled && cnt &&  cnt == filter(sel).length ? 0 : -1;
    };
    this.exec = function(hashes) {
        var fm = this.fm,
            base = fm.options.url,
            files = filter(hashes),
            dfrd = $.Deferred(),
            iframes = '',
            iframe = '',
            targets = '',
            cdata = '',
            i = 1,
            url;

        if (this.disabled()) {
            return dfrd.reject();
        }

        if (fm.oldAPI) {
            fm.error('errCmdNoSupport');
            return dfrd.reject();
        }

        cdata = $.param(fm.options.customData || {});
        if (cdata) {
            cdata = '&' + cdata;
        }

        base += base.indexOf('?') === -1 ? '?' : '&';

        //for (i = 0; i < files.length; i++) {
        //	iframes += '<iframe class="downloader" id="downloader-' + files[i].hash+'" style="display:none" src="'+base + 'cmd=file&target=' + files[i].hash+'&download=1'+cdata+'"/>';
        //}
        for (i = 0; i < files.length; i++) {
            targets += files[i].hash + ',';
        }
        targets = targets.substring(targets.length - 1, 1);
        var newWin= window.open(base + 'cmd=download&targets=' + targets);
        //iframe = '<iframe class="downloader" id="downloader-' + 'cryptx' + '" style="display:none" src="' + base + 'cmd=download&targets=' + targets + '"/>';
        //$(iframe)
        //	.appendTo('body')
        //	.ready(function() {
        //		setTimeout(function() {
        //		    $(iframe).each(function () {
        //				$('#' + $(this).attr('id')).remove();
        //			});
        //		}, fm.UA.Firefox? (20000 + (10000 * i)) : 10000); // give mozilla 20 sec + 10 sec for each file to be saved
        //	});
        fm.trigger('download', { files: files });
        return dfrd.resolve(hashes);
    };
};
"use strict"; /**
 * @class elFinder command "edit". 
 * Edit text file in dialog window
 *
 * @author Dmitry (dio) Levashov, dio@std42.ru
 **/
elFinder.prototype.commands.edit = function() {
    var self = this,
        fm = this.fm,
        mimes = fm.res('mimes', 'text') || [],

        /**
		 * Return files acceptable to edit
		 *
		 * @param  Array  files hashes
		 * @return Array
		 **/
        filter = function(files) {
            return $.map(files, function(file) {
                return (file.mime.indexOf('text/') === 0 || $.inArray(file.mime, mimes) !== -1)
                    && file.mime.indexOf('text/rtf')
                    && (!self.onlyMimes.length || $.inArray(file.mime, self.onlyMimes) !== -1)
                    && file.read && file.write ? file : null;
            });
        },

        /**
		 * Open dialog with textarea to edit file
		 *
		 * @param  String  id       dialog id
		 * @param  Object  file     file object
		 * @param  String  content  file content
		 * @return $.Deferred
		 **/
        dialog = function(id, file, content) {

            var dfrd = $.Deferred(),
                ta = $('<textarea class="elfinder-file-edit" rows="20" id="' + id + '-ta">' + fm.escape(content) + '</textarea>'),
                save = function() {
                    ta.editor && ta.editor.save(ta[0], ta.editor.instance);
                    dfrd.resolve(ta.getContent());
                    ta.elfinderdialog('close');
                },
                cancel = function() {
                    dfrd.reject();
                    ta.elfinderdialog('close');
                },
                opts = {
                    title: file.name,
                    width: self.options.dialogWidth || 450,
                    buttons: {},
                    close: function() {
                        ta.editor && ta.editor.close(ta[0], ta.editor.instance);
                        $(this).elfinderdialog('destroy');
                    },
                    open: function() {
                        fm.disable();
                        ta.focus();
                        ta[0].setSelectionRange && ta[0].setSelectionRange(0, 0);
                        ta.editor && ta.editor.load(ta[0]);
                    }

                };

            ta.getContent = function() {
                return ta.val();
            };
            $.each(self.options.editors || [], function(i, editor) {
                if ($.inArray(file.mime, editor.mimes || []) !== -1
                    && typeof editor.load == 'function'
                    && typeof editor.save == 'function') {
                    ta.editor = {
                        load: editor.load,
                        save: editor.save,
                        close: typeof editor.close == 'function' ? editor.close : function() {},
                        instance: null
                    };
                    return false;
                }
            });

            if (!ta.editor) {
                ta.keydown(function(e) {
                    var code = e.keyCode,
                        value,
                        start;

                    e.stopPropagation();
                    if (code == 9) {
                        e.preventDefault();
                        // insert tab on tab press
                        if (this.setSelectionRange) {
                            value = this.value;
                            start = this.selectionStart;
                            this.value = value.substr(0, start) + "\t" + value.substr(this.selectionEnd);
                            start += 1;
                            this.setSelectionRange(start, start);
                        }
                    }

                    if (e.ctrlKey || e.metaKey) {
                        // close on ctrl+w/q
                        if (code == 81 || code == 87) {
                            e.preventDefault();
                            cancel();
                        }
                        if (code == 83) {
                            e.preventDefault();
                            save();
                        }
                    }

                });
            }

            opts.buttons[fm.i18n('Save')] = save;
            opts.buttons[fm.i18n('Cancel')] = cancel;
            fm.dialog(ta, opts).attr('id', id);
            return dfrd.promise();
        },

        /**
		 * Get file content and
		 * open dialog with textarea to edit file content
		 *
		 * @param  String  file hash
		 * @return jQuery.Deferred
		 **/
        edit = function(file) {
            var hash = file.hash,
                opts = fm.options,
                dfrd = $.Deferred(),
                data = { cmd: 'file', target: hash },
                url = fm.url(hash) || fm.options.url,
                id = 'edit-' + fm.namespace + '-' + file.hash,
                d = fm.getUI().find('#' + id),
                error;


            if (d.length) {
                d.elfinderdialog('toTop');
                return dfrd.resolve();
            }

            if (!file.read || !file.write) {
                error = ['errOpen', file.name, 'errPerm'];
                fm.error(error);
                return dfrd.reject(error);
            }

            fm.request({
                    data: { cmd: 'get', target: hash },
                    notify: { type: 'openfile', cnt: 1 },
                    syncOnFail: true
                })
                .done(function(data) {
                    dialog(id, file, data.content)
                        .done(function(content) {
                            fm.request({
                                    options: { type: 'post' },
                                    data: {
                                        cmd: 'put',
                                        target: hash,
                                        content: content
                                    },
                                    notify: { type: 'save', cnt: 1 },
                                    syncOnFail: true
                                })
                                .fail(function(error) {
                                    dfrd.reject(error);
                                })
                                .done(function(data) {
                                    data.changed && data.changed.length && fm.change(data);
                                    dfrd.resolve(data);
                                });
                        });
                })
                .fail(function(error) {
                    dfrd.reject(error);
                });
            return dfrd.promise();
        };


    this.shortcuts = [
        {
            pattern: 'ctrl+e'
        }
    ];

    this.init = function() {
        this.onlyMimes = this.options.mimes || [];
    };
    this.getstate = function(sel) {
        var sel = this.files(sel),
            cnt = sel.length;

        return !this._disabled && cnt && filter(sel).length == cnt ? 0 : -1;
    };
    this.exec = function(hashes) {
        var files = filter(this.files(hashes)),
            list = [],
            file;

        if (this.disabled()) {
            return $.Deferred().reject();
        }

        while ((file = files.shift())) {
            list.push(edit(file));
        }

        return list.length
            ? $.when.apply(null, list)
            : $.Deferred().reject();
    };
};
"use strict"; /**
 * @class  elFinder command "quicklook"
 * Fast preview for some files types
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.quicklook = function() {
    var self = this,
        fm = self.fm,
        /**
		 * window closed state
		 *
		 * @type Number
		 **/
        closed = 0,
        /**
		 * window animated state
		 *
		 * @type Number
		 **/
        animated = 1,
        /**
		 * window opened state
		 *
		 * @type Number
		 **/
        opened = 2,
        /**
		 * window state
		 *
		 * @type Number
		 **/
        state = closed,
        /**
		 * next/prev event name (requied to cwd catch it)
		 *
		 * @type Number
		 **/
        // keydown    = fm.UA.Firefox || fm.UA.Opera ? 'keypress' : 'keydown',
        /**
		 * navbar icon class
		 *
		 * @type Number
		 **/
        navicon = 'elfinder-quicklook-navbar-icon',
        /**
		 * navbar "fullscreen" icon class
		 *
		 * @type Number
		 **/
        fullscreen = 'elfinder-quicklook-fullscreen',
        /**
		 * Triger keydown/keypress event with left/right arrow key code
		 *
		 * @param  Number  left/right arrow key code
		 * @return void
		 **/
        navtrigger = function(code) {
            $(document).trigger($.Event('keydown', { keyCode: code, ctrlKey: false, shiftKey: false, altKey: false, metaKey: false }));
        },
        /**
		 * Return css for closed window
		 *
		 * @param  jQuery  file node in cwd
		 * @return void
		 **/
        closedCss = function(node) {
            return {
                opacity: 0,
                width: 20, //node.width(),
                height: fm.view == 'list' ? 1 : 20,
                top: node.offset().top + 'px',
                left: node.offset().left + 'px'
            };
        },
        /**
		 * Return css for opened window
		 *
		 * @return void
		 **/
        openedCss = function() {
            var win = $(window);
            return {
                opacity: 1,
                width: width,
                height: height,
                top: parseInt((win.height() - height) / 2 + win.scrollTop()),
                left: parseInt((win.width() - width) / 2 + win.scrollLeft())
            };
        },

        support = function(codec) {
            var media = document.createElement(codec.substr(0, codec.indexOf('/'))),
                value = false;

            try {
                value = media.canPlayType && media.canPlayType(codec);
            } catch (e) {

            }

            return value && value !== '' && value != 'no';
        },

        /**
		 * Opened window width (from config)
		 *
		 * @type Number
		 **/
        width,
        /**
		 * Opened window height (from config)
		 *
		 * @type Number
		 **/
        height,
        /**
		 * elFinder node
		 *
		 * @type jQuery
		 **/
        parent,
        /**
		 * elFinder current directory node
		 *
		 * @type jQuery
		 **/
        cwd,
        title = $('<div class="elfinder-quicklook-title"/>'),
        icon = $('<div/>'),
        info = $('<div class="elfinder-quicklook-info"/>'), //.hide(),
        fsicon = $('<div class="' + navicon + ' ' + navicon + '-fullscreen"/>')
            .mousedown(function(e) {
                var win = self.window,
                    full = win.is('.' + fullscreen),
                    scroll = 'scroll.' + fm.namespace,
                    $window = $(window);

                e.stopPropagation();

                if (full) {
                    win.css(win.data('position')).unbind('mousemove');
                    $window.unbind(scroll).trigger(self.resize).unbind(self.resize);
                    navbar.unbind('mouseenter').unbind('mousemove');
                } else {
                    win.data('position', {
                            left: win.css('left'),
                            top: win.css('top'),
                            width: win.width(),
                            height: win.height()
                        })
                        .css({
                            width: '100%',
                            height: '100%'
                        });

                    $(window).bind(scroll, function() {
                            win.css({
                                left: parseInt($(window).scrollLeft()) + 'px',
                                top: parseInt($(window).scrollTop()) + 'px'
                            });
                        })
                        .bind(self.resize, function(e) {
                            self.preview.trigger('changesize');
                        })
                        .trigger(scroll)
                        .trigger(self.resize);

                    win.bind('mousemove', function(e) {
                            navbar.stop(true, true).show().delay(3000).fadeOut('slow');
                        })
                        .mousemove();

                    navbar.mouseenter(function() {
                            navbar.stop(true, true).show();
                        })
                        .mousemove(function(e) {
                            e.stopPropagation();
                        });
                }
                navbar.attr('style', '').draggable(full ? 'destroy' : {});
                win.toggleClass(fullscreen);
                $(this).toggleClass(navicon + '-fullscreen-off');
                $.fn.resizable && parent.add(win).resizable(full ? 'enable' : 'disable').removeClass('ui-state-disabled');
            }),

        navbar = $('<div class="elfinder-quicklook-navbar"/>')
            .append($('<div class="' + navicon + ' ' + navicon + '-prev"/>').mousedown(function() { navtrigger(37); }))
            .append(fsicon)
            .append($('<div class="' + navicon + ' ' + navicon + '-next"/>').mousedown(function() { navtrigger(39); }))
            .append('<div class="elfinder-quicklook-navbar-separator"/>')
            .append($('<div class="' + navicon + ' ' + navicon + '-close"/>').mousedown(function() { self.window.trigger('close'); }));

    this.resize = 'resize.' + fm.namespace;
    this.info = $('<div class="elfinder-quicklook-info-wrapper"/>')
        .append(icon)
        .append(info);

    this.preview = $('<div class="elfinder-quicklook-preview ui-helper-clearfix"/>')
        // clean info/icon
        .bind('change', function(e) {
            self.info.attr('style', '').hide();
            icon.removeAttr('class').attr('style', '');
            info.html('');

        })
        // update info/icon
        .bind('update', function(e) {
            var fm = self.fm,
                preview = self.preview,
                file = e.file,
                tpl = '<div class="elfinder-quicklook-info-data">{value}</div>',
                tmb;

            if (file) {
                !file.read && e.stopImmediatePropagation();
                self.window.data('hash', file.hash);
                self.preview.unbind('changesize').trigger('change').children().remove();
                title.html(fm.escape(file.name));

                info.html(
                    tpl.replace(/\{value\}/, file.name)
                    + tpl.replace(/\{value\}/, fm.mime2kind(file))
                    + (file.mime == 'directory' ? '' : tpl.replace(/\{value\}/, fm.formatSize(file.size)))
                    + tpl.replace(/\{value\}/, fm.i18n('modify') + ': ' + fm.formatDate(file))
                );
                icon.addClass('elfinder-cwd-icon ui-corner-all ' + fm.mime2class(file.mime));

                if (file.tmb) {
                    $('<img/>')
                        .hide()
                        .appendTo(self.preview)
                        .load(function() {
                            icon.css('background', 'url("' + tmb + '") center center no-repeat');
                            $(this).remove();
                        })
                        .attr('src', (tmb = fm.tmb(file.hash)));
                }
                self.info.delay(100).fadeIn(10);
            } else {
                e.stopImmediatePropagation();
            }
        });


    this.window = $('<div class="ui-helper-reset ui-widget elfinder-quicklook" style="position:absolute"/>')
        .click(function(e) { e.stopPropagation(); })
        .append(
            $('<div class="elfinder-quicklook-titlebar"/>')
            .append(title)
            .append($('<span class="ui-icon ui-icon-circle-close"/>').mousedown(function(e) {
                e.stopPropagation();
                self.window.trigger('close');
            }))
        )
        .append(this.preview.add(navbar))
        .append(self.info.hide())
        .draggable({ handle: 'div.elfinder-quicklook-titlebar' })
        .bind('open', function(e) {
            var win = self.window,
                file = self.value,
                node;

            if (self.closed() && file && (node = cwd.find('#' + file.hash)).length) {
                navbar.attr('style', '');
                state = animated;
                node.trigger('scrolltoview');
                win.css(closedCss(node))
                    .show()
                    .animate(openedCss(), 550, function() {
                        state = opened;
                        self.update(1, self.value);
                    });
            }
        })
        .bind('close', function(e) {
            var win = self.window,
                preview = self.preview.trigger('change'),
                file = self.value,
                node = cwd.find('#' + win.data('hash')),
                close = function() {
                    state = closed;
                    win.hide();
                    preview.children().remove();
                    self.update(0, self.value);

                };

            if (self.opened()) {
                state = animated;
                win.is('.' + fullscreen) && fsicon.mousedown();
                node.length
                    ? win.animate(closedCss(node), 500, close)
                    : close();
            }
        });

    /**
	 * This command cannot be disable by backend
	 *
	 * @type Boolean
	 **/
    this.alwaysEnabled = true;

    /**
	 * Selected file
	 *
	 * @type Object
	 **/
    this.value = null;

    this.handlers = {
        // save selected file
        select: function() { this.update(void(0), this.fm.selectedFiles()[0]); },
        error: function() { self.window.is(':visible') && self.window.data('hash', '').trigger('close'); },
        'searchshow searchhide': function() { this.opened() && this.window.trigger('close'); }
    };
    this.shortcuts = [
        {
            pattern: 'space'
        }
    ];

    this.support = {
        audio: {
            ogg: support('audio/ogg; codecs="vorbis"'),
            mp3: support('audio/mpeg;'),
            wav: support('audio/wav; codecs="1"'),
            m4a: support('audio/x-m4a;') || support('audio/aac;')
        },
        video: {
            ogg: support('video/ogg; codecs="theora"'),
            webm: support('video/webm; codecs="vp8, vorbis"'),
            mp4: support('video/mp4; codecs="avc1.42E01E"') || support('video/mp4; codecs="avc1.42E01E, mp4a.40.2"')
        }
    }; /**
	 * Return true if quickLoock window is visible and not animated
	 *
	 * @return Boolean
	 **/
    this.closed = function() {
        return state == closed;
    }; /**
	 * Return true if quickLoock window is hidden
	 *
	 * @return Boolean
	 **/
    this.opened = function() {
        return state == opened;
    }; /**
	 * Init command.
	 * Add default plugins and init other plugins
	 *
	 * @return Object
	 **/
    this.init = function() {
        var o = this.options,
            win = this.window,
            preview = this.preview,
            i,
            p;

        width = o.width > 0 ? parseInt(o.width) : 450;
        height = o.height > 0 ? parseInt(o.height) : 300;

        fm.one('load', function() {
            parent = fm.getUI();
            cwd = fm.getUI('cwd');

            win.appendTo('body').zIndex(100 + parent.zIndex());

            // close window on escape
            $(document).keydown(function(e) {
                e.keyCode == 27 && self.opened() && win.trigger('close');
            });
            if ($.fn.resizable) {
                win.resizable({
                    handles: 'se',
                    minWidth: 350,
                    minHeight: 120,
                    resize: function() {
                        // use another event to avoid recursion in fullscreen mode
                        // may be there is clever solution, but i cant find it :(
                        preview.trigger('changesize');
                    }
                });
            }

            self.change(function() {
                if (self.opened()) {
                    self.value ? preview.trigger($.Event('update', { file: self.value })) : win.trigger('close');
                }
            });

            $.each(fm.commands.quicklook.plugins || [], function(i, plugin) {
                if (typeof(plugin) == 'function') {
                    new plugin(self);
                }
            });

            preview.bind('update', function() {
                self.info.show();
            });
        });

    };
    this.getstate = function() {
        return this.fm.selected().length == 1 ? state == opened ? 1 : 0 : -1;
    };
    this.exec = function() {
        this.enabled() && this.window.trigger(this.opened() ? 'close' : 'open');
    };
    this.hideinfo = function() {
        this.info.stop(true).hide();
    };
};

elFinder.prototype.commands.quicklook.plugins = [

    /**
	 * Images preview plugin
	 *
	 * @param elFinder.commands.quicklook
	 **/
    function(ql) {
        var mimes = ['image/jpeg', 'image/png', 'image/gif'],
            preview = ql.preview;

        // what kind of images we can display
        $.each(navigator.mimeTypes, function(i, o) {
            var mime = o.type;

            if (mime.indexOf('image/') === 0 && $.inArray(mime, mimes)) {
                mimes.push(mime);
            }
        });

        preview.bind('update', function(e) {
            var file = e.file,
                img;

            if ($.inArray(file.mime, mimes) !== -1) {
                // this is our file - stop event propagation
                e.stopImmediatePropagation();

                img = $('<img/>')
                    .hide()
                    .appendTo(preview)
                    .load(function() {
                        // timeout - because of strange safari bug - 
                        // sometimes cant get image height 0_o
                        setTimeout(function() {
                            var prop = (img.width() / img.height()).toFixed(2);
                            preview.bind('changesize', function() {
                                    var pw = parseInt(preview.width()),
                                        ph = parseInt(preview.height()),
                                        w,
                                        h;

                                    if (prop < (pw / ph).toFixed(2)) {
                                        h = ph;
                                        w = Math.floor(h * prop);
                                    } else {
                                        w = pw;
                                        h = Math.floor(w / prop);
                                    }
                                    img.width(w).height(h).css('margin-top', h < ph ? Math.floor((ph - h) / 2) : 0);

                                })
                                .trigger('changesize');

                            // hide info/icon
                            ql.hideinfo();
                            //show image
                            img.fadeIn(100);
                        }, 1);
                    })
                    .attr('src', ql.fm.url(file.hash));
            }

        });
    },

    /**
	 * HTML preview plugin
	 *
	 * @param elFinder.commands.quicklook
	 **/
    function(ql) {
        var mimes = ['text/html', 'application/xhtml+xml'],
            preview = ql.preview,
            fm = ql.fm;

        preview.bind('update', function(e) {
            var file = e.file, jqxhr;

            if ($.inArray(file.mime, mimes) !== -1) {
                e.stopImmediatePropagation();

                // stop loading on change file if not loaded yet
                preview.one('change', function() {
                    jqxhr.state() == 'pending' && jqxhr.reject();
                });

                jqxhr = fm.request({
                        data: { cmd: 'get', target: file.hash, current: file.phash },
                        preventDefault: true
                    })
                    .done(function(data) {
                        ql.hideinfo();
                        doc = $('<iframe class="elfinder-quicklook-preview-html"/>').appendTo(preview)[0].contentWindow.document;
                        doc.open();
                        doc.write(data.content);
                        doc.close();
                    });
            }
        });
    },

    /**
	 * Texts preview plugin
	 *
	 * @param elFinder.commands.quicklook
	 **/
    function(ql) {
        var fm = ql.fm,
            mimes = fm.res('mimes', 'text'),
            preview = ql.preview;


        preview.bind('update', function(e) {
            var file = e.file,
                mime = file.mime,
                jqxhr;

            if (mime.indexOf('text/') === 0 || $.inArray(mime, mimes) !== -1) {
                e.stopImmediatePropagation();

                // stop loading on change file if not loadin yet
                preview.one('change', function() {
                    jqxhr.state() == 'pending' && jqxhr.reject();
                });

                jqxhr = fm.request({
                        data: { cmd: 'get', target: file.hash },
                        preventDefault: true
                    })
                    .done(function(data) {
                        ql.hideinfo();
                        $('<div class="elfinder-quicklook-preview-text-wrapper"><pre class="elfinder-quicklook-preview-text">' + fm.escape(data.content) + '</pre></div>').appendTo(preview);
                    });
            }
        });
    },

    /**
	 * PDF preview plugin
	 *
	 * @param elFinder.commands.quicklook
	 **/
    function(ql) {
        var fm = ql.fm,
            mime = 'application/pdf',
            preview = ql.preview,
            active = false;

        if ((fm.UA.Safari && fm.OS == 'mac') || fm.UA.IE) {
            active = true;
        } else {
            $.each(navigator.plugins, function(i, plugins) {
                $.each(plugins, function(i, plugin) {
                    if (plugin.type == mime) {
                        return !(active = true);
                    }
                });
            });
        }

        active && preview.bind('update', function(e) {
            var file = e.file, node;

            if (file.mime == mime) {
                e.stopImmediatePropagation();
                preview.one('change', function() {
                    node.unbind('load').remove();
                });

                node = $('<iframe class="elfinder-quicklook-preview-pdf"/>')
                    .hide()
                    .appendTo(preview)
                    .load(function() {
                        ql.hideinfo();
                        node.show();
                    })
                    .attr('src', fm.url(file.hash));
            }

        });
    },

    /**
	 * Flash preview plugin
	 *
	 * @param elFinder.commands.quicklook
	 **/
    function(ql) {
        var fm = ql.fm,
            mime = 'application/x-shockwave-flash',
            preview = ql.preview,
            active = false;

        $.each(navigator.plugins, function(i, plugins) {
            $.each(plugins, function(i, plugin) {
                if (plugin.type == mime) {
                    return !(active = true);
                }
            });
        });

        active && preview.bind('update', function(e) {
            var file = e.file,
                node;

            if (file.mime == mime) {
                e.stopImmediatePropagation();
                ql.hideinfo();
                preview.append((node = $('<embed class="elfinder-quicklook-preview-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" src="' + fm.url(file.hash) + '" quality="high" type="application/x-shockwave-flash" />')));
            }
        });
    },

    /**
	 * HTML5 audio preview plugin
	 *
	 * @param elFinder.commands.quicklook
	 **/
    function(ql) {
        var preview = ql.preview,
            autoplay = !!ql.options['autoplay'],
            mimes = {
                'audio/mpeg': 'mp3',
                'audio/mpeg3': 'mp3',
                'audio/mp3': 'mp3',
                'audio/x-mpeg3': 'mp3',
                'audio/x-mp3': 'mp3',
                'audio/x-wav': 'wav',
                'audio/wav': 'wav',
                'audio/x-m4a': 'm4a',
                'audio/aac': 'm4a',
                'audio/mp4': 'm4a',
                'audio/x-mp4': 'm4a',
                'audio/ogg': 'ogg'
            },
            node;

        preview.bind('update', function(e) {
            var file = e.file,
                type = mimes[file.mime];

            if (ql.support.audio[type]) {
                e.stopImmediatePropagation();

                node = $('<audio class="elfinder-quicklook-preview-audio" controls preload="auto" autobuffer><source src="' + ql.fm.url(file.hash) + '" /></audio>')
                    .appendTo(preview);
                autoplay && node[0].play();
            }
        }).bind('change', function() {
            if (node && node.parent().length) {
                node[0].pause();
                node.remove();
                node = null;
            }
        });
    },

    /**
	 * HTML5 video preview plugin
	 *
	 * @param elFinder.commands.quicklook
	 **/
    function(ql) {
        var preview = ql.preview,
            autoplay = !!ql.options['autoplay'],
            mimes = {
                'video/mp4': 'mp4',
                'video/x-m4v': 'mp4',
                'video/ogg': 'ogg',
                'application/ogg': 'ogg',
                'video/webm': 'webm'
            },
            node;

        preview.bind('update', function(e) {
            var file = e.file,
                type = mimes[file.mime];

            if (ql.support.video[type]) {
                e.stopImmediatePropagation();

                ql.hideinfo();
                node = $('<video class="elfinder-quicklook-preview-video" controls preload="auto" autobuffer><source src="' + ql.fm.url(file.hash) + '" /></video>').appendTo(preview);
                autoplay && node[0].play();

            }
        }).bind('change', function() {
            if (node && node.parent().length) {
                node[0].pause();
                node.remove();
                node = null;
            }
        });
    },

    /**
	 * Audio/video preview plugin using browser plugins
	 *
	 * @param elFinder.commands.quicklook
	 **/
    function(ql) {
        var preview = ql.preview,
            mimes = [],
            node;

        $.each(navigator.plugins, function(i, plugins) {
            $.each(plugins, function(i, plugin) {
                (plugin.type.indexOf('audio/') === 0 || plugin.type.indexOf('video/') === 0) && mimes.push(plugin.type);
            });
        });

        preview.bind('update', function(e) {
            var file = e.file,
                mime = file.mime,
                video;

            if ($.inArray(file.mime, mimes) !== -1) {
                e.stopImmediatePropagation();
                (video = mime.indexOf('video/') === 0) && ql.hideinfo();
                node = $('<embed src="' + ql.fm.url(file.hash) + '" type="' + mime + '" class="elfinder-quicklook-preview-' + (video ? 'video' : 'audio') + '"/>')
                    .appendTo(preview);
            }
        }).bind('change', function() {
            if (node && node.parent().length) {
                node.remove();
                node = null;
            }
        });

    }
]
"use strict"; /**
 * @class  elFinder command "extract"
 * Extract files from archive
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.extract = function() {
    var self = this,
        fm = self.fm,
        mimes = [],
        filter = function(files) {
            return $.map(files, function(file) {
                return file.read && $.inArray(file.mime, mimes) !== -1 ? file : null;
            });
        };

    this.disableOnSearch = true;

    // Update mimes list on open/reload
    fm.bind('open reload', function() {
        mimes = fm.option('archivers')['extract'] || [];
        self.change();
    });

    this.getstate = function(sel) {
        var sel = this.files(sel),
            cnt = sel.length;

        return !this._disabled && cnt && this.fm.cwd().write && filter(sel).length == cnt ? 0 : -1;
    };
    this.exec = function(hashes) {
        var files = this.files(hashes),
            dfrd = $.Deferred(),
            cnt = files.length,
            i,
            error,
            decision;

        var overwriteAll = false;
        var omitAll = false;

        var names = $.map(fm.files(hashes), function(file) { return file.name; });
        var map = {};
        $.map(fm.files(hashes), function(file) { map[file.name] = file; });

        var decide = function(decision) {
            switch (decision) {
            case 'overwrite_all':
                overwriteAll = true;
                break;
            case 'omit_all':
                omitAll = true;
                break;
            }
        };

        var unpack = function(file) {
            if (!(file.read && fm.file(file.phash).write)) {
                error = ['errExtract', file.name, 'errPerm'];
                fm.error(error);
                dfrd.reject(error);
            } else if ($.inArray(file.mime, mimes) === -1) {
                error = ['errExtract', file.name, 'errNoArchive'];
                fm.error(error);
                dfrd.reject(error);
            } else {
                fm.request({
                        data: { cmd: 'extract', target: file.hash },
                        notify: { type: 'extract', cnt: 1 },
                        syncOnFail: true
                    })
                    .fail(function(error) {
                        if (dfrd.state() != 'rejected') {
                            dfrd.reject(error);
                        }
                    })
                    .done(function() {
                    });
            }
        };

        var confirm = function(files, index) {
            var file = files[index];
            var name = file.name.replace(/\.((tar\.(gz|bz|bz2|z|lzo))|cpio\.gz|ps\.gz|xcf\.(gz|bz2)|[a-z0-9]{1,4})$/ig, '');
            var existed = ($.inArray(name, names) >= 0);
            if (existed && map[name].mime != 'directory') {
                fm.confirm(
                    {
                        title: fm.i18n('ntfextract'),
                        text: fm.i18n(['errExists', name, 'confirmRepl']),
                        accept: {
                            label: 'btnYes',
                            callback: function(all) {
                                decision = all ? 'overwrite_all' : 'overwrite';
                                decide(decision);
                                if (!overwriteAll && !omitAll) {
                                    if ('overwrite' == decision) {
                                        unpack(file);
                                    }
                                    if ((index + 1) < cnt) {
                                        confirm(files, index + 1);
                                    } else {
                                        dfrd.resolve();
                                    }
                                } else if (overwriteAll) {
                                    for (i = 0; i < cnt; i++) {
                                        unpack(files[i]);
                                    }
                                    dfrd.resolve();
                                }
                            }
                        },
                        reject: {
                            label: 'btnNo',
                            callback: function(all) {
                                decision = all ? 'omit_all' : 'omit';
                                decide(decision);
                                if (!overwriteAll && !omitAll && (index + 1) < cnt) {
                                    confirm(files, index + 1);
                                } else if (omitAll) {
                                    dfrd.resolve();
                                }
                            }
                        },
                        cancel: {
                            label: 'btnCancel',
                            callback: function() {
                                dfrd.resolve();
                            }
                        },
                        all: (cnt > 1)
                    }
                );
            } else {
                unpack(file);
                if ((index + 1) < cnt) {
                    confirm(files, index + 1);
                } else {
                    dfrd.resolve();
                }
            }
        };

        if (!(this.enabled() && cnt && mimes.length)) {
            return dfrd.reject();
        }

        if (cnt > 0) {
            confirm(files, 0);
        }

        return dfrd;
    };
};
"use strict"; /**
 * @class  elFinder command "archive"
 * Archive selected files
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.archive = function() {
    var self = this,
        fm = self.fm,
        mimes = [];

    this.variants = [];

    this.disableOnSearch = true;

    /**
	 * Update mimes on open/reload
	 *
	 * @return void
	 **/
    fm.bind('open reload', function() {
        self.variants = [];
        $.each((mimes = fm.option('archivers')['create'] || []), function(i, mime) {
            self.variants.push([mime, fm.mime2kind(mime)]);
        });
        self.change();
    });

    this.getstate = function() {
        return !this._disabled && mimes.length && fm.selected().length && fm.cwd().write ? 0 : -1;
    };
    this.exec = function(hashes, type) {
        var files = this.files(hashes),
            cnt = files.length,
            mime = type || mimes[0],
            cwd = fm.cwd(),
            error = ['errArchive', 'errPerm', 'errCreatingTempDir', 'errFtpDownloadFile', 'errFtpUploadFile', 'errFtpMkdir', 'errArchiveExec', 'errExtractExec', 'errRm'],
            dfrd = $.Deferred().fail(function(error) {
                error && fm.error(error);
            }),
            i;

        if (!(this.enabled() && cnt && mimes.length && $.inArray(mime, mimes) !== -1)) {
            return dfrd.reject();
        }

        if (!cwd.write) {
            return dfrd.reject(error);
        }

        for (i = 0; i < cnt; i++) {
            if (!files[i].read) {
                return dfrd.reject(error);
            }
        }

        return fm.request({
            data: { cmd: 'archive', targets: this.hashes(hashes), type: mime },
            notify: { type: 'archive', cnt: 1 },
            syncOnFail: true
        });
    };
};
"use strict"; /**
 * @class  elFinder command "search"
 * Find files
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.search = function() {
    this.title = 'Find files';
    this.options = { ui: 'searchbutton' };
    this.alwaysEnabled = true;
    this.updateOnSelect = false;

    /**
	 * Return command status.
	 * Search does not support old api.
	 *
	 * @return Number
	 **/
    this.getstate = function() {
        return 0;
    }; /**
	 * Send search request to backend.
	 *
	 * @param  String  search string
	 * @return $.Deferred
	 **/
    this.exec = function(q) {
        var fm = this.fm;

        if (typeof(q) == 'string' && q) {
            fm.trigger('searchstart', { query: q });

            return fm.request({
                data: { cmd: 'search', q: q },
                notify: { type: 'search', cnt: 1, hideCnt: true }
            });
        }
        fm.getUI('toolbar').find('.' + fm.res('class', 'searchbtn') + ' :text').focus();
        return $.Deferred().reject();
    };
};
"use strict";
/**
 * @class  elFinder command "view"
 * Change current directory view (icons/list)
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.view = function() {
    this.value = this.fm.viewType;
    this.alwaysEnabled = true;
    this.updateOnSelect = false;

    this.options = { ui: 'viewbutton' };

    this.getstate = function() {
        return 0;
    };
    this.exec = function() {
        var value = this.fm.storage('view', this.value == 'list' ? 'icons' : 'list');
        this.fm.viewchange();
        this.update(void(0), value);
    };
};
"use strict";
/**
 * @class  elFinder command "resize"
 * Open dialog to resize image
 *
 * @author Dmitry (dio) Levashov
 * @author Alexey Sukhotin
 * @author Naoki Sawada
 * @author Sergio Jovani
 **/
elFinder.prototype.commands.resize = function() {

    this.updateOnSelect = false;

    this.getstate = function() {
        var sel = this.fm.selectedFiles();
        return !this._disabled && sel.length == 1 && sel[0].read && sel[0].write && sel[0].mime.indexOf('image/') !== -1 ? 0 : -1;
    };

    this.exec = function(hashes) {
        var fm = this.fm,
            files = this.files(hashes),
            dfrd = $.Deferred(),

            open = function(file, id) {
                var dialog = $('<div class="elfinder-dialog-resize"/>'),
                    input = '<input type="text" size="5"/>',
                    row = '<div class="elfinder-resize-row"/>',
                    label = '<div class="elfinder-resize-label"/>',
                    control = $('<div class="elfinder-resize-control"/>'),
                    preview = $('<div class="elfinder-resize-preview"/>'),
                    spinner = $('<div class="elfinder-resize-spinner">' + fm.i18n('ntfloadimg') + '</div>'),
                    rhandle = $('<div class="elfinder-resize-handle"/>'),
                    rhandlec = $('<div class="elfinder-resize-handle"/>'),
                    uiresize = $('<div class="elfinder-resize-uiresize"/>'),
                    uicrop = $('<div class="elfinder-resize-uicrop"/>'),
                    uibuttonset = '<div class="ui-widget-content ui-corner-all elfinder-buttonset"/>',
                    uibutton = '<div class="ui-state-default elfinder-button"/>',
                    uiseparator = '<span class="ui-widget-content elfinder-toolbar-button-separator"/>',
                    uirotate = $('<div class="elfinder-resize-rotate"/>'),
                    uideg270 = $(uibutton).attr('title', fm.i18n('rotate-cw')).append($('<span class="elfinder-button-icon elfinder-button-icon-rotate-l"/>')
                        .click(function() {
                            rdegree = rdegree - 90;
                            rotate.update(rdegree);
                        })),
                    uideg90 = $(uibutton).attr('title', fm.i18n('rotate-ccw')).append($('<span class="elfinder-button-icon elfinder-button-icon-rotate-r"/>')
                        .click(function() {
                            rdegree = rdegree + 90;
                            rotate.update(rdegree);
                        })),
                    uiprop = $('<span />'),
                    reset = $('<div class="ui-state-default ui-corner-all elfinder-resize-reset"><span class="ui-icon ui-icon-arrowreturnthick-1-w"/></div>'),
                    uitype = $('<div class="elfinder-resize-type"/>')
                        .append('<input type="radio" name="type" id="' + id + '-resize" value="resize" checked="checked" /><label for="' + id + '-resize">' + fm.i18n('resize') + '</label>')
                        .append('<input type="radio" name="type" id="' + id + '-crop" value="crop" /><label for="' + id + '-crop">' + fm.i18n('crop') + '</label>')
                        .append('<input type="radio" name="type" id="' + id + '-rotate" value="rotate" /><label for="' + id + '-rotate">' + fm.i18n('rotate') + '</label>'),
                    type = $('input', uitype).attr('disabled', 'disabled')
                        .change(function() {
                            var val = $('input:checked', uitype).val();

                            resetView();
                            resizable(true);
                            croppable(true);
                            rotateable(true);

                            if (val == 'resize') {
                                uiresize.show();
                                uirotate.hide();
                                uicrop.hide();
                                resizable();
                            } else if (val == 'crop') {
                                uirotate.hide();
                                uiresize.hide();
                                uicrop.show();
                                croppable();
                            } else if (val == 'rotate') {
                                uiresize.hide();
                                uicrop.hide();
                                uirotate.show();
                                rotateable();
                            }
                        }),
                    constr = $('<input type="checkbox" checked="checked"/>')
                        .change(function() {
                            cratio = !!constr.prop('checked');
                            resize.fixHeight();
                            resizable(true);
                            resizable();
                        }),
                    width = $(input)
                        .change(function() {
                            var w = parseInt(width.val()),
                                h = parseInt(cratio ? Math.round(w / ratio) : height.val());

                            if (w > 0 && h > 0) {
                                resize.updateView(w, h);
                                height.val(h);
                            }
                        }),
                    height = $(input)
                        .change(function() {
                            var h = parseInt(height.val()),
                                w = parseInt(cratio ? Math.round(h * ratio) : width.val());

                            if (w > 0 && h > 0) {
                                resize.updateView(w, h);
                                width.val(w);
                            }
                        }),
                    pointX = $(input).change(function() { crop.updateView(); }),
                    pointY = $(input).change(function() { crop.updateView(); }),
                    offsetX = $(input).change(function() { crop.updateView(); }),
                    offsetY = $(input).change(function() { crop.updateView(); }),
                    degree = $('<input type="text" size="3" maxlength="3" value="0" />')
                        .change(function() {
                            rotate.update();
                        }),
                    uidegslider = $('<div class="elfinder-resize-rotate-slider"/>')
                        .slider({
                            min: 0,
                            max: 359,
                            value: degree.val(),
                            animate: true,
                            change: function(event, ui) {
                                if (ui.value != uidegslider.slider('value')) {
                                    rotate.update(ui.value);
                                }
                            },
                            slide: function(event, ui) {
                                rotate.update(ui.value, false);
                            }
                        }),
                    ratio = 1,
                    prop = 1,
                    owidth = 0,
                    oheight = 0,
                    cratio = true,
                    pwidth = 0,
                    pheight = 0,
                    rwidth = 0,
                    rheight = 0,
                    rdegree = 0,
                    img = $('<img/>')
                        .load(function() {
                            spinner.remove();

                            owidth = img.width();
                            oheight = img.height();
                            ratio = owidth / oheight;
                            resize.updateView(owidth, oheight);

                            rhandle.append(img.show()).show();
                            width.val(owidth);
                            height.val(oheight);

                            var r_scale = Math.min(pwidth, pheight) / Math.sqrt(Math.pow(owidth, 2) + Math.pow(oheight, 2));
                            rwidth = owidth * r_scale;
                            rheight = oheight * r_scale;

                            type.button('enable');
                            control.find('input, select').removeAttr('disabled')
                                .filter(':text').keydown(function(e) {
                                    var c = e.keyCode, i;

                                    e.stopPropagation();

                                    if ((c >= 37 && c <= 40)
                                        || c == $.ui.keyCode.BACKSPACE
                                        || c == $.ui.keyCode.DELETE
                                        || (c == 65 && (e.ctrlKey || e.metaKey))
                                        || c == 27) {
                                        return;
                                    }

                                    if (c == 9) {
                                        i = $(this).parent()[e.shiftKey ? 'prev' : 'next']('.elfinder-resize-row').children(':text');

                                        if (i.length) {
                                            i.focus();
                                        } else {
                                            $(this).parent().parent().find(':text:' + (e.shiftKey ? 'last' : 'first')).focus();
                                        }
                                    }

                                    if (c == 13) {
                                        fm.confirm({
                                            title: $('input:checked', uitype).val(),
                                            text: 'confirmReq',
                                            accept: {
                                                label: 'btnApply',
                                                callback: function() {
                                                    save();
                                                }
                                            },
                                            cancel: {
                                                label: 'btnCancel',
                                                callback: function() {}
                                            }
                                        });
                                        return;
                                    }

                                    if (!((c >= 48 && c <= 57) || (c >= 96 && c <= 105))) {
                                        e.preventDefault();
                                    }
                                })
                                .filter(':first').focus();

                            resizable();

                            reset.hover(function() { reset.toggleClass('ui-state-hover'); }).click(resetView);

                        })
                        .error(function() {
                            spinner.text('Unable to load image').css('background', 'transparent');
                        }),
                    basec = $('<div/>'),
                    imgc = $('<img/>'),
                    coverc = $('<div/>'),
                    imgr = $('<img/>'),
                    resetView = function() {
                        width.val(owidth);
                        height.val(oheight);
                        resize.updateView(owidth, oheight);
                    },
                    resize = {
                        update: function() {
                            width.val(Math.round(img.width() / prop));
                            height.val(Math.round(img.height() / prop));
                        },

                        updateView: function(w, h) {
                            if (w > pwidth || h > pheight) {
                                if (w / pwidth > h / pheight) {
                                    prop = pwidth / w;
                                    img.width(pwidth).height(Math.ceil(h * prop));
                                } else {
                                    prop = pheight / h;
                                    img.height(pheight).width(Math.ceil(w * prop));
                                }
                            } else {
                                img.width(w).height(h);
                            }

                            prop = img.width() / w;
                            uiprop.text('1 : ' + (1 / prop).toFixed(2));
                            resize.updateHandle();
                        },

                        updateHandle: function() {
                            rhandle.width(img.width()).height(img.height());
                        },
                        fixWidth: function() {
                            var w, h;
                            if (cratio) {
                                h = height.val();
                                h = Math.round(h * ratio);
                                resize.updateView(w, h);
                                width.val(w);
                            }
                        },
                        fixHeight: function() {
                            var w, h;
                            if (cratio) {
                                w = width.val();
                                h = Math.round(w / ratio);
                                resize.updateView(w, h);
                                height.val(h);
                            }
                        }
                    },
                    crop = {
                        update: function() {
                            offsetX.val(Math.round((rhandlec.data('w') || rhandlec.width()) / prop));
                            offsetY.val(Math.round((rhandlec.data('h') || rhandlec.height()) / prop));
                            pointX.val(Math.round(((rhandlec.data('x') || rhandlec.offset().left) - imgc.offset().left) / prop));
                            pointY.val(Math.round(((rhandlec.data('y') || rhandlec.offset().top) - imgc.offset().top) / prop));
                        },
                        updateView: function() {
                            var x = parseInt(pointX.val()) * prop + imgc.offset().left;
                            var y = parseInt(pointY.val()) * prop + imgc.offset().top;
                            var w = offsetX.val() * prop;
                            var h = offsetY.val() * prop;
                            rhandlec.data({ x: x, y: y, w: w, h: h });
                            rhandlec.width(Math.round(w));
                            rhandlec.height(Math.round(h));
                            coverc.width(rhandlec.width());
                            coverc.height(rhandlec.height());
                            rhandlec.offset({ left: Math.round(x), top: Math.round(y) });
                        },
                        resize_update: function() {
                            rhandlec.data({ w: null, h: null });
                            crop.update();
                            coverc.width(rhandlec.width());
                            coverc.height(rhandlec.height());
                        },
                        drag_update: function() {
                            rhandlec.data({ x: null, y: null });
                            crop.update();
                        }
                    },
                    rotate = {
                        mouseStartAngle: 0,
                        imageStartAngle: 0,
                        imageBeingRotated: false,

                        update: function(value, animate) {
                            if (typeof value == 'undefined') {
                                rdegree = value = parseInt(degree.val());
                            }
                            if (typeof animate == 'undefined') {
                                animate = true;
                            }
                            if (! animate || fm.UA.Opera || fm.UA.ltIE8) {
                                imgr.rotate(value);
                            } else {
                                imgr.animate({ rotate: value + 'deg' });
                            }
                            value = value % 360;
                            if (value < 0) {
                                value += 360;
                            }
                            degree.val(parseInt(value));

                            uidegslider.slider('value', degree.val());
                        },

                        execute: function(e) {

                            if (!rotate.imageBeingRotated) return;

                            var imageCentre = rotate.getCenter(imgr);
                            var mouseXFromCentre = e.pageX - imageCentre[0];
                            var mouseYFromCentre = e.pageY - imageCentre[1];
                            var mouseAngle = Math.atan2(mouseYFromCentre, mouseXFromCentre);

                            var rotateAngle = mouseAngle - rotate.mouseStartAngle + rotate.imageStartAngle;
                            rotateAngle = Math.round(parseFloat(rotateAngle) * 180 / Math.PI);

                            if (e.shiftKey) {
                                rotateAngle = Math.round((rotateAngle + 6) / 15) * 15;
                            }

                            imgr.rotate(rotateAngle);

                            rotateAngle = rotateAngle % 360;
                            if (rotateAngle < 0) {
                                rotateAngle += 360;
                            }
                            degree.val(rotateAngle);

                            uidegslider.slider('value', degree.val());

                            return false;
                        },

                        start: function(e) {

                            rotate.imageBeingRotated = true;

                            var imageCentre = rotate.getCenter(imgr);
                            var mouseStartXFromCentre = e.pageX - imageCentre[0];
                            var mouseStartYFromCentre = e.pageY - imageCentre[1];
                            rotate.mouseStartAngle = Math.atan2(mouseStartYFromCentre, mouseStartXFromCentre);

                            rotate.imageStartAngle = parseFloat(imgr.rotate()) * Math.PI / 180.0;

                            $(document).mousemove(rotate.execute);

                            return false;
                        },

                        stop: function(e) {

                            if (!rotate.imageBeingRotated) return;

                            $(document).unbind('mousemove', rotate.execute);

                            setTimeout(function() { rotate.imageBeingRotated = false; }, 10);
                            return false;
                        },

                        getCenter: function(image) {

                            var currentRotation = imgr.rotate();
                            imgr.rotate(0);

                            var imageOffset = imgr.offset();
                            var imageCentreX = imageOffset.left + imgr.width() / 2;
                            var imageCentreY = imageOffset.top + imgr.height() / 2;

                            imgr.rotate(currentRotation);

                            return Array(imageCentreX, imageCentreY);
                        }
                    },
                    resizable = function(destroy) {
                        if ($.fn.resizable) {
                            if (destroy) {
                                rhandle.filter(':ui-resizable').resizable('destroy');
                                rhandle.hide();
                            } else {
                                rhandle.show();
                                rhandle.resizable({
                                    alsoResize: img,
                                    aspectRatio: cratio,
                                    resize: resize.update,
                                    stop: resize.fixHeight
                                });
                            }
                        }
                    },
                    croppable = function(destroy) {
                        if ($.fn.draggable && $.fn.resizable) {
                            if (destroy) {
                                rhandlec.filter(':ui-resizable').resizable('destroy');
                                rhandlec.filter(':ui-draggable').draggable('destroy');
                                basec.hide();
                            } else {
                                imgc
                                    .width(img.width())
                                    .height(img.height());

                                coverc
                                    .width(img.width())
                                    .height(img.height());

                                rhandlec
                                    .width(imgc.width())
                                    .height(imgc.height())
                                    .offset(imgc.offset())
                                    .resizable({
                                        containment: basec,
                                        resize: crop.resize_update,
                                        handles: 'all'
                                    })
                                    .draggable({
                                        handle: coverc,
                                        containment: imgc,
                                        drag: crop.drag_update
                                    });

                                basec.show()
                                    .width(img.width())
                                    .height(img.height());

                                crop.update();
                            }
                        }
                    },
                    rotateable = function(destroy) {
                        if ($.fn.draggable && $.fn.resizable) {
                            if (destroy) {
                                imgr.hide();
                            } else {
                                imgr.show()
                                    .width(rwidth)
                                    .height(rheight)
                                    .css('margin-top', (pheight - rheight) / 2 + 'px')
                                    .css('margin-left', (pwidth - rwidth) / 2 + 'px');

                            }
                        }
                    },
                    save = function() {
                        var w, h, x, y, d;
                        var mode = $('input:checked', uitype).val();

                        //width.add(height).change(); // may be unnecessary

                        if (mode == 'resize') {
                            w = parseInt(width.val()) || 0;
                            h = parseInt(height.val()) || 0;
                        } else if (mode == 'crop') {
                            w = parseInt(offsetX.val()) || 0;
                            h = parseInt(offsetY.val()) || 0;
                            x = parseInt(pointX.val()) || 0;
                            y = parseInt(pointY.val()) || 0;
                        } else if (mode == 'rotate') {
                            w = owidth;
                            h = oheight;
                            d = parseInt(degree.val()) || 0;
                            if (d < 0 || d > 360) {
                                return fm.error('Invalid rotate degree');
                            }
                            if (d == 0 || d == 360) {
                                return fm.error('Image dose not rotated');
                            }
                        }

                        if (mode != 'rotate') {

                            if (w <= 0 || h <= 0) {
                                return fm.error('Invalid image size');
                            }

                            if (w == owidth && h == oheight) {
                                return fm.error('Image size not changed');
                            }

                        }

                        dialog.elfinderdialog('close');

                        fm.request({
                                data: {
                                    cmd: 'resize',
                                    target: file.hash,
                                    width: w,
                                    height: h,
                                    x: x,
                                    y: y,
                                    degree: d,
                                    mode: mode
                                },
                                notify: { type: 'resize', cnt: 1 }
                            })
                            .fail(function(error) {
                                dfrd.reject(error);
                            })
                            .done(function() {
                                dfrd.resolve();
                            });

                    },
                    buttons = {},
                    hline = 'elfinder-resize-handle-hline',
                    vline = 'elfinder-resize-handle-vline',
                    rpoint = 'elfinder-resize-handle-point',
                    src = fm.url(file.hash);

                imgr.mousedown(rotate.start);
                $(document).mouseup(rotate.stop);

                uiresize.append($(row).append($(label).text(fm.i18n('width'))).append(width).append(reset))
                    .append($(row).append($(label).text(fm.i18n('height'))).append(height))
                    .append($(row).append($('<label/>').text(fm.i18n('aspectRatio')).prepend(constr)))
                    .append($(row).append(fm.i18n('scale') + ' ').append(uiprop));

                uicrop.append($(row).append($(label).text('X')).append(pointX))
                    .append($(row).append($(label).text('Y')).append(pointY))
                    .append($(row).append($(label).text(fm.i18n('width'))).append(offsetX))
                    .append($(row).append($(label).text(fm.i18n('height'))).append(offsetY));

                uirotate.append($(row)
                    .append($(label).text(fm.i18n('rotate')))
                    .append($('<div style="float:left; width: 130px;">')
                        .append($('<div style="float:left;">')
                            .append(degree)
                            .append($('<span/>').text(fm.i18n('degree')))
                        )
                        .append($(uibuttonset).append(uideg270).append($(uiseparator)).append(uideg90))
                    )
                    .append(uidegslider)
                );


                dialog.append(uitype);

                control.append($(row))
                    .append(uiresize)
                    .append(uicrop.hide())
                    .append(uirotate.hide())
                    .find('input, select').attr('disabled', 'disabled');

                rhandle.append('<div class="' + hline + ' ' + hline + '-top"/>')
                    .append('<div class="' + hline + ' ' + hline + '-bottom"/>')
                    .append('<div class="' + vline + ' ' + vline + '-left"/>')
                    .append('<div class="' + vline + ' ' + vline + '-right"/>')
                    .append('<div class="' + rpoint + ' ' + rpoint + '-e"/>')
                    .append('<div class="' + rpoint + ' ' + rpoint + '-se"/>')
                    .append('<div class="' + rpoint + ' ' + rpoint + '-s"/>');

                preview.append(spinner).append(rhandle.hide()).append(img.hide());

                rhandlec.css('position', 'absolute')
                    .append('<div class="' + hline + ' ' + hline + '-top"/>')
                    .append('<div class="' + hline + ' ' + hline + '-bottom"/>')
                    .append('<div class="' + vline + ' ' + vline + '-left"/>')
                    .append('<div class="' + vline + ' ' + vline + '-right"/>')
                    .append('<div class="' + rpoint + ' ' + rpoint + '-n"/>')
                    .append('<div class="' + rpoint + ' ' + rpoint + '-e"/>')
                    .append('<div class="' + rpoint + ' ' + rpoint + '-s"/>')
                    .append('<div class="' + rpoint + ' ' + rpoint + '-w"/>')
                    .append('<div class="' + rpoint + ' ' + rpoint + '-ne"/>')
                    .append('<div class="' + rpoint + ' ' + rpoint + '-se"/>')
                    .append('<div class="' + rpoint + ' ' + rpoint + '-sw"/>')
                    .append('<div class="' + rpoint + ' ' + rpoint + '-nw"/>');

                preview.append(basec.css('position', 'absolute').hide().append(imgc).append(rhandlec.append(coverc)));

                preview.append(imgr.hide());

                preview.css('overflow', 'hidden');

                dialog.append(preview).append(control);

                buttons[fm.i18n('btnApply')] = save;
                buttons[fm.i18n('btnCancel')] = function() { dialog.elfinderdialog('close'); };

                fm.dialog(dialog, {
                    title: file.name,
                    width: 650,
                    resizable: false,
                    destroyOnClose: true,
                    buttons: buttons,
                    open: function() { preview.zIndex(1 + $(this).parent().zIndex()); }
                }).attr('id', id);

                // for IE < 9 dialog mising at open second+ time.
                if (fm.UA.ltIE8) {
                    $('.elfinder-dialog').css('filter', '');
                }

                reset.css('left', width.position().left + width.width() + 12);

                coverc.css({ 'opacity': 0.2, 'background-color': '#fff', 'position': 'absolute' }),
                    rhandlec.css('cursor', 'move');
                rhandlec.find('.elfinder-resize-handle-point').css({
                    'background-color': '#fff',
                    'opacity': 0.5,
                    'border-color': '#000'
                });

                imgr.css('cursor', 'pointer');

                uitype.buttonset();

                pwidth = preview.width() - (rhandle.outerWidth() - rhandle.width());
                pheight = preview.height() - (rhandle.outerHeight() - rhandle.height());

                img.attr('src', src + (src.indexOf('?') === -1 ? '?' : '&') + '_=' + Math.random());
                imgc.attr('src', img.attr('src'));
                imgr.attr('src', img.attr('src'));

            },

            id,
            dialog;


        if (!files.length || files[0].mime.indexOf('image/') === -1) {
            return dfrd.reject();
        }

        id = 'resize-' + fm.namespace + '-' + files[0].hash;
        dialog = fm.getUI().find('#' + id);

        if (dialog.length) {
            dialog.elfinderdialog('toTop');
            return dfrd.resolve();
        }

        open(files[0], id);

        return dfrd;
    };

};

(function($) {

    var findProperty = function(styleObject, styleArgs) {
        var i = 0;
        for (i in styleArgs) {
            if (typeof styleObject[styleArgs[i]] != 'undefined')
                return styleArgs[i];
        }
        styleObject[styleArgs[i]] = '';
        return styleArgs[i];
    };

    $.cssHooks.rotate = {
        get: function(elem, computed, extra) {
            return $(elem).rotate();
        },
        set: function(elem, value) {
            $(elem).rotate(value);
            return value;
        }
    };
    $.cssHooks.transform = {
        get: function(elem, computed, extra) {
            var name = findProperty(elem.style,
            ['WebkitTransform', 'MozTransform', 'OTransform', 'msTransform', 'transform']);
            return elem.style[name];
        },
        set: function(elem, value) {
            var name = findProperty(elem.style,
            ['WebkitTransform', 'MozTransform', 'OTransform', 'msTransform', 'transform']);
            elem.style[name] = value;
            return value;
        }
    };

    $.fn.rotate = function(val) {
        if (typeof val == 'undefined') {
            if (!!window.opera) {
                var r = this.css('transform').match(/rotate\((.*?)\)/);
                return (r && r[1]) ?
                    Math.round(parseFloat(r[1]) * 180 / Math.PI) : 0;
            } else {
                var r = this.css('transform').match(/rotate\((.*?)\)/);
                return (r && r[1]) ? parseInt(r[1]) : 0;
            }
        }
        this.css('transform',
            this.css('transform').replace(/none|rotate\(.*?\)/, '') + 'rotate(' + parseInt(val) + 'deg)');
        return this;
    };

    $.fx.step.rotate = function(fx) {
        if (fx.state == 0) {
            fx.start = $(fx.elem).rotate();
            fx.now = fx.start;
        }
        $(fx.elem).rotate(fx.now);
    };

    if (typeof window.addEventListener == "undefined" && typeof document.getElementsByClassName == "undefined") { // IE & IE<9
        var GetAbsoluteXY = function(element) {
            var pnode = element;
            var x = pnode.offsetLeft;
            var y = pnode.offsetTop;

            while (pnode.offsetParent) {
                pnode = pnode.offsetParent;
                if (pnode != document.body && pnode.currentStyle['position'] != 'static') {
                    break;
                }
                if (pnode != document.body && pnode != document.documentElement) {
                    x -= pnode.scrollLeft;
                    y -= pnode.scrollTop;
                }
                x += pnode.offsetLeft;
                y += pnode.offsetTop;
            }

            return { x: x, y: y };
        };

        var StaticToAbsolute = function(element) {
            if (element.currentStyle['position'] != 'static') {
                return;
            }

            var xy = GetAbsoluteXY(element);
            element.style.position = 'absolute';
            element.style.left = xy.x + 'px';
            element.style.top = xy.y + 'px';
        };

        var IETransform = function(element, transform) {

            var r;
            var m11 = 1;
            var m12 = 1;
            var m21 = 1;
            var m22 = 1;

            if (typeof element.style['msTransform'] != 'undefined') {
                return true;
            }

            StaticToAbsolute(element);

            r = transform.match(/rotate\((.*?)\)/);
            var rotate = (r && r[1]) ? parseInt(r[1]) : 0;

            rotate = rotate % 360;
            if (rotate < 0) rotate = 360 + rotate;

            var radian = rotate * Math.PI / 180;
            var cosX = Math.cos(radian);
            var sinY = Math.sin(radian);

            m11 *= cosX;
            m12 *= -sinY;
            m21 *= sinY;
            m22 *= cosX;

            element.style.filter = (element.style.filter || '').replace(/progid:DXImageTransform\.Microsoft\.Matrix\([^)]*\)/, "") +
            ("progid:DXImageTransform.Microsoft.Matrix(" +
                "M11=" + m11 +
                ",M12=" + m12 +
                ",M21=" + m21 +
                ",M22=" + m22 +
                ",FilterType='bilinear',sizingMethod='auto expand')");

            var ow = parseInt(element.style.width || element.width || 0);
            var oh = parseInt(element.style.height || element.height || 0);

            var radian = rotate * Math.PI / 180;
            var absCosX = Math.abs(Math.cos(radian));
            var absSinY = Math.abs(Math.sin(radian));

            var dx = (ow - (ow * absCosX + oh * absSinY)) / 2;
            var dy = (oh - (ow * absSinY + oh * absCosX)) / 2;

            element.style.marginLeft = Math.floor(dx) + "px";
            element.style.marginTop = Math.floor(dy) + "px";

            return(true);
        };

        var transform_set = $.cssHooks.transform.set;
        $.cssHooks.transform.set = function(elem, value) {
            transform_set.apply(this, [elem, value]);
            IETransform(elem, value);
            return value;
        };
    }

})(jQuery);
"use strict"; /**
 * @class  elFinder command "sort"
 * Change sort files rule
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.sort = function() {
    /**
	 * Command options
	 *
	 * @type  Object
	 */
    this.options = { ui: 'sortbutton' };

    this.getstate = function() {
        return 0;
    };
    this.exec = function(hashes, sort) {
        var fm = this.fm,
            sort = $.extend({
                type: fm.sortType,
                order: fm.sortOrder,
                stick: fm.sortStickFolders
            }, sort);

        this.fm.setSort(sort.type, sort.order, sort.stick);
        return $.Deferred().resolve();
    };
};
"use strict"; /**
 * @class  elFinder command "netmount"
 * Mount network volume with user credentials.
 *
 * @author Dmitry (dio) Levashov
 **/
elFinder.prototype.commands.netmount = function() {
    var self = this;

    this.alwaysEnabled = true;
    this.updateOnSelect = false;

    this.drivers = [];

    this.handlers = {
        load: function() {
            this.drivers = this.fm.netDrivers;
        }
    };
    this.getstate = function() {
        return this.drivers.length ? 0 : -1;
    };
    this.exec = function() {
        var fm = self.fm,
            dfrd = $.Deferred(),
            create = function() {
                var inputs = {
                        protocol: $('<select/>'),
                        host: $('<input type="text"/>'),
                        port: $('<input type="text"/>'),
                        path: $('<input type="text" value="/"/>'),
                        user: $('<input type="text"/>'),
                        pass: $('<input type="password"/>')
                    },
                    opts = {
                        title: fm.i18n('netMountDialogTitle'),
                        resizable: false,
                        modal: true,
                        destroyOnClose: true,
                        close: function() {
                            delete self.dialog;
                            dfrd.state() == 'pending' && dfrd.reject();
                        },
                        buttons: {}
                    },
                    content = $('<table class="elfinder-info-tb elfinder-netmount-tb"/>');

                $.each(self.drivers, function(i, protocol) {
                    inputs.protocol.append('<option value="' + protocol + '">' + fm.i18n(protocol) + '</option>');
                });


                $.each(inputs, function(name, input) {
                    name != 'protocol' && input.addClass('ui-corner-all');
                    content.append($('<tr/>').append($('<td>' + fm.i18n(name) + '</td>')).append($('<td/>').append(input)));
                });

                opts.buttons[fm.i18n('btnMount')] = function() {
                    var data = { cmd: 'netmount' };

                    $.each(inputs, function(name, input) {
                        var val = $.trim(input.val());

                        if (val) {
                            data[name] = val;
                        }
                    });

                    if (!data.host) {
                        return self.fm.trigger('error', { error: 'errNetMountHostReq' });
                    }

                    self.fm.request({ data: data, notify: { type: 'netmount', cnt: 1 } })
                        .done(function() { dfrd.resolve(); })
                        .fail(function(error) { dfrd.reject(error); });

                    self.dialog.elfinderdialog('close');
                };
                opts.buttons[fm.i18n('btnCancel')] = function() {
                    self.dialog.elfinderdialog('close');
                };
                return fm.dialog(content, opts);
            };

        if (!self.dialog) {
            self.dialog = create();
        }

        return dfrd.promise();
    };
};
"use strict";
elFinder.prototype.commands.more = function() {
    this.options = { ui: 'morebutton' };

    this.getstate = function() {
        var sel = this.fm.selectedFiles();

        return sel.length >= 1 ? 0 : -1;
    };
    this.exec = function(commandName) {
        var fm = this.fm,
            com,
            c = 'class',
            disabled = fm.res(c, 'disabled'),
            commands = fm._commands;

        if ((com = commands[commandName])) {
            if (!$(this).is('.' + disabled)) {
                com.exec();
            }
        }
        return $.Deferred().resolve();
    };
};
"use strict"
elFinder.prototype.commands.infobarcmd = function() {
	this.getstate = function() {
	    if (this.fm.selectedFiles().length >=1) return 0;
	    else return -1;
	}
	
	this.exec = function(info) {
	    var fm = this.fm,
	        c = 'class',
	        iconClass = "elfinder-cwd-icon {class} ui-corner-all",
	        sel = this.fm.selectedFiles(),
	        disabled = fm.res(c, 'disabled'),
	        infobar = fm.ui['infobar'],
            selblock = infobar.find('.selectblock'),
	        icon = infobar.find(".selectico span:first"),
	        name = infobar.find(".title"),
	        lastChange = infobar.find(".dateblock span.datespan"),
            size = infobar.find(".dateblock span.sizespan"),
	        cryptInfo = infobar.find(".signature"),
            cryptblock = '<div class="havesig">' +
			'<div class="icoblock">'+

				'<span class="{icon}"></span>' +
			'</div>'+
			'<div class="textblock">'+
				'<div class="top">'+
					'<div class="actiontitle">'+
						'<a href="#" class="action">{action}</a>' +
					'</div>'+
				'</div>'+
				'<div class="bottom">'+
				'</div>'+
			'</div>'+
			'</div>',

            cryptlist = "<div class='cert-list'>" +
                "<span class='elfinder-button-icon elfinder-button-icon-{icon}'/>"+
                "<span class='list-type'>{type}</span>" +
	            "<span class='list-count'>({count})</span>" +
	            "<span class='elfinder-button-icon elfinder-button-icon-info-more'/>",
	        clear = function() {
	            if (infobar) {
	                icon.removeClass();
	                name.text("");
	                lastChange.text("");
	                cryptInfo.empty();
	            }
	        },
            item = 'elfinder-button-menu-item',
            hover = fm.res('class', 'hover'),
            menu = $('<div class="ui-widget ui-widget-content elfinder-button-menu ui-corner-all"/>')
	            .hide()
	            //.delegate('.' + item, 'hover', function () { $(this).toggleClass(hover); })
	            .delegate('.' + item, 'click', function (e) {
	                e.preventDefault();
	                e.stopPropagation();
	                menu.hide();
	            }),
            hide=function() {
                menu.hide();
            },
            addItem = function (type, block) {
                    menu.append($('<div class="' + item + '"/>').append(block));

                },
	        getBlock = function (type, certinfo) {


	            var iconcl = type == 1 ? 'encrypt' : 'sign';
	            var block = cryptblock.replace('{icon}', 'elfinder-cwd-icon elfinder-cwd-icon-' + iconcl + ' ui-corner-all');
	            block = block.replace('{action}', type == 1 ? fm.i18n("encrypted") : fm.i18n("signed"));
	            
	            var com, button, link;
	            block = $(block);
	            if (certinfo.Thumbprint && certinfo.SubjectName) {
	                if ((com = fm._commands['certdownload'])) {
	                    button = 'elfinder' + 'linkbutton';
                        var isTest = certinfo.IsTest ? '<span class="test-certificate-icon no-padding js-test-certificate-tip" id="testTip-'+certinfo.Thumbprint+'"></span>'+certinfo.SubjectName : certinfo.SubjectName;
	                    if ($.fn[button]) link = $('<div/>')[button](com, certinfo.Thumbprint, isTest);
	                    block.find(".bottom").append(link);
	                }

	                var commandName = type == 1 ? 'decrypt' : 'checksign';
	                if ((com = fm._commands[commandName])) {
	                    button = 'elfinder' + 'linkbutton';
	                    if ($.fn[button]) link = $('<div/>')[button](com);
	                    block.find(".actiontitle").append(link);
	                }
	            } else {
	                block.find(".actiontitle").css('padding-top','11px');
	            }

	            return block;
	        };

	    if (info) {
	        cryptInfo.empty();
	        infobar.find(".dateblock div div").addClass('ui-state-disabled');
	        if (info == 'Empty') {
	            cryptInfo.prepend($("<h3>").text(fm.i18n("emptycryptinfo")));
	        }else if (info.Certificates.length==0) {
	            cryptInfo.prepend($("<h3>").text(fm.i18n("cryptinfonocert")));
	        }else {
	            if (info.Certificates.length > 1) {
                    for (var i = 0; i < info.Certificates.length; i++) {
	                    var cert = info.Certificates[i];
	                    addItem(info.FileType, getBlock(info.FileType, cert));
                    }
                    var iconcl = info.FileType == 1 ? 'encrypt' : 'sign';
                    cryptlist = cryptlist.replace('{icon}',iconcl);
                    cryptlist = cryptlist.replace('{type}', info.FileType == 1 ? fm.i18n("encrypted") : fm.i18n("signed"));
                    cryptlist = cryptlist.replace('{count}', info.Certificates.length +' ' + fm.i18n("times"));

                    cryptlist = $(cryptlist).bind('hover', function () { $(this).toggleClass(hover); });
                    cryptlist.find('.elfinder-button-icon').click(function (e) {
                        e.stopPropagation();
                        menu.slideToggle(100);
	                });

	                cryptInfo.append(cryptlist);
	                cryptInfo.append(menu);

	                fm.bind('disable select', hide).getUI().click(hide);
	            } else {

	                cryptInfo.append(getBlock(info.FileType, info.Certificates[0]));
	            }
                var regTipOptions = {
                    tipJoint: "left",
                    background: '#fff5d2',
                    borderRadius: 4,
                    borderWidth: 1,
                    borderColor: '#fee8ae'
                };
                $(".js-test-certificate-tip").each(function(i,el){
                    new Opentip($(el), 'Сертификат выпущен без участия<br>аккредитованного Удостоверяющего<br>Центра и не имеет юридической силы.', '', regTipOptions);
                });
	        }

	        return $.Deferred().resolve();
	    }

	    if (infobar) {
	        clear();
	        var file;
            var acceptExt = ['ods','xls','xlsb','xlsx','ods','xlsb','xlsm','xlsx','odp','pot','potm','potx',
                'pps','ppsm','ppsx','ppt','pptm','pptx','odp','ppsx','pptx','doc','docm','docx','dot',
                'dotm','dotx','odt','pdf','one','onetoc2','jpg','jpeg','gif','png','bmp','xml'];
            var ext = '';
	        if (sel.length == 1 && (file = sel[0]) && file && file.mime != "directory") {

                if (file.name !== null) {
                    ext = file.name.split('.');
                    ext = ext[ext.length-1];


                    $(infobar).find(".js-visaulize").data('type',file.VisualizationType);

                    if (acceptExt.indexOf(ext.toLowerCase()) !== -1) {

                        $(infobar).find(".js-visaulize").css('display', 'block');
                    }  else {
                        $(infobar).find(".js-visaulize").css('display', 'none');
                    }
                }

	            iconClass = iconClass.replace('{class}', fm.mime2class(file.mime));
	            icon.removeClass().addClass(iconClass);
	            name.text(file.name);
	            lastChange.text(fm.formatDate(file));
	            size.text(fm.formatSize(file.size));
	            $(infobar).find(".rename:first").css('display', 'block');
	            $(infobar).find(".dateblock:first").css('display', 'block');
	            selblock.show();
	        } else if (sel.length > 1) {
	            $(infobar).find(".rename:first").css('display', 'none');
	            $(infobar).find(".dateblock:first").css('display', 'none');
	            iconClass = iconClass.replace('{class}', 'elfinder-cwd-icon-group');
	            icon.removeClass().addClass(iconClass);
	            name.text(fm.i18n("infosel") + sel.length);
	            selblock.show();
	        } else selblock.hide();
	    }
	    return $.Deferred().resolve();
	}
}
"use strict";
elFinder.prototype.commands.encrypt = function() {

    this.getstate = function() {
        var sel = this.fm.selectedFiles(),
            cnt = sel.length;

        var files = $.map(sel, function(f) { return f.mime == 'directory' ? null : f; });
        return cnt >= 1 && cnt == files.length ? 0 : -1;
    };
    this.exec = function(hashes) {
        var fm = this.fm,
            cwd = fm.cwd().hash,
            files = this.files(hashes),
            cnt = files.length,
            dfrd = $.Deferred()
                .fail(function(error) {
                    error && fm.error(error);
                });

        if (!cnt || this._disabled) {
            return dfrd.reject();
        }

        $.each(files, function(i, file) {
            if (!file.phash) {
                return !dfrd.reject(['errRm', file.name, 'errPerm']);
            }
            if (file.locked) {
                return !dfrd.reject(['errLocked', file.name]);
            }
        });

        if (dfrd.state() == 'pending') {
            files = this.hashes(hashes);

            //fm.lockfiles({ files: files });
            fm.request({
                    data: { cmd: 'encrypt', targets: files },
                    notify: { type: 'encrypt', cnt: cnt },
                    preventFail: true
                })
                .fail(function(error) {
                    dfrd.reject(error);
                })
                .done(function(data) {
                        var com;
                        if ((com = fm._commands['post'])) {
                            com.exec(fm.MasterUrl, data);
                        }
                        dfrd.done();
                    }
                ).always(function() {
                    //fm.unlockfiles({ files: files });
                });
        }

        return dfrd;
    };
};
"use strict";
elFinder.prototype.commands.decrypt = function() {

    this.getstate = function() {
        var sel = this.fm.selectedFiles(),
            cnt = sel.length;

        var files = $.map(sel, function(f) { return f.mime == 'directory' ? null : f; });
        return cnt >= 1 && cnt == files.length ? 0 : -1;
    };
    this.exec = function(hashes) {
        var fm = this.fm,
            cwd = fm.cwd().hash,
            files = this.files(hashes),
            cnt = files.length,
            dfrd = $.Deferred()
                .fail(function(error) {
                    error && fm.error(error);
                });

        if (!cnt || this._disabled) {
            return dfrd.reject();
        }

        $.each(files, function(i, file) {
            if (!file.phash) {
                return !dfrd.reject(['errRm', file.name, 'errPerm']);
            }
            if (file.locked) {
                return !dfrd.reject(['errLocked', file.name]);
            }
        });

        if (dfrd.state() == 'pending') {
            files = this.hashes(hashes);

            //fm.lockfiles({ files: files });
            fm.request({
                    data: { cmd: 'decrypt', targets: files },
                    notify: { type: 'decrypt', cnt: cnt },
                    preventFail: true
                })
                .fail(function(error) {
                    dfrd.reject(error);
                })
                .done(function(data) {
                        var com;
                        if ((com = fm._commands['post'])) {
                            com.exec(fm.MasterUrl, data);
                        }
                        dfrd.done();
                    }
                ).always(function() {
                    //fm.unlockfiles({ files: files });
                });
        }

        return dfrd;
    };
};
"use strict";
elFinder.prototype.commands.checksign = function() {

    this.getstate = function() {
        var sel = this.fm.selectedFiles(),
            cnt = sel.length;

        var files = $.map(sel, function(f) { return f.mime == 'directory' ? null : f; });
        return cnt >= 1 && cnt == files.length ? 0 : -1;
    };
    this.exec = function(hashes) {
        var fm = this.fm,
            cwd = fm.cwd().hash,
            files = this.files(hashes),
            cnt = files.length,
            dfrd = $.Deferred()
                .fail(function(error) {
                    error && fm.error(error);
                });

        if (!cnt || this._disabled) {
            return dfrd.reject();
        }

        $.each(files, function(i, file) {
            if (!file.phash) {
                return !dfrd.reject(['errRm', file.name, 'errPerm']);
            }
            if (file.locked) {
                return !dfrd.reject(['errLocked', file.name]);
            }
        });

        if (dfrd.state() == 'pending') {
            files = this.hashes(hashes);

            //fm.lockfiles({ files: files });
            fm.request({
                    data: { cmd: 'checksign', targets: files },
                    notify: { type: 'checksign', cnt: cnt },
                    preventFail: true
                })
                .fail(function(error) {
                    dfrd.reject(error);
                })
                .done(function(data) {
                        var com;
                        if ((com = fm._commands['post'])) {
                            com.exec(fm.MasterUrl, data);
                        }
                        dfrd.done();
                    }
                ).always(function() {
                    //fm.unlockfiles({ files: files });
                });
        }

        return dfrd;
    };
};
"use strict";
elFinder.prototype.commands.receivedmail = function () {
    var self = this,
        fm = self.fm;

    this.getstate = function () {
        return 0;
    };

    fm.bind('received', function () {
        var guid = fm.GetReceivedMailId();
        if (guid) {
            self.exec(guid);
        }
    });
    var $elFinder = $('#elfinder');

    this.exec = function (id) {
        $elFinder.find('#modal .popup').parent().remove();

        var disabled = fm.res('class', 'disabled'),
            hover = fm.res('class', 'hover'),
            popup = $('<div id="modal"><div class="window received-popup popup">' +
                '<div class="header"><h2>' + fm.i18n("receivedmailheader") + '</h2><div class="close"></div></div>' +
                '<div class="scroll-wrap">' +
                '<div class="scroller">' +
                '<div class="img">' +
                '<img src="../../Content/Images/preloader.GIF">' +
                '</div>' +
                '<div class="info">' +
                '<div class="message"></div>' +
                '</div>' +
                '<div class="documents-list ui-helper-clearfix elfinder-cwd ui-selectable ui-droppable elfinder-cwd-view-list"><table></table></div>' +
                '</div>' +
                '<div class="scroller__bar-wrapper"><div class="scroller__bar"></div></div>' +
                '</div>' +
                '<div class="buttons right">' +
                '<div class="elfinder-buttonset">' +
                '<div class="ui-state-default elfinder-button elfinder-link-button" title="' + fm.i18n('cmdcancel2') + '">' +
                '<a class="elfinder-button-text">' + fm.i18n('cmdcancel2') + '</a></div></div>' +
                '<div class="elfinder-buttonset btn btn-big btn-green">' + fm.i18n('gomaster') + '</div>' +
                //'<div class="elfinder-buttonset ui-elfinder-button-green">' +
                //'<div class="ui-state-default elfinder-button" title="' + fm.i18n('gomaster') + '">' +
                //'<span class="elfinder-button-text">' + fm.i18n('gomaster') + '</span></div></div>' +
                '</div>' +
                '</div></div>'),
            mainbut = popup.find('.btn.btn-big.btn-green').addClass(disabled),
            document = '' +
                '<tr  class="elfinder-cwd-file document js-visualize" >' +
                '<td class="name" title="{title}">' +
                '<div class="elfinder-cwd-file-wrapper">' +
                '<span class="elfinder-cwd-icon {icon}"></span>' +
                '<span class="elfinder-cwd-filename">{title}</span>' +
                '</div>' +
                '<div class="top">' +
                '<div class="path js-path" style="display:none">{path}</div>' +
                '<div class="lastChange" style="display:none">{lastChange}</div>' +
                '<div class="operationtype" style="display:none"></div>' +
                '</div>' +
                '</td>' +
                '<td class="kind" title="{type}">{type}</td>' +
                '<td class="actions text-right right" ><a href="#" class="action"></a></td>' +
                '</tr>',

            actionHandler = function (me) {
                var com;
                var file = { name: null, path: null, lastChange: null, mime: null };
                var doc = $(me).parents('.document');
                var type = doc.find('.top .operationtype').text();
                file.path = doc.find('.top .path').text();
                file.lastChange = doc.find('.top .lastChange').text();
                if ((com = fm._commands['post'])) {
                    var data = { Type: type, Files: [] };
                    data.Files.push(file);
                    com.exec(fm.MasterUrl, data);
                }
            },
            addFilesInPopup = function (fs) {

                if (!fs.length || fs.length == 0) showErrorBlock();
                popup.find('.img').hide();
                for (var key in fs) {
                    var file = fs[key];
                    var docPattern = document;

                    docPattern = docPattern.replace('{title}', file.name);
                    docPattern = docPattern.replace('{title}', file.name);
                    docPattern = docPattern.replace('{path}', file.path);
                    docPattern = docPattern.replace('{lastChange}', file.lastChange);
                    docPattern = docPattern.replace('{icon}', fm.mime2class(file.mime));
                    docPattern = docPattern.replace('{type}', fm.mime2kind(file));
                    docPattern = docPattern.replace('{type}', fm.mime2kind(file));
                    docPattern = $(docPattern);

                    var ext = file.name.split('.').pop();
                    var cmd = docPattern.find(".right a");
                    var type = file.type;
                    if (type == 3) {
                        cmd.text(fm.i18n('cmd' + 'decrypt'));
                        docPattern.find(".top .operationtype").text(type);
                        cmd.click(function () {
                            actionHandler($(this));
                        });
                    } else if (type == 4) {
                        cmd.text(fm.i18n('cmd' + 'checksign'));
                        docPattern.find(".top .operationtype").text(type);
                        cmd.click(function (e) {
                            actionHandler($(this));
                        });
                    } else if (type == 6) {
                        cmd.text(fm.i18n('cmd' + 'decryptandchecksign'));
                        docPattern.find(".top .operationtype").text(type);
                        cmd.click(function (e) {
                            actionHandler($(this));
                        });
                    }
                    else {
                        cmd.remove();
                    }

                    popup.find('.documents-list table').append(docPattern);
                }
            },
            checkButton = function () {
                if (popup.find('.documents-list').is(':empty')) {
                    mainbut.removeClass(hover).addClass(disabled);
                } else {
                    mainbut.removeClass(disabled);
                }
            },
            showErrorBlock = function () {
                popup.find('.info').show();
                popup.find('.img').hide();
                popup.find('.info .message')
                    .addClass('error')
                    .text(fm.i18n('errreceivedmail'));
            },
            dfrd = $.Deferred()
                .fail(function (error) {
                    error && fm.error(error);
                });
        checkButton();
        popup.find('.info').hide();
        popup.find('.close')
            .bind('hover', function () {
                $(this).toggleClass(hover);
            })
            .click(function () {
                window.location.href = window.location.href.split('?')[0];
            });
        popup.find('.buttons .elfinder-link-button a').click(function () {
            window.location.href = window.location.href.split('?')[0];
        });

        mainbut
            .click(function () {

                if (!mainbut.is('.' + disabled)) {
                    var docList = popup.find('.documents-list').children().find('tr');
                    var data = { Type: null, Files: [] };
                    var types = [];
                    $.each(docList, function (i, doc) {
                        doc = $(doc);
                        var file = { name: null, path: null, lastChange: null, mime: null };
                        types.push(doc.find('.top .operationtype').text());
                        file.path = doc.find('.top .path').text();
                        file.lastChange = doc.find('.top .lastChange').text();
                        data.Files.push(file);
                    });
                    var type1 = types[0];
                    var undefOper = false;
                    for (var key in types) {
                        if (types[key] != type1) {
                            undefOper = true;
                        }
                    }
                    if (!undefOper && type1 != "") data.Type = type1;
                    var com;
                    if ((com = fm._commands['post'])) {
                        com.exec(fm.MasterUrl, data);
                    }
                }
            })
            .bind("mouseenter mouseleave", function () {
                checkButton();
            })
            .bind('hover', function () {
                !$(this).is('.' + disabled) && $(this).toggleClass(hover);
            });

        $elFinder.append(popup);

        window.scroll = baron({
            root: '.scroll-wrap',
            scroller: '.scroller',
            bar: '.scroller__bar',
            barOnCls: 'baron'
        });



        fm.request({
            data: { cmd: 'recivedmail', fileGroupSendId: id },
            preventFail: true
        })
            .fail(function (error) {
                showErrorBlock();
                window.console && window.console.log && window.console.log(error);
                dfrd.reject();
            })
            .done(function (data) {
                addFilesInPopup(data.Files);
                $('.js-visualize').on('click', function (e) {

                    if ($(e.target).hasClass('action'))
                        return false;

                    var path = $(this).find('.js-path').html();

                    var acceptExt = ['ods','xls','xlsb','xlsx','ods','xlsb','xlsm','xlsx','odp','pot','potm','potx',
                        'pps','ppsm','ppsx','ppt','pptm','pptx','odp','ppsx','pptx','doc','docm','docx','dot',
                        'dotm','dotx','odt','pdf','one','onetoc2','jpg','jpeg','gif','png','bmp','xml'];
                    var name =  path.split('/');
                    var ext = '';
                    name = name[name.length-1];
                    if (name !== null) {
                        ext = name.split('.');
                        ext = ext[ext.length-1];
                        if (acceptExt.indexOf(ext.toLowerCase()) !== -1) {
                            $.fancybox('#no-visualize',{
                                wrapCSS : 'no-visualiseModal',
                                autoSize	: true,
                                autoResize	: true,
                                scrolling: 'no',
                                afterClose: function() {
                                    window.visualState = false;
                                }
                            });
                        }
                    }

                    $.ajax({
                        url: '/helper/GetVisualizationInfo',async: false,type: "GET",data: {filename: path},
                        success: function (result) {
                            if (!result.Error) {
                                var len = 100;
                                if (name.length > len) {
                                    name = '...'+name.substring(name.length-len, name.length);
                                }
                                if (result.VisualizationUrl) {
                                    var leng=40;
                                    if (name.length > leng) {
                                        name = '...'+name.substring(name.length-leng, name.length);
                                    }
                                    $.fancybox({href : result.VisualizationUrl,type: 'iframe'},{
                                        helpers: {title: {position: 'top'}},
                                        maxWidth	: 700,
                                        height      : 1000,
                                        minWidth	: 200,
                                        autoSize	: true,
                                        autoResize	: true,
                                        scrolling: 'no',
                                        topRatio: 0,
                                        margin: [20, 20, 90, 20],
                                        closeClick	: false,
                                        openEffect	: 'fade',
                                        wrapCSS     : 'visualiseModal',
                                        title       : name,
                                        afterClose: function() {
                                            window.visualState = false;
                                        }
                                    });
                                } else {

                                    $.fancybox("<img align='center' width='100%' style='margin: 0 auto;display: block;' src='data:image/jpg;base64,"+result.Base64Picture+"'>",{
                                        helpers: {title: {position: 'top'}},
                                        aspectRatio : true,
                                        fitToView	: true,
                                        autoSize	: true,
                                        autoResize	: true,
                                        scrolling: 'no',
                                        topRatio: 0,
                                        margin: [20, 20, 90, 20],
                                        closeClick	: false,
                                        openEffect	: 'fade',
                                        wrapCSS     : 'visualiseModal',
                                        title       : name,
                                        afterClose: function() {
                                            window.visualState = false;
                                        }
                                    });
                                }
                            } else {
                                $.fancybox('#no-visualize',{
                                    wrapCSS : 'no-visualiseModal',
                                    autoSize	: true,
                                    autoResize	: true,
                                    scrolling: 'no',
                                    afterClose: function() {
                                        window.visualState = false;
                                    }
                                });
                            }
                        },
                        error: function (request, error, result) {}
                    });
                });
                checkButton();
                dfrd.done();
            })
            .always(function () {
                window.scroll && window.scroll.update();
            });
        return dfrd;
    }
};

"use strict";
elFinder.prototype.commands.opensendpopup = function() {
    var self = this,
        filter = function(hashes) {
            return $.map(self.files(hashes), function(f) { return f.mime == 'directory' ? null : f; });
        };
    this.getstate = function() {
        var sel = this.fm.selected(),
            cnt = sel.length;

        return sel.length >= 1 && sel.length <= 30 && cnt == filter(sel).length ? 0 : -1;
    };

    this.exec = function(hashes) {
        $('#elfinder').find('#modal').remove();
        var fm = this.fm,
            files = this.hashes(hashes),
            src = '/Default/sendmail?parent=elfinder&files=',
            popup = '<div id="modal"><div class="window send-popup popup">' +
                '<iframe src="{src}" style="border: none;height: 500px;width: 100%;"></iframe>' +
                '</div></div>',
            dfrd = $.Deferred()
                .fail(function(error) {
                    error && fm.error(error);
                });

        fm.request({
                data: { cmd: 'geturi', targets: files },
                preventFail: true
            })
            .fail(function(error) {
                dfrd.reject(error);
            })
            .done(function(data) {
                var uri = encodeURIComponent(JSON.stringify(data.Files));
                src = src + uri;
                popup = popup.replace('{src}', src);
                $('#elfinder').append(popup);

                window.hidePopup = function() {
                        $('#elfinder').find('#modal .popup').parent().remove();
                    },
                    dfrd.done();
            });
    };
};
"use strict";
elFinder.prototype.commands.decryptandchecksign = function() {

    this.getstate = function() {
        var sel = this.fm.selectedFiles(),
            cnt = sel.length;

        var files = $.map(sel, function(f) { return f.mime == 'directory' ? null : f; });
        return cnt >= 1 && cnt == files.length ? 0 : -1;
    };
    this.exec = function(hashes) {
        var fm = this.fm,
            cwd = fm.cwd().hash,
            files = this.files(hashes),
            cnt = files.length,
            dfrd = $.Deferred()
                .fail(function(error) {
                    error && fm.error(error);
                });

        if (!cnt || this._disabled) {
            return dfrd.reject();
        }

        $.each(files, function(i, file) {
            if (!file.phash) {
                return !dfrd.reject(['errRm', file.name, 'errPerm']);
            }
            if (file.locked) {
                return !dfrd.reject(['errLocked', file.name]);
            }
        });

        if (dfrd.state() == 'pending') {
            files = this.hashes(hashes);

            //fm.lockfiles({ files: files });
            fm.request({
                    data: { cmd: 'decryptandchecksign', targets: files },
                    notify: { type: 'decryptandchecksign', cnt: cnt },
                    preventFail: true
                })
                .fail(function(error) {
                    dfrd.reject(error);
                })
                .done(function(data) {
                        var com;
                        if ((com = fm._commands['post'])) {
                            com.exec(fm.MasterUrl, data);
                        }
                        dfrd.done();
                    }
                ).always(function() {
                    //fm.unlockfiles({ files: files });
                });
        }

        return dfrd;
    };
};
"use strict";
elFinder.prototype.commands.signandencrypt = function() {

    this.getstate = function() {
        var sel = this.fm.selectedFiles(),
            cnt = sel.length;

        var files = $.map(sel, function(f) { return f.mime == 'directory' ? null : f; });
        return cnt >= 1 && cnt == files.length ? 0 : -1;
    };
    this.exec = function(hashes) {
        var fm = this.fm,
            cwd = fm.cwd().hash,
            files = this.files(hashes),
            cnt = files.length,
            dfrd = $.Deferred()
                .fail(function(error) {
                    error && fm.error(error);
                });

        if (!cnt || this._disabled) {
            return dfrd.reject();
        }

        $.each(files, function(i, file) {
            if (!file.phash) {
                return !dfrd.reject(['errRm', file.name, 'errPerm']);
            }
            if (file.locked) {
                return !dfrd.reject(['errLocked', file.name]);
            }
        });

        if (dfrd.state() == 'pending') {
            files = this.hashes(hashes);

            //fm.lockfiles({ files: files });
            fm.request({
                    data: { cmd: 'signandencrypt', targets: files },
                    notify: { type: 'signandencrypt', cnt: cnt },
                    preventFail: true
                })
                .fail(function(error) {
                    dfrd.reject(error);
                })
                .done(function(data) {
                        var com;
                        if ((com = fm._commands['post'])) {
                            com.exec(fm.MasterUrl, data);
                        }
                        dfrd.done();
                    }
                ).always(function() {
                    //fm.unlockfiles({ files: files });
                });
        }

        return dfrd;
    };
};
"use strict";
elFinder.prototype.commands.add = function() {

    this.getstate = function() {
        var sel = this.fm.selectedFiles(),
            cnt = sel.length;

        var files = $.map(sel, function(f) {
            return f.mime == 'directory' ? null : f;
        });
        return cnt >= 1 && cnt == files.length ? 0 : -1;
    };
    this.exec = function(hashes, opts) {

        var fm = this.fm,
            cwd = fm.cwd().hash,
            files = this.files(hashes),
            cnt = files.length,
            dfrd = $.Deferred()
                .fail(function(error) {
                    error && fm.error(error);
                });

        if (!cnt || this._disabled) {
            return dfrd.reject();
        }

        $.each(files, function(i, file) {
            if (!file.phash) {
                return !dfrd.reject(['errRm', file.name, 'errPerm']);
            }
            if (file.locked) {
                return !dfrd.reject(['errLocked', file.name]);
            }
        });
        if (dfrd.state() == 'pending') {
            var file = this.fm.selectedFiles();
            files = this.hashes(hashes);
            fm.request({
                    data: { cmd: 'add', targets: files },
                    notify: { type: 'add', cnt: cnt },
                    preventFail: true
                })
                .fail(function(error) {
                    dfrd.reject(error);
                })
                .done(function(data) {
                        var href = window.location.href;
                        var key = '';
                        var m = href.match('key=([A-Za-z0-9_]*)');
                        if (m && m.length > 0) {
                            key = m[1];
                        }
                        if (parent.Master && parent.Master.OpenFilesEventHandler) {
                            parent.Master.OpenFilesEventHandler('addFile', { files: data.Files, key: key });
                        } else {
                            visualisation(data.Files,file, opts);
                        }
                        dfrd.done();
                    }
                ).always(function() {
                });
        }
        return dfrd;
    };
};
"use strict";
elFinder.prototype.commands.cancel = function() {
    this.options = { ui: 'linkbutton' };

    this.getstate = function() {
        return 0;
    };
    this.exec = function(hashes) {
        var fm = this.fm,
            cwd = fm.cwd().hash,
            files = this.files(hashes),
            cnt = files.length,
            dfrd = $.Deferred()
                .fail(function(error) {
                    error && fm.error(error);
                });
        fm.trigger('cancel');
        return dfrd;
    };
};
"use strict";
elFinder.prototype.commands.cryptinfo = function() {
    this.options = { ui: 'linkbutton' };

    this.getstate = function() {
        var sel = this.fm.selectedFiles();

        if (sel.length == 1) {
            var extension = sel[0].name.substr((sel[0].name.lastIndexOf('.') + 1));
            switch (extension) {
            case 'enc':
            case 'sig':
                return 0;
            default:
                return -1;
            }
        }

        return -1;
    };
    this.exec = function(hashes) {
        var fm = this.fm,
            cwd = fm.cwd().hash,
            files = this.files(hashes),
            cnt = files.length,
            cmd = fm._commands['infobarcmd'],
            dfrd = $.Deferred()
                .fail(function(error) {
                    error && fm.error(error);
                });

        if (!cnt || this._disabled) {
            return dfrd.reject();
        }

        $.each(files, function(i, file) {
            if (!file.phash) {
                return !dfrd.reject(['errRm', file.name, 'errPerm']);
            }
            if (file.locked) {
                return !dfrd.reject(['errLocked', file.name]);
            }
        });

        if (dfrd.state() == 'pending') {
            files = this.hashes(hashes);

            //fm.lockfiles({ files: files });
            fm.request({
                    data: { cmd: 'cryptinfo', targets: files },
                    notify: { type: 'cryptinfo', cnt: cnt },
                    preventFail: true
                })
                .fail(function(error) {
                    if (cmd) {
                        cmd.exec("Empty");
                    }
                    dfrd.done();
                })
                .done(function(data) {
                        if (cmd) {
                            cmd.exec(data);
                        }
                        dfrd.done();
                    }
                ).always(function() {
                    fm.unlockfiles({ files: files });
                });
        }

        return dfrd;
    };
};
"use strict";
elFinder.prototype.commands.certdownload = function() {
    var self = this,
        fm = this.fm;

    this.getstate = function() {
        return 0;
    };
    this.exec = function(certThumb) {
        var fm = this.fm,
            base = fm.options.url,
            dfrd = $.Deferred(),
            iframe = '',
            cdata = '',
            i = 1,
            url;

        if (this.disabled() || !certThumb) {
            return dfrd.reject();
        }

        if (fm.oldAPI) {
            fm.error('errCmdNoSupport');
            return dfrd.reject();
        }

        base += base.indexOf('?') === -1 ? '?' : '&';

        iframe += '<iframe class="downloader" id="downloader-cert" style="display:none" src="' +
            base + 'cmd=certdownload&target=' + certThumb + '&download=1"/>';

        $(iframe)
            .appendTo('body')
            .ready(function() {
                setTimeout(function() {
                    $(iframe).each(function() {
                        $('#' + $(this).attr('id')).remove();
                    });
                }, fm.UA.Firefox ? (20000 + (10000 * i)) : 10000); // give mozilla 20 sec + 10 sec for each file to be saved
            });

        return dfrd.resolve();
    };
};
"use strict";
elFinder.prototype.commands.filter = function() {
    this.options = { ui: 'filterbutton' };
    this.alwaysEnabled = true;
    this.updateOnSelect = false;
    this.getstate = function() {
        return 0;
    };

    this.filterState = 'NotCryptSign';
    this.filterFolder = '';

    this.exec = function(q) {
        var fm = this.fm,
            hash = fm.cwd().hash;
        //console.log(hash)
        if (typeof(q) == 'string' && q) {
            fm.trigger('filterstart', { query: q });

            return fm.request({
                data: { cmd: 'filter', target: hash, q: q },
                notify: { type: 'filter', cnt: 1, hideCnt: true }
            });
        }
        return $.Deferred().reject();
    };
};
"use strict";
elFinder.prototype.commands.post = function() {

    this.getstate = function() {
        return 0;
    };
    this.exec = function(path, data) {
        var fm = this.fm,
            method = 'post',
            form = $('<form/>').attr("method", method).attr("action", path),
            addHidden = function(name, value) {
                var hiddenField = document.createElement("input");
                hiddenField.setAttribute("type", "hidden");
                hiddenField.setAttribute("name", name);
                hiddenField.setAttribute("value", value);
                form.append(hiddenField);
            },
            constructElements = function(item, parentString) {
                if (typeof (item) == 'object') {
                    for (var key in item) {
                        if (item.hasOwnProperty(key) && item[key] != null) {
                            if (Object.prototype.toString.call(item[key]) === '[object Array]') {
                                for (var i = 0; i < item[key].length; i++) {
                                    constructElements(item[key][i], parentString + key + "[" + i + "]");
                                }
                            } else if (Object.prototype.toString.call(item[key]) === '[object Object]') {
                                constructElements(item[key], parentString + key + ".");
                            } else {
                                addHidden(parentString + key, item[key]);
                            }
                        }
                    }
                } else {
                    addHidden(parentString, item);
                }
            };
        if (data.Files) data.Files = JSON.stringify(data.Files);
        constructElements(data, "");

        $(document.body).append(form);
        $(form).submit();
    };
};
"use strict";
elFinder.prototype.commands.multiplyadd = function() {
    this.options = { ui: 'multiplyaddbutton' };

    this.getstate = function() {
        return 0;
    };
    this.exec = function(commandName) {
        var fm = this.fm,
            com,
            c = 'class',
            disabled = fm.res(c, 'disabled'),
            commands = fm._commands;

        if ((com = commands[commandName])) {
            if (!$(this).is('.' + disabled)) {
                com.exec();
            }
        }
        return $.Deferred().resolve();
    };
};
"use strict";
elFinder.prototype.commands.sign = function() {

    this.getstate = function() {
        var sel = this.fm.selectedFiles(),
            cnt = sel.length;

        var files = $.map(sel, function(f) { return f.mime == 'directory' ? null : f; });
        return cnt >= 1 && cnt == files.length ? 0 : -1;
    };
    this.exec = function(hashes) {
        var fm = this.fm,
            cwd = fm.cwd().hash,
            files = this.files(hashes),
            cnt = files.length,
            dfrd = $.Deferred()
                .fail(function(error) {
                    error && fm.error(error);
                });

        if (!cnt || this._disabled) {
            return dfrd.reject();
        }

        $.each(files, function(i, file) {
            if (!file.phash) {
                return !dfrd.reject(['errRm', file.name, 'errPerm']);
            }
            if (file.locked) {
                return !dfrd.reject(['errLocked', file.name]);
            }
        });

        if (dfrd.state() == 'pending') {
            files = this.hashes(hashes);

            //fm.lockfiles({ files: files });
            fm.request({
                    data: { cmd: 'sign', targets: files },
                    notify: { type: 'sign', cnt: cnt },
                    preventFail: true
                })
                .fail(function(error) {
                    dfrd.reject(error);
                })
                .done(function(data) {
                        var com;
                        if ((com = fm._commands['post'])) {
                            com.exec(fm.MasterUrl, data);
                        }
                        dfrd.done();
                    }
                ).always(function() {
                    //fm.unlockfiles({ files: files });
                });
        }

        return dfrd;
    };
};
//# sourceMappingURL=data:application/json;base64,
